<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pythontarget_8c" kind="file" language="C++">
    <compoundname>pythontarget.c</compoundname>
    <includes refid="pythontarget_8h" local="yes">pythontarget.h</includes>
    <includes local="yes">core/util.h</includes>
    <incdepgraph>
      <node id="4">
        <label>structmember.h</label>
      </node>
      <node id="7">
        <label>core/util.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>Python.h</label>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c</label>
        <link refid="pythontarget_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ctarget.h</label>
      </node>
      <node id="2">
        <label>pythontarget.h</label>
        <link refid="pythontarget_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pythontarget_8c_1ae787d44634a053c66de13b77efdcbb2e" prot="public" static="yes" mutable="no">
        <type>PyMappingMethods</type>
        <definition>PyMappingMethods port_as_mapping</definition>
        <argsstring></argsstring>
        <name>port_as_mapping</name>
        <initializer>= {    
    (lenfunc)port_length,
    (binaryfunc)port_capsule_get_item,
    (objobjargproc)port_capsule_assign_get_item
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Methods that convert a LinguaFranca.port_capsule into a mapping, which allows it to be subscriptble. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="444" column="25" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1a916a5c55fdf2a87bea3fcf8d91219787" prot="public" static="yes" mutable="no">
        <type>PyMemberDef</type>
        <definition>PyMemberDef port_capsule_members[]</definition>
        <argsstring>[]</argsstring>
        <name>port_capsule_members</name>
        <initializer>= {
    {&quot;port&quot;, T_OBJECT, offsetof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>, port), 0, &quot;&quot;},
    {&quot;value&quot;, T_OBJECT, offsetof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>, value), 0, &quot;Value of the port&quot;},
    {&quot;is_present&quot;, T_BOOL, offsetof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>, is_present), 0, &quot;Check if value is present at current logical time&quot;},
    {&quot;width&quot;, T_INT, offsetof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>, width), 0, &quot;&quot;},    
    {NULL, NULL, 0, NULL}  
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="584" column="20" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1ad3aed416fe2ab083b0b24b6ddaa67de8" prot="public" static="yes" mutable="no">
        <type>PyMethodDef</type>
        <definition>PyMethodDef port_capsule_methods[]</definition>
        <argsstring>[]</argsstring>
        <name>port_capsule_methods</name>
        <initializer>= {
    {&quot;__getitem__&quot;, (PyCFunction)port_capsule_get_item, METH_O|METH_COEXIST, &quot;x.__getitem__(y) &lt;==&gt; x[y]&quot;},
    {&quot;set&quot;, (PyCFunction)py_SET, METH_VARARGS, &quot;Set value of the port as well as the is_present field&quot;},
    {NULL}  
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="597" column="20" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1a08b53d15f9291a2863c8630ca79c5430" prot="public" static="yes" mutable="no">
        <type>PyTypeObject</type>
        <definition>PyTypeObject port_capsule_t</definition>
        <argsstring></argsstring>
        <name>port_capsule_t</name>
        <initializer>= {
    PyVarObject_HEAD_INIT(NULL, 0)
    .tp_name = &quot;LinguaFranca.port_capsule&quot;,
    .tp_doc = &quot;port_capsule objects&quot;,
    .tp_basicsize = sizeof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>),
    .tp_itemsize = 0,
    .tp_flags = Py_TPFLAGS_DEFAULT,
    .tp_as_mapping = &amp;port_as_mapping,
    .tp_iter = port_iter,
    .tp_iternext = port_iter_next,
    .tp_new = port_capsule_new,
    .tp_init = (initproc) port_capsule_init,
    .tp_dealloc = (destructor) port_capsule_dealloc,
    .tp_members = port_capsule_members,
    .tp_methods = port_capsule_methods,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="608" column="21" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1aad2a5dc5e687914c174d9a082b597557" prot="public" static="yes" mutable="no">
        <type>PyMemberDef</type>
        <definition>PyMemberDef port_instance_token_members[]</definition>
        <argsstring>[]</argsstring>
        <name>port_instance_token_members</name>
        <initializer>= {
    {&quot;value&quot;, T_OBJECT_EX, offsetof(<ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>, value), 0, &quot;Value of the port&quot;},
    {&quot;is_present&quot;, T_BOOL, offsetof(<ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>, is_present), 0, &quot;Check if value is present at current logical time&quot;},
    {&quot;num_destinations&quot;, T_INT, offsetof(<ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>, num_destinations), 0, &quot;Number of destinations&quot;},
    {NULL}  
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="630" column="20" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1a249b36b8bc0599c27adf2ebd935b4c49" prot="public" static="yes" mutable="no">
        <type>PyTypeObject</type>
        <definition>PyTypeObject port_instance_token_t</definition>
        <argsstring></argsstring>
        <name>port_instance_token_t</name>
        <initializer>= {
    PyVarObject_HEAD_INIT(NULL, 0)
    .tp_name = &quot;LinguaFranca.port_instance&quot;,
    .tp_doc = &quot;port_instance objects&quot;,
    .tp_basicsize = sizeof(<ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>),
    .tp_itemsize = 0,
    .tp_flags = Py_TPFLAGS_DEFAULT,
    .tp_new = PyType_GenericNew,
    .tp_members = port_instance_token_members,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="642" column="21" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1a50abc1a93bc98e0570f2540a0ddafb86" prot="public" static="yes" mutable="no">
        <type>PyMemberDef</type>
        <definition>PyMemberDef action_capsule_members[]</definition>
        <argsstring>[]</argsstring>
        <name>action_capsule_members</name>
        <initializer>= {
    {&quot;action&quot;, T_OBJECT, offsetof(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>, action), 0, &quot;The pointer to the C action struct&quot;},
    {&quot;value&quot;, T_OBJECT, offsetof(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>, value), 0, &quot;Value of the action&quot;},
    {&quot;is_present&quot;, T_BOOL, offsetof(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>, is_present), 0, &quot;Check that shows if action is present&quot;},
    {NULL}  
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="659" column="20" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1a02e3722f52a488c707b4c5a36c5e44f0" prot="public" static="yes" mutable="no">
        <type>PyMethodDef</type>
        <definition>PyMethodDef action_capsule_methods[]</definition>
        <argsstring>[]</argsstring>
        <name>action_capsule_methods</name>
        <initializer>= {
    {&quot;schedule&quot;, (PyCFunction)py_schedule, METH_VARARGS, &quot;Schedule the action with the given offset&quot;},
    {NULL}  
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function members of action capsule </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="670" column="20" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1ab1d208f34b364e32718d3d203a1890db" prot="public" static="yes" mutable="no">
        <type>PyTypeObject</type>
        <definition>PyTypeObject action_capsule_t</definition>
        <argsstring></argsstring>
        <name>action_capsule_t</name>
        <initializer>= {
    PyVarObject_HEAD_INIT(NULL, 0)
    .tp_name = &quot;LinguaFranca.action_instance&quot;,
    .tp_doc = &quot;action_instance object&quot;,
    .tp_basicsize = sizeof(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>),
    .tp_itemsize = 0,
    .tp_flags = Py_TPFLAGS_DEFAULT,
    .tp_new = action_capsule_new,
    .tp_init = (initproc) action_capsule_init,
    .tp_dealloc = (destructor) action_capsule_dealloc,
    .tp_members = action_capsule_members,
    .tp_methods = action_capsule_methods,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="679" column="21" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8c_1afecb8e3a2ce549926be787dbea9aea6e" prot="public" static="yes" mutable="no">
        <type>PyModuleDef</type>
        <definition>PyModuleDef MODULE_NAME</definition>
        <argsstring></argsstring>
        <name>MODULE_NAME</name>
        <initializer>= {
    PyModuleDef_HEAD_INIT,
    TOSTRING(MODULE_NAME),
    &quot;LinguaFranca Python Module&quot;,
    -1,

}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define the Lingua Franca module. The MODULE_NAME is given by the generated code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="726" column="20" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="726" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pythontarget_8c_1a3accc0eb60f572b9817b5400db69b6f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_SET</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_SET</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value and is_present field of self which is of type LinguaFranca.port_capsule</para>
<para>Each LinguaFranca.port_capsule includes a void* pointer of the C port (a.k.a. generic_port_instance_struct*). <simplesect kind="see"><para><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref> in <ref refid="pythontarget_8h" kindref="compound">pythontarget.h</ref></para>
</simplesect>
This function calls the underlying _LF_SET API. <simplesect kind="see"><para>xtext/org.icyphy.linguafranca/src/lib/core/reactor.h</para>
</simplesect>
This function can be used to set any type of PyObject ranging from primitive types to complex lists and tuples. Moreover, this function is callable from Python target code by using port_name.out(value)</para>
<para>Some examples include port_name.out(&quot;Hello&quot;) port_name.out(5) port_name.out([&quot;Hello&quot;, 5 , (2.8, &quot;X&quot;)])</para>
<para>The port type given in the Lingua Franca is only used as a &quot;suggestion&quot; as per Python&apos;s duck typing principles. The end-user is responsible for appropriately handling types on the recieveing end of this port. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The output port (by name) or input of a contained reactor in form instance_name.port_name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>contains: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert into the port struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="64" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="64" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1affc5826a64f44605c4db375276912944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>lf_token_t *</type>
        <definition>lf_token_t* __initialize_token_with_value</definition>
        <argsstring>(lf_token_t *token, void *value, int length)</argsstring>
        <name>__initialize_token_with_value</name>
        <param>
          <type>lf_token_t *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prototype for the internal API. <simplesect kind="see"><para>reactor_common.c </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="98" column="12" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" declline="98" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a02aaee842c2c225482fb73cc838dc43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>trigger_t *</type>
        <definition>trigger_t* _lf_action_to_trigger</definition>
        <argsstring>(void *action)</argsstring>
        <name>_lf_action_to_trigger</name>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prototype for API function. <simplesect kind="see"><para>lib/core/reactor_common.c </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="103" column="11" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" declline="103" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1ae5d0540d3de8732e4a9afeaa637c22d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_schedule</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_schedule</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedule an action to occur with the specified time offset with no payload (no value conveyed). This function is callable in Python by calling action_name.schedule(offset). Some examples include: action_name.schedule(5) action_name.schedule(NSEC(5)) See schedule_token(), which this uses, for details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the calling object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>contains: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an action on the self struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The time offset over and above that in the action. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="118" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="118" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a97f159b05fbdf6d35ad47da03972106e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_schedule_copy</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_schedule_copy</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedule an action to occur with the specified value and time offset with a copy of the specified value. See reactor.h for documentation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="163" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="163" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a66c367ccdaf532103260df2e33d9cd51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_get_elapsed_logical_time</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_get_elapsed_logical_time</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the elapsed physical time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="191" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1ac800ff39ffe683e66446fd6bd8100885" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_get_logical_time</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_get_logical_time</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the elapsed physical time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="198" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1acf8dafa9260bb29f637ad53ec0556583" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_get_physical_time</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_get_physical_time</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the elapsed physical time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="205" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a0de9cef51748833c318227ed2e5bbe2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>instant_t</type>
        <definition>instant_t get_elapsed_physical_time</definition>
        <argsstring>()</argsstring>
        <name>get_elapsed_physical_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the elapsed physical time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="212" column="11" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" declline="212" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1ad1b4c87976ddf6b16dde85fa0d1dcdc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_get_elapsed_physical_time</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_get_elapsed_physical_time</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="213" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prototype for the main function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="220" column="5" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" declline="220" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1af629769c213699f0e4c9360811ee7251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void request_stop</definition>
        <argsstring>()</argsstring>
        <name>request_stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prototype for <ref refid="pythontarget_8c_1af629769c213699f0e4c9360811ee7251" kindref="member">request_stop()</ref>. <simplesect kind="see"><para>reactor.c and reactor_threaded.c </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="226" column="6" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" declline="226" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a28fd070aa63a38c94d2c169b021301a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_request_stop</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>py_request_stop</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop execution at the conclusion of the current logical time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="232" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1adb5619e841895c3a63a486fe0fc92160" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_main</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_main</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="242" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a6336564bc64a1c819aabdfc943daa7e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void port_capsule_dealloc</definition>
        <argsstring>(generic_port_capsule_struct *self)</argsstring>
        <name>port_capsule_dealloc</name>
        <param>
          <type><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when a port_capsule has to be deallocated (generally by the Python garbage collector). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of generic_port_instance_struct* </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="257" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a7f21c0ae2fd4108e2a4af8a683c249f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* port_capsule_new</definition>
        <argsstring>(PyTypeObject *type, PyObject *args, PyObject *kwds)</argsstring>
        <name>port_capsule_new</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>kwds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new port_capsule. Note that a LinguaFranca.port_capsule PyObject follows the same structure as the <simplesect kind="see"><para><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>.</para>
</simplesect>
To initialize the port_capsule, this function first initializes a generic_port_capsule_struct* self using the tp_alloc property of port_capsule (<simplesect kind="see"><para>port_capsule_t) and then assigns the members of self with default values of port= NULL, value = NULL, is_present = false, current_index = 0, width = -2. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python type object. In this case, port_capsule_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional arguments that are: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>A capsule that holds a void* to the underlying C port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>An indication of whether or not the value of the port is present at the current logical time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to reference multiports in the iterator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to indicate the width of a multiport. If the port is not a multiport, this field will be -2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kwds</parametername>
</parameternamelist>
<parameterdescription>
<para>Keywords (</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Python keywords) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="284" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="284" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a5528caf5a676039da4566414a6121945" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* port_iter</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>port_iter</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The iterator function that can be useful to implement iterator features for multiports. For example to make for p in foo_multiport: p.set(42) possible in Python. FIXME: Incomplete iterator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="306" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="306" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a07297e13d6a727f0abbf1b379323b813" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* port_iter_next</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>port_iter_next</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function that is responsible for getting the next iterator for a multiport. This would make the following code possible: for p in foo_multiport: p.set(42) FIXME: incomplete iterator next </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="347" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="347" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a94d10cc03c7e1d05a050841dca65c51b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* port_capsule_get_item</definition>
        <argsstring>(PyObject *self, PyObject *item)</argsstring>
        <name>port_capsule_get_item</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an item from a Linugua Franca port capsule type. If a port is a not a multiport, it will have a width of -2 (<simplesect kind="see"><para>CGenerator.xtend). In this case, this function will return the port capsule itself. If a port is a multiport, this function will convert the index item and convert it into a C long long, and use it to access the underlying array stored in the PyCapsule as &quot;port&quot;. A new non-multiport capsule is created and returned, which in turn can be used as an ordinary LinguaFranca.port_capsule. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The port which can be a multiport or a singular port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The index which is used to retrieve an item from the underlying C array if the port is a multiport. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="365" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="365" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a93081c6bb5aa1d5dae0c3bbcaed920bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int port_capsule_assign_get_item</definition>
        <argsstring>(PyObject *self, PyObject *item, PyObject *value)</argsstring>
        <name>port_capsule_assign_get_item</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is overloaded to prevent directly assigning to multiports. The set function currently is the only way to assign value to ports. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of type LinguaFranca.port_capsule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (which is ignored) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be assigned (which is ignored) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="422" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="422" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a8a885e11882800726f2d2cadc5531e92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Py_ssize_t</type>
        <definition>static Py_ssize_t port_length</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>port_length</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that allows the invocation of len() on a port. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>A port of type LinguaFranca.port_capsule </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="434" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="434" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1abf17cc0866aae2ef338d878ca3013234" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int port_capsule_init</definition>
        <argsstring>(generic_port_capsule_struct *self, PyObject *args, PyObject *kwds)</argsstring>
        <name>port_capsule_init</name>
        <param>
          <type><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>kwds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the port capsule self with the given optional values for port, value, is_present, and num_destinations. If any of these arguments are missing, the default values are assigned <simplesect kind="see"><para>port_intance_new </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The port_instance PyObject that follows the generic_port_instance_struct* internal structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional arguments that are: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>A capsule that holds a void* to the underlying C port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>An indication of whether or not the value of the port is present at the current logical time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to reference multiports in the iterator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to indicate the width of a multiport. If the port is not a multiport, this field will be -2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="467" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="467" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a012ae3b6884f9d47510a73dd671f285d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void action_capsule_dealloc</definition>
        <argsstring>(generic_action_capsule_struct *self)</argsstring>
        <name>action_capsule_dealloc</name>
        <param>
          <type><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when an action in Python is deallocated (generally called by the Python grabage collector). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="502" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="502" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1aeea8b6b71d50d9555c8b115eb45c75a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* action_capsule_new</definition>
        <argsstring>(PyTypeObject *type, PyObject *args, PyObject *kwds)</argsstring>
        <name>action_capsule_new</name>
        <param>
          <type>PyTypeObject *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>kwds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when an action in Python is to be created. Note that LinguaFranca.action_capsule follows the same structure as the <simplesect kind="see"><para><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>.</para>
</simplesect>
To initialize the action_capsule, this function first calls the tp_alloc method of type action_capsule_t and then assign default values of NULL, NULL, 0 to the members of the <ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="517" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="517" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a9cd10145cb6f54858be7e15b0c7e0232" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int action_capsule_init</definition>
        <argsstring>(generic_action_capsule_struct *self, PyObject *args, PyObject *kwds)</argsstring>
        <name>action_capsule_init</name>
        <param>
          <type><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>kwds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the action capsule &quot;self&quot; with the given optional values for action (void *), value (PyObject*), and is_present (bool). If any of these arguments are missing, the default values are assigned.</para>
<para><simplesect kind="see"><para>port_intance_new </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The port_instance PyObject that follows the generic_port_instance_struct* internal structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional arguments that are: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The void * pointer to a C action instance struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>An indication of whether or not the value of the port is present at the current logical time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Used for reference-keeping inside the C runtime </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="545" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="545" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a50d423ddacfad6f68553dcdd8df07049" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyMethodDef</type>
        <definition>static PyMethodDef GEN_NAME</definition>
        <argsstring>(MODULE_NAME, _methods)[]</argsstring>
        <name>GEN_NAME</name>
        <param>
          <type>MODULE_NAME</type>
        </param>
        <param>
          <type>_methods</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind Python function names to the C functions. The name of this struct is dynamically generated because MODULE_NAME is given by the generated code. This struct will be named as MODULE_NAME_methods. For example, for MODULE_NAME=Foo, this struct will be called Foo_methods. start() initiates the main loop in the C core library <simplesect kind="see"><para>schedule_copy </para>
</simplesect>
<simplesect kind="see"><para>get_elapsed_logical_time </para>
</simplesect>
<simplesect kind="see"><para>get_logical_time </para>
</simplesect>
<simplesect kind="see"><para>get_physical_time </para>
</simplesect>
<simplesect kind="see"><para><ref refid="pythontarget_8c_1a0de9cef51748833c318227ed2e5bbe2a" kindref="member">get_elapsed_physical_time</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="pythontarget_8c_1af629769c213699f0e4c9360811ee7251" kindref="member">request_stop</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="710" column="20" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" declline="710" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1aeb7f2f1fd755af7ef03e33eb7e1ff22c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyMODINIT_FUNC</type>
        <definition>PyMODINIT_FUNC GEN_NAME</definition>
        <argsstring>(PyInit_, MODULE_NAME)</argsstring>
        <name>GEN_NAME</name>
        <param>
          <type>PyInit_</type>
        </param>
        <param>
          <type>MODULE_NAME</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="746" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="746" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1ad52c5f970c1f6a4dde6f3457c92402ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_action_capsule</definition>
        <argsstring>(PyObject *capsule)</argsstring>
        <name>destroy_action_capsule</name>
        <param>
          <type>PyObject *</type>
          <declname>capsule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Python Helper Functions These functions are called in generated C code for various reasons. Their main purpose is to facilitate C runtime&apos;s communication with Python code. A function that destroys action capsules </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="807" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="807" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1aeddc8cc41a9c71f3e325c2ef536c66cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* convert_C_port_to_py</definition>
        <argsstring>(void *port, int width)</argsstring>
        <name>convert_C_port_to_py</name>
        <param>
          <type>void *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that is called any time a Python reaction is called with ports as inputs and outputs. This function converts ports that are either a multiport or a non-multiport into a port_capsule.</para>
<para>First, the void* pointer is stored in a PyCapsule. If the port is not a multiport, the value and is_present fields are copied verbatim. These feilds then can be accessed from the Python code as port.value and port.is_present. If the value is absent, it will be set to None.</para>
<para>For multiports, the value of the port_capsule (i.e., port.value) is always set to None and is_present is set to false. Individual ports can then later be accessed in Python code as port[idx]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="826" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="826" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a9c4b82196fed6530c278b79a1a21b430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* convert_C_action_to_py</definition>
        <argsstring>(void *action)</argsstring>
        <name>convert_C_action_to_py</name>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A helper function to convert C actions to Python action capsules <simplesect kind="see"><para>xtext/org.icyphy.linguafranca/src/org/icyphy/generator/CGenerator.xtend for details about C actions Python actions have the following fields (for more informatino </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>): PyObject_HEAD PyObject* action; <linebreak/>
 PyObject* value; bool is_present;</para>
</simplesect>
The input to this function is a pointer to a C action, which might or might not contain a value and an is_present field. To simplify the assumptions made by this function, the &quot;value&quot; and &quot;is_present&quot; are passed to the function instead of expecting them to exist.</para>
<para>The void* pointer to the C action instance is encapsulated in a PyCapsule instead of passing an exposed pointer through Python. <simplesect kind="see"><para><ulink url="https://docs.python.org/3/c-api/capsule.html">https://docs.python.org/3/c-api/capsule.html</ulink> This encapsulation is done by calling PyCapsule_New(action, &quot;name_of_the_container_in_the_capsule&quot;, NULL), where &quot;name_of_the_container_in_the_capsule&quot; is an agreed-upon container name inside the capsule. This capsule can then be treated as a PyObject* and safely passed through Python code. On the other end (which is in schedule functions), PyCapsule_GetPointer(received_action,&quot;action&quot;) can be called to retrieve the void* pointer into received_action. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="894" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="894" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8c_1a9059deaaaa3994f2603157a5ab5e3d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* get_python_function</definition>
        <argsstring>(string module, string class, int instance_id, string func)</argsstring>
        <name>get_python_function</name>
        <param>
          <type>string</type>
          <declname>module</declname>
        </param>
        <param>
          <type>string</type>
          <declname>class</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instance_id</declname>
        </param>
        <param>
          <type>string</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a Python func in class[instance_id] from module. Class instances in generated Python code are always instantiated in a list of template classs[_class(params), _class(params), ...] (note the extra s) regardless of whether a bank is used or not. If there is no bank, or a bank of width 1, the list will be instantiated as classs[_class(params)].</para>
<para>This function would thus call classs[0] to access the first instance in a bank and so on.</para>
<para>Possible optimizations include: - Not loading the module each time (by storing it in global memory),<itemizedlist>
<listitem><para>Keeping a persistent argument table <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python module to load the function from. In embedded mode, it should be set to &quot;__main__&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>class</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the list of classes in the generated Python code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The element number in the list of classes. class[instance_id] points to a class instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The reaction functino to be called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pArgs</parametername>
</parameternamelist>
<parameterdescription>
<para>the PyList of arguments to be sent to function func() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" line="952" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="952" bodyend="1080"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Soroush Bateni (<ulink url="mailto:soroush@utdallas.edu">soroush@utdallas.edu</ulink>)</para>
</simplesect>
</para>
<sect1 id="pythontarget_8h_1LICENSE">
<title>LICENSE</title>
<para>Copyright (c) 2020, The University of California at Berkeley.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem></orderedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
</sect1>
<sect1 id="pythontarget_8h_1DESCRIPTION">
<title>DESCRIPTION</title>
<para>Implementation of functions defined in <simplesect kind="see"><para><ref refid="pythontarget_8h" kindref="compound">pythontarget.h</ref> </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="32"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pythontarget_8h" kindref="compound">pythontarget.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core/util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"></codeline>
<codeline lineno="64"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_SET(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*<sp/>p<sp/>=<sp/>(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>val,<sp/>*tmp;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;O&quot;</highlight><highlight class="normal">,<sp/>&amp;val))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>set<sp/>objects.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__instance__struct" kindref="compound">generic_port_instance_struct</ref>*<sp/>port<sp/>=<sp/>PyCapsule_GetPointer(p-&gt;port,<sp/></highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Null<sp/>pointer<sp/>received.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)<sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>port-&gt;value;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(val);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LF_SET(port,<sp/>val);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>set<sp/>the<sp/>values<sp/>for<sp/>the<sp/>port<sp/>capsule.<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;value<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;is_present<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Py_XDECREF(tmp);<sp/>//<sp/>Since<sp/>value<sp/>is<sp/>allocated<sp/>in<sp/>Python,<sp/>the<sp/>Python<sp/>garbage<sp/>collector<sp/>will<sp/>manage<sp/>and<sp/>free<sp/>this<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"></codeline>
<codeline lineno="98"><highlight class="normal">lf_token_t*<sp/><ref refid="pythontarget_8c_1affc5826a64f44605c4db375276912944" kindref="member">__initialize_token_with_value</ref>(lf_token_t*<sp/>token,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">trigger_t*<sp/><ref refid="pythontarget_8c_1a02aaee842c2c225482fb73cc838dc43f" kindref="member">_lf_action_to_trigger</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_schedule(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>*<sp/>act<sp/>=<sp/>(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;L|O&quot;</highlight><highlight class="normal">,<sp/>&amp;offset,<sp/>&amp;value))</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action<sp/>=<sp/>PyCapsule_GetPointer(act-&gt;action,</highlight><highlight class="stringliteral">&quot;action&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Null<sp/>pointer<sp/>received.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger_t*<sp/>trigger<sp/>=<sp/><ref refid="pythontarget_8c_1a02aaee842c2c225482fb73cc838dc43f" kindref="member">_lf_action_to_trigger</ref>(action);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_token_t*<sp/>t<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>value<sp/>exists<sp/>and<sp/>token<sp/>is<sp/>not<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>(trigger-&gt;token<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DEBUG:<sp/>adjust<sp/>the<sp/>element_size<sp/>(might<sp/>not<sp/>be<sp/>necessary)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger-&gt;token-&gt;element_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PyObject*);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger-&gt;element_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PyObject*);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="pythontarget_8c_1affc5826a64f44605c4db375276912944" kindref="member">__initialize_token_with_value</ref>(trigger-&gt;token,<sp/>value,<sp/>1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>give<sp/>the<sp/>new<sp/>value<sp/>back<sp/>to<sp/>the<sp/>Python<sp/>action<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>act-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>the<sp/>token<sp/>along</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_schedule_token(action,<sp/>offset,<sp/>t);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>handle<sp/>is<sp/>not<sp/>passed<sp/>to<sp/>the<sp/>Python<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_schedule_copy(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>*<sp/>act;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>value;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;OLOi&quot;</highlight><highlight class="normal"><sp/>,&amp;act,<sp/>&amp;offset,<sp/>&amp;value,<sp/>&amp;length))</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action<sp/>=<sp/>PyCapsule_GetPointer(act-&gt;action,</highlight><highlight class="stringliteral">&quot;action&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Null<sp/>pointer<sp/>received.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_schedule_copy(action,<sp/>offset,<sp/>value,<sp/>length);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>handle<sp/>is<sp/>not<sp/>passed<sp/>to<sp/>the<sp/>Python<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"></codeline>
<codeline lineno="191"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_get_elapsed_logical_time(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromLong(get_elapsed_logical_time());</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_get_logical_time(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromLong(get_logical_time());</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_get_physical_time(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromLong(get_physical_time());</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">instant_t<sp/><ref refid="pythontarget_8c_1a0de9cef51748833c318227ed2e5bbe2a" kindref="member">get_elapsed_physical_time</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_get_elapsed_physical_time(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromLong(<ref refid="pythontarget_8c_1a0de9cef51748833c318227ed2e5bbe2a" kindref="member">get_elapsed_physical_time</ref>());</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pythontarget_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pythontarget_8c_1af629769c213699f0e4c9360811ee7251" kindref="member">request_stop</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"></codeline>
<codeline lineno="232"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_request_stop(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pythontarget_8c_1af629769c213699f0e4c9360811ee7251" kindref="member">request_stop</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_main(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pythontarget_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(1,<sp/>NULL);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"></codeline>
<codeline lineno="256"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">port_capsule_dealloc(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;port);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;value);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_TYPE(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;tp_free((PyObject<sp/>*)<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="284"><highlight class="normal">port_capsule_new(PyTypeObject<sp/>*type,<sp/>PyObject<sp/>*args,<sp/>PyObject<sp/>*kwds)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref><sp/>*)<sp/>type-&gt;tp_alloc(type,<sp/>0);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;port<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;is_present<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;current_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;width<sp/>=<sp/>-2;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyObject<sp/>*)<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="normal">port_iter(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*<sp/>port<sp/>=<sp/>(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*<sp/>pyport<sp/>=<sp/>(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)self-&gt;ob_type-&gt;tp_new(self-&gt;ob_type,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>port-&gt;current_index;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port-&gt;current_index<sp/>==<sp/>port-&gt;width)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port-&gt;current_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port-&gt;width<sp/>==<sp/>-2)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Non-multiport<sp/>type<sp/>is<sp/>not<sp/>iteratable.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__instance__struct" kindref="compound">generic_port_instance_struct</ref><sp/>**cport<sp/>=<sp/>(<ref refid="structgeneric__port__instance__struct" kindref="compound">generic_port_instance_struct</ref><sp/>**)PyCapsule_GetPointer(port-&gt;port,</highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cport<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Null<sp/>pointer<sp/>received.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Py_INCREF(cport[index]-&gt;value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>pyport-&gt;port<sp/>=<sp/>PyCapsule_New(cport[index],<sp/></highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>pyport-&gt;value<sp/>=<sp/>cport[index]-&gt;value;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>pyport-&gt;is_present<sp/>=<sp/>cport[index]-&gt;is_present;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>port-&gt;current_index++;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(pyport);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pyport;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="347"><highlight class="normal">port_iter_next(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="365"><highlight class="normal">port_capsule_get_item(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*item)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*<sp/>port<sp/>=<sp/>(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*<sp/>pyport<sp/>=<sp/>(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)self-&gt;ob_type-&gt;tp_new(self-&gt;ob_type,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>-3;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Port<sp/>is<sp/>not<sp/>a<sp/>multiport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port-&gt;width<sp/>==<sp/>-2)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>PyLong_AsLong(item);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>-3)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;multiport<sp/>indices<sp/>must<sp/>be<sp/>integers,<sp/>not<sp/>%.200s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_TYPE(item)-&gt;tp_name);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>!=<sp/>-3<sp/>&amp;&amp;<sp/>port-&gt;width<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__instance__struct" kindref="compound">generic_port_instance_struct</ref><sp/>**cport<sp/>=<sp/>(<ref refid="structgeneric__port__instance__struct" kindref="compound">generic_port_instance_struct</ref><sp/>**)PyCapsule_GetPointer(port-&gt;port,</highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cport<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print_and_exit(</highlight><highlight class="stringliteral">&quot;Null<sp/>pointer<sp/>received.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Py_INCREF(cport[index]-&gt;value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyport-&gt;port<sp/>=<sp/>PyCapsule_New(cport[index],<sp/></highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyport-&gt;value<sp/>=<sp/>cport[index]-&gt;value;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyport-&gt;is_present<sp/>=<sp/>cport[index]-&gt;is_present;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyport-&gt;width<sp/>=<sp/>-2;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pyport-&gt;value<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyport-&gt;value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Py_INCREF(((generic_port_capsule_struct*)port)-&gt;value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(pyport);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Py_INCREF(self);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pyport;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">port_capsule_assign_get_item(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*item,<sp/>PyObject*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;You<sp/>cannot<sp/>assign<sp/>to<sp/>ports<sp/>directly.<sp/>Please<sp/>use<sp/>the<sp/>.set<sp/>method.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_TYPE(item)-&gt;tp_name);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Py_ssize_t</highlight></codeline>
<codeline lineno="434"><highlight class="normal">port_length(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*<sp/>port<sp/>=<sp/>(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Getting<sp/>the<sp/>length,<sp/>which<sp/>is<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>port-&gt;width);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Py_ssize_t)port-&gt;width;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMappingMethods<sp/>port_as_mapping<sp/>=<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>(lenfunc)port_length,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>(binaryfunc)port_capsule_get_item,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>(objobjargproc)port_capsule_assign_get_item</highlight></codeline>
<codeline lineno="448"><highlight class="normal">};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">port_capsule_init(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args,<sp/>PyObject<sp/>*kwds)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kwlist[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;is_present&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;current_index&quot;</highlight><highlight class="normal">,<sp/>NULL};</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*value<sp/>=<sp/>NULL,<sp/>*tmp,<sp/>*port<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTupleAndKeywords(args,<sp/>kwds,<sp/></highlight><highlight class="stringliteral">&quot;|OOp&quot;</highlight><highlight class="normal">,<sp/>kwlist,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;port,<sp/>&amp;value,<sp/>&amp;self-&gt;is_present,<sp/>&amp;self-&gt;width,<sp/>&amp;self-&gt;current_index))</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value){</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;value;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port){</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;port;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(port);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;port<sp/>=<sp/>port;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"></codeline>
<codeline lineno="501"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">action_capsule_dealloc(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;action);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(self-&gt;value);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_TYPE(</highlight><highlight class="keyword">self</highlight><highlight class="normal">)-&gt;tp_free((PyObject<sp/>*)<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="517"><highlight class="normal">action_capsule_new(PyTypeObject<sp/>*type,<sp/>PyObject<sp/>*args,<sp/>PyObject<sp/>*kwds)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref><sp/>*)<sp/>type-&gt;tp_alloc(type,<sp/>0);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;action<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;is_present<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyObject<sp/>*)<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">action_capsule_init(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args,<sp/>PyObject<sp/>*kwds)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kwlist[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;action&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;is_present&quot;</highlight><highlight class="normal">,<sp/>NULL};</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*action<sp/>=<sp/>NULL,<sp/>*value<sp/>=<sp/>NULL,<sp/>*tmp;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTupleAndKeywords(args,<sp/>kwds,<sp/></highlight><highlight class="stringliteral">&quot;|OOi&quot;</highlight><highlight class="normal">,<sp/>kwlist,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;action,<sp/>&amp;value,<sp/>&amp;self-&gt;is_present))<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;action;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(action);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;action<sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;value;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"></codeline>
<codeline lineno="576"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/>The<sp/>members<sp/>of<sp/>a<sp/>port_capsule,<sp/>used<sp/>to<sp/>define</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>a<sp/>native<sp/>Python<sp/>type.</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>port<sp/>contains<sp/>the<sp/>port<sp/>capsule,<sp/>which<sp/>holds<sp/>a<sp/>void*<sp/>pointer<sp/>to<sp/>the<sp/>underlying<sp/>C<sp/>port.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*<sp/>value<sp/>contains<sp/>the<sp/>copied<sp/>value<sp/>of<sp/>the<sp/>C<sp/>port.<sp/>The<sp/>type<sp/>is<sp/>always<sp/>PyObject*.</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/>is_present<sp/>contains<sp/>the<sp/>copied<sp/>value<sp/>of<sp/>the<sp/>is_present<sp/>field<sp/>of<sp/>the<sp/>C<sp/>port.</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*<sp/>width<sp/>indicates<sp/>the<sp/>width<sp/>of<sp/>a<sp/>multiport<sp/>or<sp/>-2<sp/>if<sp/>not<sp/>a<sp/>multiport.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMemberDef<sp/>port_capsule_members[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/>T_OBJECT,<sp/>offsetof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>,<sp/>port),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>T_OBJECT,<sp/>offsetof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>,<sp/>value),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>the<sp/>port&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;is_present&quot;</highlight><highlight class="normal">,<sp/>T_BOOL,<sp/>offsetof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>,<sp/>is_present),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>if<sp/>value<sp/>is<sp/>present<sp/>at<sp/>current<sp/>logical<sp/>time&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">,<sp/>T_INT,<sp/>offsetof(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>,<sp/>width),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL,<sp/>NULL,<sp/>0,<sp/>NULL}<sp/><sp/></highlight><highlight class="comment">/*<sp/>Sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>members<sp/>of<sp/>port_capsule</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>__getitem__<sp/>is<sp/>used<sp/>to<sp/>reference<sp/>a<sp/>multiport<sp/>with<sp/>an<sp/>index<sp/>(e.g.,<sp/>foo[2])</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/>set<sp/>is<sp/>used<sp/>to<sp/>set<sp/>a<sp/>port<sp/>value<sp/>and<sp/>its<sp/>is_present<sp/>field.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>port_capsule_methods[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)port_capsule_get_item,<sp/>METH_O|METH_COEXIST,<sp/></highlight><highlight class="stringliteral">&quot;x.__getitem__(y)<sp/>&lt;==&gt;<sp/>x[y]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)py_SET,<sp/>METH_VARARGS,<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>value<sp/>of<sp/>the<sp/>port<sp/>as<sp/>well<sp/>as<sp/>the<sp/>is_present<sp/>field&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL}<sp/><sp/></highlight><highlight class="comment">/*<sp/>Sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>The<sp/>definition<sp/>of<sp/>port_instance<sp/>type<sp/>object.</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>Used<sp/>to<sp/>describe<sp/>how<sp/>port_instance<sp/>behaves.</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>port_capsule_t<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>PyVarObject_HEAD_INIT(NULL,<sp/>0)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LinguaFranca.port_capsule&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_doc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;port_capsule<sp/>objects&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_basicsize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>),</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_itemsize<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_flags<sp/>=<sp/>Py_TPFLAGS_DEFAULT,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_as_mapping<sp/>=<sp/>&amp;port_as_mapping,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_iter<sp/>=<sp/>port_iter,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_iternext<sp/>=<sp/>port_iter_next,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_new<sp/>=<sp/>port_capsule_new,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_init<sp/>=<sp/>(initproc)<sp/>port_capsule_init,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_dealloc<sp/>=<sp/>(destructor)<sp/>port_capsule_dealloc,</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_members<sp/>=<sp/>port_capsule_members,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_methods<sp/>=<sp/>port_capsule_methods,</highlight></codeline>
<codeline lineno="623"><highlight class="normal">};</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/>The<sp/>members<sp/>of<sp/>a<sp/>port_instance,<sp/>used<sp/>to<sp/>define</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>a<sp/>native<sp/>Python<sp/>type.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMemberDef<sp/>port_instance_token_members[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>T_OBJECT_EX,<sp/>offsetof(<ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>,<sp/>value),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>the<sp/>port&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;is_present&quot;</highlight><highlight class="normal">,<sp/>T_BOOL,<sp/>offsetof(<ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>,<sp/>is_present),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>if<sp/>value<sp/>is<sp/>present<sp/>at<sp/>current<sp/>logical<sp/>time&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;num_destinations&quot;</highlight><highlight class="normal">,<sp/>T_INT,<sp/>offsetof(<ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>,<sp/>num_destinations),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>destinations&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL}<sp/><sp/></highlight><highlight class="comment">/*<sp/>Sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">};</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>The<sp/>definition<sp/>of<sp/>port_instance<sp/>type<sp/>object.</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>Used<sp/>to<sp/>describe<sp/>how<sp/>port_instance<sp/>behaves.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>port_instance_token_t<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>PyVarObject_HEAD_INIT(NULL,<sp/>0)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LinguaFranca.port_instance&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_doc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;port_instance<sp/>objects&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_basicsize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>),</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_itemsize<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_flags<sp/>=<sp/>Py_TPFLAGS_DEFAULT,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_new<sp/>=<sp/>PyType_GenericNew,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_members<sp/>=<sp/>port_instance_token_members,</highlight></codeline>
<codeline lineno="651"><highlight class="normal">};</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*<sp/>The<sp/>members<sp/>of<sp/>a<sp/>action_capsule<sp/>that<sp/>are<sp/>accessible<sp/>from<sp/>a<sp/>Python<sp/>program,<sp/>used<sp/>to<sp/>define</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*<sp/>a<sp/>native<sp/>Python<sp/>type.</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMemberDef<sp/>action_capsule_members[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;action&quot;</highlight><highlight class="normal">,<sp/>T_OBJECT,<sp/>offsetof(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>,<sp/>action),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>pointer<sp/>to<sp/>the<sp/>C<sp/>action<sp/>struct&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>T_OBJECT,<sp/>offsetof(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>,<sp/>value),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>the<sp/>action&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;is_present&quot;</highlight><highlight class="normal">,<sp/>T_BOOL,<sp/>offsetof(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>,<sp/>is_present),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>that<sp/>shows<sp/>if<sp/>action<sp/>is<sp/>present&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL}<sp/><sp/></highlight><highlight class="comment">/*<sp/>Sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">};</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>action_capsule_methods[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;schedule&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)py_schedule,<sp/>METH_VARARGS,<sp/></highlight><highlight class="stringliteral">&quot;Schedule<sp/>the<sp/>action<sp/>with<sp/>the<sp/>given<sp/>offset&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL}<sp/><sp/></highlight><highlight class="comment">/*<sp/>Sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>The<sp/>definition<sp/>of<sp/>action_capsule<sp/>type<sp/>object.</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/>Used<sp/>to<sp/>describe<sp/>how<sp/>an<sp/>action_capsule<sp/>behaves.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>action_capsule_t<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>PyVarObject_HEAD_INIT(NULL,<sp/>0)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LinguaFranca.action_instance&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_doc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;action_instance<sp/>object&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_basicsize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>),</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_itemsize<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_flags<sp/>=<sp/>Py_TPFLAGS_DEFAULT,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_new<sp/>=<sp/>action_capsule_new,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_init<sp/>=<sp/>(initproc)<sp/>action_capsule_init,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_dealloc<sp/>=<sp/>(destructor)<sp/>action_capsule_dealloc,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_members<sp/>=<sp/>action_capsule_members,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>.tp_methods<sp/>=<sp/>action_capsule_methods,</highlight></codeline>
<codeline lineno="691"><highlight class="normal">};</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"></codeline>
<codeline lineno="710"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>GEN_NAME(MODULE_NAME,_methods)[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">,<sp/>py_main,<sp/>METH_VARARGS,<sp/>NULL},</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;schedule_copy&quot;</highlight><highlight class="normal">,<sp/>py_schedule_copy,<sp/>METH_VARARGS,<sp/>NULL},</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;get_elapsed_logical_time&quot;</highlight><highlight class="normal">,<sp/>py_get_elapsed_logical_time,<sp/>METH_NOARGS,<sp/>NULL},</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;get_logical_time&quot;</highlight><highlight class="normal">,<sp/>py_get_logical_time,<sp/>METH_NOARGS,<sp/>NULL},</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;get_physical_time&quot;</highlight><highlight class="normal">,<sp/>py_get_physical_time,<sp/>METH_NOARGS,<sp/>NULL},</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;get_elapsed_physical_time&quot;</highlight><highlight class="normal">,<sp/>py_get_elapsed_physical_time,<sp/>METH_NOARGS,<sp/>NULL},</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;request_stop&quot;</highlight><highlight class="normal">,<sp/>py_request_stop,<sp/>METH_NOARGS,<sp/>NULL},</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>{NULL,<sp/>NULL,<sp/>0,<sp/>NULL}</highlight></codeline>
<codeline lineno="719"><highlight class="normal">};</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyModuleDef<sp/>MODULE_NAME<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>PyModuleDef_HEAD_INIT,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>TOSTRING(MODULE_NAME),</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LinguaFranca<sp/>Python<sp/>Module&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>-1,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>GEN_NAME(MODULE_NAME,_methods)</highlight></codeline>
<codeline lineno="732"><highlight class="normal">};</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>The<sp/>Python<sp/>runtime<sp/>will<sp/>call<sp/>this<sp/>function<sp/>to<sp/>initialize<sp/>the<sp/>module.</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>The<sp/>name<sp/>of<sp/>this<sp/>function<sp/>is<sp/>dynamically<sp/>generated<sp/>to<sp/>follow</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>the<sp/>requirement<sp/>of<sp/>PyInit_MODULE_NAME.<sp/>Since<sp/>the<sp/>MODULE_NAME<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>known<sp/>prior<sp/>to<sp/>compile<sp/>time,<sp/>the<sp/>GEN_NAME<sp/>macro<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>The<sp/>generated<sp/>function<sp/>will<sp/>have<sp/>the<sp/>name<sp/>PyInit_MODULE_NAME.</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>For<sp/>example<sp/>for<sp/>a<sp/>module<sp/>named<sp/>LinguaFrancaFoo,<sp/>this<sp/>function</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>will<sp/>be<sp/>called<sp/>PyInit_LinguaFrancaFoo</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal">PyMODINIT_FUNC</highlight></codeline>
<codeline lineno="746"><highlight class="normal">GEN_NAME(PyInit_,MODULE_NAME)(void)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*m;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>port_instance<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyType_Ready(&amp;port_capsule_t)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>port_instance_token<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyType_Ready(&amp;port_instance_token_t)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>action_capsule<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyType_Ready(&amp;action_capsule_t)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>PyModule_Create(&amp;MODULE_NAME);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>port_instance<sp/>type<sp/>to<sp/>the<sp/>module&apos;s<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(&amp;port_capsule_t);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyModule_AddObject(m,<sp/></highlight><highlight class="stringliteral">&quot;port_capsule&quot;</highlight><highlight class="normal">,<sp/>(PyObject<sp/>*)<sp/>&amp;port_capsule_t)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(&amp;port_capsule_t);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(m);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>port_instance_token<sp/>type<sp/>to<sp/>the<sp/>module&apos;s<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(&amp;port_instance_token_t);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyModule_AddObject(m,<sp/></highlight><highlight class="stringliteral">&quot;port_instance_token&quot;</highlight><highlight class="normal">,<sp/>(PyObject<sp/>*)<sp/>&amp;port_instance_token_t)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(&amp;port_instance_token_t);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(m);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>action_capsule<sp/>type<sp/>to<sp/>the<sp/>module&apos;s<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(&amp;action_capsule_t);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyModule_AddObject(m,<sp/></highlight><highlight class="stringliteral">&quot;action_capsule_t&quot;</highlight><highlight class="normal">,<sp/>(PyObject<sp/>*)<sp/>&amp;action_capsule_t)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(&amp;action_capsule_t);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(m);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"></codeline>
<codeline lineno="807"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pythontarget_8c_1ad52c5f970c1f6a4dde6f3457c92402ae" kindref="member">destroy_action_capsule</ref>(PyObject*<sp/>capsule)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>free(PyCapsule_GetPointer(capsule,<sp/></highlight><highlight class="stringliteral">&quot;action&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">PyObject*<sp/><ref refid="pythontarget_8c_1aeddc8cc41a9c71f3e325c2ef536c66cb" kindref="member">convert_C_port_to_py</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>port,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgeneric__port__instance__struct" kindref="compound">generic_port_instance_struct</ref>*<sp/>cport;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>-2)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>a<sp/>multiport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cport<sp/>=<sp/>(<ref refid="structgeneric__port__instance__struct" kindref="compound">generic_port_instance_struct</ref><sp/>*)port;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>action<sp/>struct<sp/>in<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>cap<sp/>=<sp/>PyObject_GC_New(<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>,<sp/>&amp;port_capsule_t);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cap<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print_and_exit(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>port.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>capsule<sp/>to<sp/>hold<sp/>the<sp/>void*<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>capsule<sp/>=<sp/>PyCapsule_New(port,<sp/></highlight><highlight class="stringliteral">&quot;port&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capsule<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print_and_exit(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>port.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>in<sp/>the<sp/>Python<sp/>port<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)cap)-&gt;port<sp/>=<sp/>capsule;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)cap)-&gt;width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>-2)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)cap)-&gt;is_present<sp/>=<sp/>cport-&gt;is_present;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cport-&gt;value<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>is<sp/>absent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)cap)-&gt;value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cap;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Py_INCREF(cport-&gt;value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)cap)-&gt;value<sp/>=<sp/>cport-&gt;value;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>is<sp/>absent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)cap)-&gt;value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>*)cap)-&gt;is_present<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cap;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal">PyObject*<sp/><ref refid="pythontarget_8c_1a9c4b82196fed6530c278b79a1a21b430" kindref="member">convert_C_action_to_py</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>trigger_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger_t*<sp/>trigger<sp/>=<sp/><ref refid="pythontarget_8c_1a02aaee842c2c225482fb73cc838dc43f" kindref="member">_lf_action_to_trigger</ref>(action);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>action<sp/>struct<sp/>in<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>cap<sp/>=<sp/>PyObject_GC_New(<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>,<sp/>&amp;action_capsule_t);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cap<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print_and_exit(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>action.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>capsule<sp/>to<sp/>hold<sp/>the<sp/>void*<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>capsule<sp/>=<sp/>PyCapsule_New(action,<sp/></highlight><highlight class="stringliteral">&quot;action&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capsule<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print_and_exit(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>action.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>in<sp/>the<sp/>Python<sp/>action<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>*)cap)-&gt;action<sp/>=<sp/>capsule;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>*)cap)-&gt;is_present<sp/>=<sp/>trigger-&gt;status;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>token<sp/>is<sp/>not<sp/>initialized,<sp/>that<sp/>is<sp/>all<sp/>we<sp/>need<sp/>to<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger-&gt;token<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>*)cap)-&gt;value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cap;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>value<sp/>is<sp/>None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger-&gt;token-&gt;value<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger-&gt;token-&gt;value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Actions<sp/>in<sp/>Python<sp/>always<sp/>use<sp/>token<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>*)cap)-&gt;value<sp/>=<sp/>trigger-&gt;token-&gt;value;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cap;</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">PyObject*</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><ref refid="pythontarget_8c_1a9059deaaaa3994f2603157a5ab5e3d18" kindref="member">get_python_function</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>module,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instance_id,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>if<sp/>the<sp/>interpreter<sp/>is<sp/>already<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_initialized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Py_IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_initialized<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Starting<sp/>the<sp/>function<sp/>start().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Necessary<sp/>PyObject<sp/>variables<sp/>to<sp/>load<sp/>the<sp/>react()<sp/>function<sp/>from<sp/>test.py</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*pFileName,<sp/>*pModule,<sp/>*pDict,<sp/>*pClasses,<sp/>*pClass,<sp/>*pFunc;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*rValue;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>Python<sp/>interpreter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_Initialize();</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Initialized<sp/>the<sp/>Python<sp/>interpreter.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>Python<sp/>module<sp/>is<sp/>already<sp/>loaded,<sp/>skip<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(globalPythonModule<sp/>==<sp/>NULL)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>the<sp/>MODULE<sp/>name<sp/>into<sp/>a<sp/>filesystem<sp/>compatible<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pFileName<sp/>=<sp/>PyUnicode_DecodeFSDefault(module);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>Python<sp/>search<sp/>path<sp/>to<sp/>be<sp/>the<sp/>current<sp/>working<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cwd[PATH_MAX];</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>getcwd(cwd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cwd))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print_and_exit(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>the<sp/>current<sp/>working<sp/>directory.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wcwd[PATH_MAX];</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbstowcs(wcwd,<sp/>cwd,<sp/>PATH_MAX);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_SetPath(wcwd);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Loading<sp/>module<sp/>%s<sp/>in<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>module,<sp/>cwd);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pModule<sp/>=<sp/>PyImport_Import(pFileName);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Loaded<sp/>module<sp/>%p.&quot;</highlight><highlight class="normal">,<sp/>pModule);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>memory<sp/>occupied<sp/>by<sp/>pFileName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(pFileName);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>module<sp/>was<sp/>correctly<sp/>loaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pModule<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>contents<sp/>of<sp/>module.<sp/>pDict<sp/>is<sp/>a<sp/>borrowed<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDict<sp/>=<sp/>PyModule_GetDict(pModule);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pDict<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Print();</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>contents<sp/>of<sp/>module<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>module);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(pModule);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalPythonModule<sp/>=<sp/>pModule;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(pDict);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalPythonModuleDict<sp/>=<sp/>pDict;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(globalPythonModule<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>globalPythonModuleDict<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(globalPythonModule);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>class<sp/>name<sp/>to<sp/>a<sp/>PyObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>list_name<sp/>=<sp/>PyUnicode_DecodeFSDefault(</highlight><highlight class="keyword">class</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>class<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(globalPythonModuleDict);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pClasses<sp/>=<sp/>PyDict_GetItem(globalPythonModuleDict,<sp/>list_name);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pClasses<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Print();</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>class<sp/>list<sp/>\&quot;%s\&quot;<sp/>in<sp/>module<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>module);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(globalPythonModuleDict);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pClass<sp/>=<sp/>PyList_GetItem(pClasses,<sp/>instance_id);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pClass<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Print();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>class<sp/>\&quot;%s[%d]\&quot;<sp/>in<sp/>module<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>instance_id,<sp/>module);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Loading<sp/>function<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>func);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>function<sp/>react<sp/>from<sp/>test.py</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pFunc<sp/>=<sp/>PyObject_GetAttrString(pClass,<sp/>func);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Loaded<sp/>function<sp/>%p.&quot;</highlight><highlight class="normal">,<sp/>pFunc);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>funciton<sp/>is<sp/>loaded<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>if<sp/>it<sp/>is<sp/>callable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pFunc<sp/>&amp;&amp;<sp/>PyCallable_Check(pFunc))<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Calling<sp/>function<sp/>%s<sp/>from<sp/>class<sp/>%s[%d].&quot;</highlight><highlight class="normal">,<sp/>func<sp/>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>instance_id);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(pFunc);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pFunc;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>is<sp/>not<sp/>found<sp/>or<sp/>it<sp/>is<sp/>not<sp/>callable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_Occurred())</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Print();</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Function<sp/>%s<sp/>was<sp/>not<sp/>found<sp/>or<sp/>is<sp/>not<sp/>callable.&quot;</highlight><highlight class="normal">,<sp/>func);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(pFunc);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(globalPythonModule);<sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Print();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>\&quot;%s\&quot;.&quot;</highlight><highlight class="normal">,<sp/>module);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_PRINT(</highlight><highlight class="stringliteral">&quot;Done<sp/>with<sp/>start().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_initialized<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>are<sp/>the<sp/>first<sp/>to<sp/>initilize<sp/>the<sp/>Pyton<sp/>interpreter.<sp/>Destroy<sp/>it<sp/>when<sp/>done.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_FinalizeEx();</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c"/>
  </compounddef>
</doxygen>
