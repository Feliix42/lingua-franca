<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pythontarget_8h" kind="file" language="C++">
    <compoundname>pythontarget.h</compoundname>
    <includes local="no">Python.h</includes>
    <includes local="no">structmember.h</includes>
    <includes local="yes">ctarget.h</includes>
    <includes local="no">limits.h</includes>
    <includedby refid="pythontarget_8c" local="yes">/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>structmember.h</label>
      </node>
      <node id="5">
        <label>limits.h</label>
      </node>
      <node id="2">
        <label>Python.h</label>
      </node>
      <node id="4">
        <label>ctarget.h</label>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h</label>
        <link refid="pythontarget_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c</label>
        <link refid="pythontarget_8c"/>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h</label>
        <link refid="pythontarget_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structgeneric__port__instance__struct" prot="public">generic_port_instance_struct</innerclass>
    <innerclass refid="structgeneric__port__capsule__struct" prot="public">generic_port_capsule_struct</innerclass>
    <innerclass refid="structgeneric__port__instance__with__token__struct" prot="public">generic_port_instance_with_token_struct</innerclass>
    <innerclass refid="structgeneric__action__capsule__struct" prot="public">generic_action_capsule_struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="pythontarget_8h_1ac9efdaac9411d0868b715edccca3269d" prot="public" static="no">
        <name>PY_SSIZE_T_CLEAN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="45" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pythontarget_8h_1a2f18db18bca26cafa95e9719de4a41ef" prot="public" static="no">
        <name>CONCAT</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>x##y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="66" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pythontarget_8h_1a3cd389b61ffd75be923fd4ba3b981b91" prot="public" static="no">
        <name>GEN_NAME</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>CONCAT(x,y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="67" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pythontarget_8h_1a43e1cad902b6477bec893cb6430bd6c8" prot="public" static="no">
        <name>STRINGIFY</name>
        <param><defname>X</defname></param>
        <initializer>#X</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="68" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pythontarget_8h_1a9063e80f8777300c93afde6e6f4c9cea" prot="public" static="no">
        <name>TOSTRING</name>
        <param><defname>x</defname></param>
        <initializer>STRINGIFY(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="69" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pythontarget_8h_1aad4157279f7160ddf49504923ab04ec8" prot="public" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* globalPythonModule</definition>
        <argsstring></argsstring>
        <name>globalPythonModule</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="75" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythontarget_8h_1a497da135b6a264b24a24e36d14e78daa" prot="public" static="no" mutable="no">
        <type>PyObject *</type>
        <definition>PyObject* globalPythonModuleDict</definition>
        <argsstring></argsstring>
        <name>globalPythonModuleDict</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="79" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pythontarget_8h_1a3accc0eb60f572b9817b5400db69b6f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_SET</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_SET</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value and is_present field of self which is of type LinguaFranca.port_capsule</para>
<para>Each LinguaFranca.port_capsule includes a void* pointer of the C port (a.k.a. generic_port_instance_struct*). <simplesect kind="see"><para><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref> in <ref refid="pythontarget_8h" kindref="compound">pythontarget.h</ref></para>
</simplesect>
This function calls the underlying _LF_SET API. <simplesect kind="see"><para>xtext/org.icyphy.linguafranca/src/lib/core/reactor.h</para>
</simplesect>
This function can be used to set any type of PyObject ranging from primitive types to complex lists and tuples. Moreover, this function is callable from Python target code by using port_name.out(value)</para>
<para>Some examples include port_name.out(&quot;Hello&quot;) port_name.out(5) port_name.out([&quot;Hello&quot;, 5 , (2.8, &quot;X&quot;)])</para>
<para>The port type given in the Lingua Franca is only used as a &quot;suggestion&quot; as per Python&apos;s duck typing principles. The end-user is responsible for appropriately handling types on the receiving end of this port. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The output port (by name) or input of a contained reactor in form input_name.port_name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>contains: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert into the port struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="204" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="204" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1ae5d0540d3de8732e4a9afeaa637c22d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_schedule</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_schedule</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedule an action to occur with the specified value and time offset with no payload (no value conveyed). See schedule_token(), which this uses, for details. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the calling object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>contains: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an action on the self struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The time offset over and above that in the action. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="217" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="217" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1a97f159b05fbdf6d35ad47da03972106e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_schedule_copy</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_schedule_copy</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedule an action to occur with the specified value and time offset with a copy of the specified value. See reactor.h for documentation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="224" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="224" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1a66c367ccdaf532103260df2e33d9cd51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_get_elapsed_logical_time</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_get_elapsed_logical_time</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the elapsed physical time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="232" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="232" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1ac800ff39ffe683e66446fd6bd8100885" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_get_logical_time</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_get_logical_time</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the elapsed physical time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="237" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="237" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1acf8dafa9260bb29f637ad53ec0556583" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_get_physical_time</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_get_physical_time</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the elapsed physical time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="242" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="242" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1a0de9cef51748833c318227ed2e5bbe2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>instant_t</type>
        <definition>instant_t get_elapsed_physical_time</definition>
        <argsstring>()</argsstring>
        <name>get_elapsed_physical_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the elapsed physical time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="247" column="11" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="247" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1ad1b4c87976ddf6b16dde85fa0d1dcdc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_get_elapsed_physical_time</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_get_elapsed_physical_time</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="248" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="248" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1a410a90516bd581abb22736e8dac74c4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_stop</definition>
        <argsstring>(PyObject *self)</argsstring>
        <name>py_stop</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop execution at the conclusion of the current logical time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="253" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="253" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1adb5619e841895c3a63a486fe0fc92160" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject* py_main</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>py_main</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="257" column="17" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="257" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1aeddc8cc41a9c71f3e325c2ef536c66cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* convert_C_port_to_py</definition>
        <argsstring>(void *port, int width)</argsstring>
        <name>convert_C_port_to_py</name>
        <param>
          <type>void *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that is called any time a Python reaction is called with ports as inputs and outputs. This function converts ports that are either a multiport or a non-multiport into a port_capsule.</para>
<para>First, the void* pointer is stored in a PyCapsule. If the port is not a multiport, the value and is_present fields are copied verbatim. These feilds then can be accessed from the Python code as port.value and port.is_present. If the value is absent, it will be set to None.</para>
<para>For multiports, the value of the port_capsule (i.e., port.value) is always set to None and is_present is set to false. Individual ports can then later be accessed in Python code as port[idx]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="277" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="826" bodyend="870" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="277" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1a9c4b82196fed6530c278b79a1a21b430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* convert_C_action_to_py</definition>
        <argsstring>(void *action)</argsstring>
        <name>convert_C_action_to_py</name>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A helper function to convert C actions to Python action capsules <simplesect kind="see"><para>xtext/org.icyphy.linguafranca/src/org/icyphy/generator/CGenerator.xtend for details about C actions Python actions have the following fields (for more information </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>): PyObject_HEAD PyObject* action; <linebreak/>
 PyObject* value; bool is_present;</para>
</simplesect>
The input to this function is a pointer to a C action, which might or might not contain a value and an is_present field. To simplify the assumptions made by this function, the &quot;value&quot; and &quot;is_present&quot; are passed to the function instead of expecting them to exist.</para>
<para>The void* pointer to the C action instance is encapsulated in a PyCapsule instead of passing an exposed pointer through Python. <simplesect kind="see"><para><ulink url="https://docs.python.org/3/c-api/capsule.html">https://docs.python.org/3/c-api/capsule.html</ulink> This encapsulation is done by calling PyCapsule_New(action, &quot;name_of_the_container_in_the_capsule&quot;, NULL), where &quot;name_of_the_container_in_the_capsule&quot; is an agreed-upon container name inside the capsule. This capsule can then be treated as a PyObject* and safely passed through Python code. On the other end (which is in schedule functions), PyCapsule_GetPointer(recieved_action,&quot;action&quot;) can be called to retrieve the void* pointer into recieved_action.</para>
</simplesect>
A helper function to convert C actions to Python action capsules <simplesect kind="see"><para>xtext/org.icyphy.linguafranca/src/org/icyphy/generator/CGenerator.xtend for details about C actions Python actions have the following fields (for more informatino </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>): PyObject_HEAD PyObject* action; <linebreak/>
 PyObject* value; bool is_present;</para>
</simplesect>
The input to this function is a pointer to a C action, which might or might not contain a value and an is_present field. To simplify the assumptions made by this function, the &quot;value&quot; and &quot;is_present&quot; are passed to the function instead of expecting them to exist.</para>
<para>The void* pointer to the C action instance is encapsulated in a PyCapsule instead of passing an exposed pointer through Python. <simplesect kind="see"><para><ulink url="https://docs.python.org/3/c-api/capsule.html">https://docs.python.org/3/c-api/capsule.html</ulink> This encapsulation is done by calling PyCapsule_New(action, &quot;name_of_the_container_in_the_capsule&quot;, NULL), where &quot;name_of_the_container_in_the_capsule&quot; is an agreed-upon container name inside the capsule. This capsule can then be treated as a PyObject* and safely passed through Python code. On the other end (which is in schedule functions), PyCapsule_GetPointer(received_action,&quot;action&quot;) can be called to retrieve the void* pointer into received_action. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="301" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="894" bodyend="931" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="301" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1a9059deaaaa3994f2603157a5ab5e3d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* get_python_function</definition>
        <argsstring>(string module, string class, int instance_id, string func)</argsstring>
        <name>get_python_function</name>
        <param>
          <type>string</type>
          <declname>module</declname>
        </param>
        <param>
          <type>string</type>
          <declname>class</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instance_id</declname>
        </param>
        <param>
          <type>string</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a Python func in class[instance_id] from module. Class instances in generated Python code are always instantiated in a list of template classs[_class(params), _class(params), ...] (note the extra s) regardless of whether a bank is used or not. If there is no bank, or a bank of width 1, the list will be instantiated as classs[_class(params)].</para>
<para>This function would thus call classs[0] to access the first instance in a bank and so on.</para>
<para>Possible optimizations include: - Not loading the module each time (by storing it in global memory),<itemizedlist>
<listitem><para>Keeping a persistent argument table <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python module to load the function from. In embedded mode, it should be set to &quot;__main__&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>class</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the list of classes in the generated Python code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The element number in the list of classes. class[instance_id] points to a class instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The reaction functino to be called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pArgs</parametername>
</parameternamelist>
<parameterdescription>
<para>the PyList of arguments to be sent to function func() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="322" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="952" bodyend="1080" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="322" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="pythontarget_8h_1a543f7a99c5c0d688350df1dd90ea81bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyMODINIT_FUNC</type>
        <definition>PyMODINIT_FUNC GEN_NAME</definition>
        <argsstring>(PyInit_, MODULE_NAME)(void)</argsstring>
        <name>GEN_NAME</name>
        <param>
          <type>PyInit_</type>
        </param>
        <param>
          <type>MODULE_NAME</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" line="336" column="1" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.c" bodystart="746" bodyend="795" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h" declline="336" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Edward A. Lee (<ulink url="mailto:eal@berkeley.edu">eal@berkeley.edu</ulink>) </para>
</simplesect>
<simplesect kind="author"><para>Soroush Bateni (<ulink url="mailto:soroush@utdallas.edu">soroush@utdallas.edu</ulink>)</para>
</simplesect>
</para>
<sect1 id="pythontarget_8h_1LICENSE">
<title>LICENSE</title>
<para>Copyright (c) 2020, The University of California at Berkeley.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem></orderedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
</sect1>
<sect1 id="pythontarget_8h_1DESCRIPTION">
<title>DESCRIPTION</title>
<para>Target-specific runtime functions for the Python target language. This API layer can be used in conjunction with: target Python;</para>
<para>Note for target language developers. This is one way of developing a target language where the C core runtime is adopted. This file is a translation layer that implements Lingua Franca APIs which interact with the internal _lf_SET and _lf_schedule APIs. This file can act as a template for future runtime developement for target languages. For source generation, see xtext/org.icyphy.linguafranca/src/org/icyphy/generator/PythonGenerator.xtend. </para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="41"><highlight class="preprocessor">#ifndef<sp/>PYTHON_TARGET_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYTHON_TARGET_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_SSIZE_T_CLEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Python.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;structmember.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ctarget.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;../include/limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PATH_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PATH_MAX<sp/>MAX_PATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MODULE_NAME<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>main<sp/>file<sp/>of<sp/>the<sp/>generated<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MODULE_NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;MODULE_NAME<sp/>is<sp/>undefined&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONCAT(x,y)<sp/>x##y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GEN_NAME(x,y)<sp/>CONCAT(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRINGIFY(X)<sp/>#X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOSTRING(x)<sp/>STRINGIFY(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">//<sp/>The<sp/>global<sp/>Python<sp/>object<sp/>that<sp/>holds<sp/>the<sp/>.py<sp/>module<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>runtime<sp/>interacts<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">PyObject<sp/>*globalPythonModule<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>dictionary<sp/>of<sp/>the<sp/>Python<sp/>module<sp/>that<sp/>is<sp/>used<sp/>to<sp/>load</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>objects<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">PyObject<sp/>*globalPythonModuleDict<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structgeneric__port__instance__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>value;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_present;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_destinations;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}<sp/><ref refid="structgeneric__port__instance__struct" kindref="compound">generic_port_instance_struct</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="structgeneric__port__capsule__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>port;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>value;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_present;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_index;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}<sp/><ref refid="structgeneric__port__capsule__struct" kindref="compound">generic_port_capsule_struct</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structgeneric__port__instance__with__token__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>value;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_present;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_destinations;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_token_t*<sp/>token;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/><ref refid="structgeneric__port__instance__with__token__struct" kindref="compound">generic_port_instance_with_token_struct</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="structgeneric__action__capsule__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>action;<sp/></highlight><highlight class="comment">//<sp/>Hold<sp/>the<sp/>void*<sp/>pointer<sp/>to<sp/>a<sp/>C<sp/>action<sp/>instance.<sp/>However,<sp/>passing<sp/>void*<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>Python<sp/>is<sp/>considered<sp/>unsafe<sp/>practice.<sp/>Instead,<sp/>this<sp/>void*<sp/>pointer<sp/>to<sp/>the<sp/>C<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>stored<sp/>in<sp/>a<sp/>PyCapsule.<sp/>@see<sp/>https://docs.python.org/3/c-api/capsule.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>value;<sp/></highlight><highlight class="comment">//<sp/>This<sp/>value<sp/>will<sp/>be<sp/>copied<sp/>from<sp/>the<sp/>C<sp/>action-&gt;value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_present;<sp/></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>value,<sp/>is_present<sp/>will<sp/>be<sp/>copied<sp/>from<sp/>the<sp/>C<sp/>action-&gt;is_present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/><ref refid="structgeneric__action__capsule__struct" kindref="compound">generic_action_capsule_struct</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"></codeline>
<codeline lineno="204"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_SET(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"></codeline>
<codeline lineno="217"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_schedule(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_schedule_copy(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"></codeline>
<codeline lineno="232"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_get_elapsed_logical_time(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_get_logical_time(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_get_physical_time(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">instant_t<sp/><ref refid="pythontarget_8h_1a0de9cef51748833c318227ed2e5bbe2a" kindref="member">get_elapsed_physical_time</ref>();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_get_elapsed_physical_time(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_stop(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>py_main(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*args);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"></codeline>
<codeline lineno="277"><highlight class="normal">PyObject*<sp/><ref refid="pythontarget_8h_1aeddc8cc41a9c71f3e325c2ef536c66cb" kindref="member">convert_C_port_to_py</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>port,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">PyObject*<sp/><ref refid="pythontarget_8h_1a9c4b82196fed6530c278b79a1a21b430" kindref="member">convert_C_action_to_py</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">PyObject*</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><ref refid="pythontarget_8h_1a9059deaaaa3994f2603157a5ab5e3d18" kindref="member">get_python_function</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>module,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instance_id,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>func);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>The<sp/>Python<sp/>runtime<sp/>will<sp/>call<sp/>this<sp/>function<sp/>to<sp/>initialize<sp/>the<sp/>module.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>The<sp/>name<sp/>of<sp/>this<sp/>function<sp/>is<sp/>dynamically<sp/>generated<sp/>to<sp/>follow</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>the<sp/>requirement<sp/>of<sp/>PyInit_MODULE_NAME.<sp/>Since<sp/>the<sp/>MODULE_NAME<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>known<sp/>prior<sp/>to<sp/>compile<sp/>time,<sp/>the<sp/>GEN_NAME<sp/>macro<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>The<sp/>generated<sp/>function<sp/>will<sp/>have<sp/>the<sp/>name<sp/>PyInit_MODULE_NAME.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>For<sp/>example<sp/>for<sp/>a<sp/>module<sp/>named<sp/>LinguaFrancaFoo,<sp/>this<sp/>function</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>will<sp/>be<sp/>called<sp/>PyInit_LinguaFrancaFoo</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">PyMODINIT_FUNC</highlight></codeline>
<codeline lineno="336"><highlight class="normal">GEN_NAME(PyInit_,MODULE_NAME)(void);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PYTHON_TARGET_H</highlight></codeline>
    </programlisting>
    <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/Python/pythontarget.h"/>
  </compounddef>
</doxygen>
