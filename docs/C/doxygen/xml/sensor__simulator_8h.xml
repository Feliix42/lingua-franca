<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="sensor__simulator_8h" kind="file" language="C++">
    <compoundname>sensor_simulator.h</compoundname>
    <includedby refid="sensor__simulator_8c" local="yes">/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c</includedby>
    <invincdepgraph>
      <node id="2">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c</label>
        <link refid="sensor__simulator_8c"/>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.h</label>
        <link refid="sensor__simulator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sensor__simulator_8h_1adfb8c4dc96d976367deb805452b8a3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int start_sensor_simulator</definition>
        <argsstring>(char *message_lines[], int number_of_lines, int tick_window_width, char *log_file, int log_level)</argsstring>
        <name>start_sensor_simulator</name>
        <param>
          <type>char *</type>
          <declname>message_lines</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_lines</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tick_window_width</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>log_file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>log_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start the sensor simulator if it has not been already started. This must be called at least once before any call to register_sensor_key. If given, this will put a message in the center of the terminal window. The message will be left justified, with each string in the specified array on a new line. If a tick_window_width is given, then a second window will be created that is intended to show activity, typically using a single character per event. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The message lines or NULL for none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of message lines or 0 for none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tick_window_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the tick window or 0 for none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_file</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, the name of a file to which to write logging messages. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of log messages to redirect to the file. The level should be one of LOG_LEVEL_ERROR, LOG_LEVEL_WARNING, LOG_LEVEL_INFO, LOG_LEVEL_LOG, or LOG_LEVEL_DEBUG.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Start the sensor simulator if it has not been already started. This must be called at least once before any call to register_sensor_key. The specified message is an initial message to display at the upper left, typically a set of instructions, that remains displayed throughout the lifetime of the window. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The message lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tick_window_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the tick window or 0 for none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_file</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, the name of a file to which to write logging messages. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of log messages to redirect to the file. The level should be one of LOG_LEVEL_ERROR, LOG_LEVEL_WARNING, LOG_LEVEL_INFO, LOG_LEVEL_LOG, LOG_LEVEL_DEBUG, or LOG_LEVEL_ALL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, error code for failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.h" line="79" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="402" bodyend="448" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.h" declline="79" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8h_1ad9a70cc616c82bab0563369a662e5cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void show_tick</definition>
        <argsstring>(char *character)</argsstring>
        <name>show_tick</name>
        <param>
          <type>char *</type>
          <declname>character</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Place a tick (usually a single character) in the tick window. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>character</parametername>
</parameternamelist>
<parameterdescription>
<para>The tick character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.h" line="91" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="454" bodyend="458" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.h" declline="91" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8h_1a196614841046dea5b94b2a60108fff40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int register_sensor_key</definition>
        <argsstring>(char key, void *action)</argsstring>
        <name>register_sensor_key</name>
        <param>
          <type>char</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a keyboard key to trigger the specified action. Printable ASCII characters (codes 32 to 127) are supported plus &apos;<linebreak/>
&apos; and &apos;\0&apos;, where the latter registers a trigger to invoked when any key is pressed. If a specific key is registered and any key (&apos;\0&apos;) is also registered, the any key trigger will be scheduled after the specific key is scheduled. If these triggers belong to different reactors, they could be invoked in parallel. This will fail if the specified key has already been registered (error code 1), or the key is not a supported key or a newline ‘<linebreak/>
’ or any key &apos;\0&apos; (error code 2) or if the trigger is NULL (error code 3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to trigger when the key is pressed (a pointer to a <ref refid="structtrigger__t" kindref="compound">trigger_t</ref> struct). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, error code for failure.</para>
</simplesect>
Register a keyboard key to trigger the specified action. Printable ASCII characters (codes 32 to 127) are supported plus &apos;<linebreak/>
&apos; and &apos;\0&apos;, where the latter registers a trigger to invoked when any key is pressed. If a specific key is registered and any key (&apos;\0&apos;) is also registered, the any key trigger will be scheduled after the specific key is scheduled. If these triggers belong to different reactors, they could be invoked in parallel. This will fail if the specified key has already been registered (error code 1), or the key is not a supported key (error code 2) or if the trigger is NULL (error code 3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to trigger when the key is pressed (a pointer to a <ref refid="structtrigger__t" kindref="compound">trigger_t</ref> struct). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, error code for failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.h" line="111" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="478" bodyend="508" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.h" declline="111" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Edward A. Lee (<ulink url="mailto:eal@berkeley.edu">eal@berkeley.edu</ulink>)</para>
</simplesect>
</para>
<sect1 id="util_8h_1LICENSE">
<title>LICENSE</title>
<para>Copyright (c) 2020, The University of California at Berkeley.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem></orderedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
</sect1>
<sect1 id="util_8h_1DESCRIPTION">
<title>DESCRIPTION</title>
<para>When prototyping Lingua Franca programs on a laptop, it is convenient to use the laptop keyboard to simulate asynchronous sensor input. This small library provides a convenient way to do that.</para>
<para>To use this, include the following flags in your target properties: <preformatted>
target C {
    flags: &quot;-lncurses&quot;,
    files: [&quot;/lib/C/util/sensor_simulator.c&quot;, &quot;/lib/C/util/sensor_simulator.h&quot;]
};
</preformatted> This requires <computeroutput>ncurses</computeroutput>, a library providing somewhat portable keyboard access.</para>
<para>In addition, you need this in your Lingua Franca file: <preformatted>
preamble {=
    #include &quot;sensor_simulator.c&quot;
=}
</preformatted> To start the sensor simulator, call <computeroutput>start_sensor_simulator</computeroutput> passing it an array of strings to print and the width of the window to use to display characters using the <computeroutput>show_tick</computeroutput> function.</para>
<para>To print messages to the screen, rather than using printf(), you should use the messaging functions in <ref refid="util_8h" kindref="compound">util.h</ref>, such as <ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print()</ref>. Otherwise, your messages will be printed over other information. </para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="58"><highlight class="preprocessor">#ifndef<sp/>SENSOR_SIMULATOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SENSOR_SIMULATOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8h_1adfb8c4dc96d976367deb805452b8a3b2" kindref="member">start_sensor_simulator</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message_lines[],</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_lines,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a89502730b2655e279c83afb299e8ded5" kindref="member">tick_window_width</ref>,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="sensor__simulator_8c_1ab936051f5aaca44c6c3c41dee0d19c36" kindref="member">log_file</ref>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log_level</highlight></codeline>
<codeline lineno="85"><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8h_1ad9a70cc616c82bab0563369a662e5cc0" kindref="member">show_tick</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>character);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8h_1a196614841046dea5b94b2a60108fff40" kindref="member">register_sensor_key</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>SENSOR_SIMULATOR_H</highlight></codeline>
    </programlisting>
    <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.h"/>
  </compounddef>
</doxygen>
