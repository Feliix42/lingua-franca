<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="federate_8c" kind="file" language="C++">
    <compoundname>federate.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">netdb.h</includes>
    <includes local="no">strings.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">signal.h</includes>
    <includes refid="net__util_8c" local="yes">net_util.c</includes>
    <includes refid="rti_8h" local="yes">rti.h</includes>
    <includes refid="reactor_8h" local="yes">reactor.h</includes>
    <includes refid="platform_8h" local="yes">platform.h</includes>
    <includes refid="clock-sync_8c" local="yes">clock-sync.c</includes>
    <includes refid="federate_8h" local="yes">federate.h</includes>
    <incdepgraph>
      <node id="25">
        <label>stdbool.h</label>
      </node>
      <node id="27">
        <label>pqueue.h</label>
        <link refid="pqueue_8h"/>
      </node>
      <node id="14">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>netinet/in.h</label>
      </node>
      <node id="7">
        <label>arpa/inet.h</label>
      </node>
      <node id="11">
        <label>assert.h</label>
      </node>
      <node id="28">
        <label>trace.h</label>
        <link refid="trace_8h"/>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>errno.h</label>
      </node>
      <node id="17">
        <label>platform.h</label>
        <link refid="platform_8h_source"/>
      </node>
      <node id="18">
        <label>tag.h</label>
        <link refid="tag_8h"/>
      </node>
      <node id="9">
        <label>netdb.h</label>
      </node>
      <node id="26">
        <label>limits.h</label>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c</label>
        <link refid="federate_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>federate.h</label>
        <link refid="federate_8h"/>
      </node>
      <node id="13">
        <label>net_util.c</label>
        <link refid="net__util_8c"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>net_util.h</label>
        <link refid="net__util_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>pthread.h</label>
      </node>
      <node id="19">
        <label>string.h</label>
      </node>
      <node id="22">
        <label>rti.h</label>
        <link refid="rti_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>unistd.h</label>
      </node>
      <node id="12">
        <label>signal.h</label>
      </node>
      <node id="29">
        <label>clock-sync.c</label>
        <link refid="clock-sync_8c"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>clock-sync.h</label>
        <link refid="clock-sync_8h"/>
      </node>
      <node id="24">
        <label>reactor.h</label>
        <link refid="reactor_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>time.h</label>
      </node>
      <node id="21">
        <label>math.h</label>
      </node>
      <node id="10">
        <label>strings.h</label>
      </node>
      <node id="5">
        <label>sys/socket.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="federate_8c_1a881ede210402a3c26d9e30e2031f824e" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* ERROR_SENDING_HEADER</definition>
        <argsstring></argsstring>
        <name>ERROR_SENDING_HEADER</name>
        <initializer>= &quot;ERROR sending header information to federate via RTI&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="52" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="federate_8c_1a0eb9d322e65732ec508efed2bebfec31" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* ERROR_SENDING_MESSAGE</definition>
        <argsstring></argsstring>
        <name>ERROR_SENDING_MESSAGE</name>
        <initializer>= &quot;ERROR sending message to federate via RTI&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="53" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="federate_8c_1a1de2c61d36e14fae8de7043ff2661a34" prot="public" static="no" mutable="no">
        <type>lf_mutex_t</type>
        <definition>lf_mutex_t outbound_socket_mutex</definition>
        <argsstring></argsstring>
        <name>outbound_socket_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="56" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="federate_8c_1ac31c3ee54cd862c9381fbf980fa7d9ef" prot="public" static="no" mutable="no">
        <type>lf_cond_t</type>
        <definition>lf_cond_t port_status_changed</definition>
        <argsstring></argsstring>
        <name>port_status_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="57" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" prot="public" static="no" mutable="no">
        <type><ref refid="structfederate__instance__t" kindref="compound">federate_instance_t</ref></type>
        <definition>federate_instance_t _fed</definition>
        <argsstring></argsstring>
        <name>_fed</name>
        <initializer>= {
        .socket_TCP_RTI = -1,
        .number_of_inbound_p2p_connections = 0,
		.inbound_socket_listeners = NULL,
        .number_of_outbound_p2p_connections = 0,
        .sockets_for_inbound_p2p_connections = { -1 },
        .sockets_for_outbound_p2p_connections = { -1 },
        .inbound_p2p_handling_thread_id = 0,
        .server_socket = -1,
        .server_port = -1,
        .last_TAG = {.time = NEVER, .microstep = 0u},
        .is_last_TAG_provisional = false,
        .waiting_for_TAG = false,
        .has_upstream = false,
        .has_downstream = false,
        .sent_a_stop_request_to_rti = false,
        .last_sent_LTC = (<ref refid="structtag__t" kindref="compound">tag_t</ref>) {.time = NEVER, .microstep = 0u},
        .last_sent_NET = (<ref refid="structtag__t" kindref="compound">tag_t</ref>) {.time = NEVER, .microstep = 0u},
        .min_delay_from_physical_action_to_federate_output = NEVER,
        .triggers_for_network_input_control_reactions = NULL,
        .triggers_for_network_input_control_reactions_size = 0,
        .trigger_for_network_output_control_reactions = NULL
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The state of this federate instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="62" column="21" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="federate_8c_1a0ed912257c1b82c7727c549aec8f3a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * listen_to_federates</definition>
        <argsstring>(void *args)</argsstring>
        <name>listen_to_federates</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <defname>fed_id_ptr</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread that listens for inputs from other federates. This thread listens for messages of type P2P_TIMED_MESSAGE from the specified peer federate and calls schedule to schedule an event. If an error occurs or an EOF is received from the peer, then this procedure returns, terminating the thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fed_id_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a ushort containing federate ID being listened to. This procedure frees the memory pointed to before returning.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Thread that listens for inputs from other federates. This thread listens for messages of type P2P_MESSAGE, P2P_TIMED_MESSAGE, or PORT_ABSENT (<simplesect kind="see"><para><ref refid="rti_8h" kindref="compound">rti.h</ref>) from the specified peer federate and calls the appropriate handling function for each message type. If an <ref refid="util_8h_1aad9796c174f7ef5d226cd169f2520fd5" kindref="member">error</ref> occurs or an EOF is received from the peer, then this procedure sets the corresponding socket in _fed.sockets_for_inbound_p2p_connections to -1 and returns, terminating the thread. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fed_id_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a ushort containing federate ID being listened to. This procedure frees the memory pointed to before returning. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="2193" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2193" bodyend="2248" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a0e2425b519aae66167fbf454f896df92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void create_server</definition>
        <argsstring>(int specified_port)</argsstring>
        <name>create_server</name>
        <param>
          <type>int</type>
          <declname>specified_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a server to listen to incoming physical connections from remote federates. This function only handles the creation of the server socket. The reserved port for the server socket is then sent to the RTI by sending an ADDRESS_AD message (<simplesect kind="see"><para><ref refid="rti_8h" kindref="compound">rti.h</ref>). This function expects no response from the RTI.</para>
</simplesect>
If a port is specified by the user, that will be used as the only possibility for the server. This function will fail if that port is not available. If a port is not specified, the STARTING_PORT (<simplesect kind="see"><para><ref refid="rti_8h" kindref="compound">rti.h</ref>) will be used. The function will keep incrementing the port in this case until the number of tries reaches <ref refid="rti_8h_1aff81692fc67e6f7838d9d1cff402d7f6" kindref="member">PORT_RANGE_LIMIT</ref>.</para>
</simplesect>
<simplesect kind="note"><para>This function is similar to create_server(...) in <ref refid="rti_8c" kindref="compound">rti.c</ref>. However, it contains specific log messages for the peer to peer connections between federates. It also additionally sends an address advertisement (ADDRESS_AD) message to the RTI informing it of the port.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>specified_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified port by the user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="122" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="122" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a76f0bc068b7a7c4a30983172eea59767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int send_message</definition>
        <argsstring>(int message_type, unsigned short port, unsigned short federate, const char *next_destination_str, size_t length, unsigned char *message)</argsstring>
        <name>send_message</name>
        <param>
          <type>int</type>
          <declname>message_type</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>port</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>federate</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>next_destination_str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a message to another federate directly or via the RTI. This method assumes that the caller does not hold the outbound_socket_mutex lock, which it acquires to perform the send.</para>
<para>If the socket connection to the remote federate or the RTI has been broken, then this returns 0 without sending. Otherwise, it returns 1.</para>
<para><simplesect kind="note"><para>This function is similar to <ref refid="federate_8c_1ad6916d42278d4c199272aaa884a1e01f" kindref="member">send_timed_message()</ref> except that it does not deal with time and timed_messages.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the message being sent. Currently can be TIMED_MESSAGE for messages sent via RTI or P2P_TIMED_MESSAGE for messages sent between federates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the destination port. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>federate</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the destination federate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next_destination_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the next destination in string format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the message has been sent, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="217" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="217" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ad6916d42278d4c199272aaa884a1e01f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int send_timed_message</definition>
        <argsstring>(interval_t additional_delay, int message_type, unsigned short port, unsigned short federate, const char *next_destination_str, size_t length, unsigned char *message)</argsstring>
        <name>send_timed_message</name>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>additional_delay</declname>
        </param>
        <param>
          <type>int</type>
          <declname>message_type</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>port</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>federate</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>next_destination_str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send the specified timestamped message to the specified port in the specified federate via the RTI or directly to a federate depending on the given socket. The timestamp is calculated as current_logical_time + additional delay which is greater than or equal to zero. The port should be an input port of a reactor in the destination federate. This version does include the timestamp in the message. The caller can reuse or free the memory after this returns.</para>
<para>If the socket connection to the remote federate or the RTI has been broken, then this returns 0 without sending. Otherwise, it returns 1.</para>
<para>This method assumes that the caller does not hold the outbound_socket_mutex lock, which it acquires to perform the send.</para>
<para><simplesect kind="note"><para>This function is similar to <ref refid="federate_8c_1a76f0bc068b7a7c4a30983172eea59767" kindref="member">send_message()</ref> except that it sends timed messages and also contains logics related to time.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>additional_delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset applied to the timestamp using after. The additional delay will be greater or equal to zero if an after is used on the connection. If no after is given in the program, -1 is passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the message being sent. Currently can be TIMED_MESSAGE for messages sent via RTI or P2P_TIMED_MESSAGE for messages sent between federates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the destination port. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>federate</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the destination federate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next_destination_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The next destination in string format (RTI or federate) (used for reporting errors). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the message has been sent, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="297" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="297" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a2c9ffe8e9c42d3c8c7e5bb170bfa6471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_send_time</definition>
        <argsstring>(unsigned char type, instant_t time)</argsstring>
        <name>_lf_send_time</name>
        <param>
          <type>unsigned char</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a time to the RTI. This is not synchronized. It assumes the caller is. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type (TIMESTAMP or TIME_ADVANCE_NOTICE). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>The time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="394" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="394" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1aa894b9efe5e8be30222d2d34b1c8c2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_send_tag</definition>
        <argsstring>(unsigned char type, tag_t tag)</argsstring>
        <name>_lf_send_tag</name>
        <param>
          <type>unsigned char</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a tag to the RTI. This is not synchronized. It assumes the caller is. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type (NEXT_EVENT_TAG or LOGICAL_TAG_COMPLETE). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="430" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="430" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ade1ea1b03d383abebf7303b10a05f370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* handle_p2p_connections_from_federates</definition>
        <argsstring>(void *ignored)</argsstring>
        <name>handle_p2p_connections_from_federates</name>
        <param>
          <type>void *</type>
          <declname>ignored</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread to accept connections from other federates that send this federate messages directly (not through the RTI). This thread starts a thread for each accepted socket connection and, once it has opened all expected sockets, exits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ignored</parametername>
</parameternamelist>
<parameterdescription>
<para>No argument needed for this thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="469" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="469" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ab74e4453a091929855ab82a38074150e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_close_outbound_socket</definition>
        <argsstring>(int fed_id)</argsstring>
        <name>_lf_close_outbound_socket</name>
        <param>
          <type>int</type>
          <declname>fed_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close the socket that sends outgoing messages to the specified federate ID. This function assumes the caller holds the outbound_socket_mutex mutex lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the peer federate receiving messages from this federate, or -1 if the RTI (centralized coordination). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="574" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="574" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1af5f3bc3822dd7bbfd67d52b91bf9d382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* listen_for_upstream_messages_from_downstream_federates</definition>
        <argsstring>(void *fed_id_ptr)</argsstring>
        <name>listen_for_upstream_messages_from_downstream_federates</name>
        <param>
          <type>void *</type>
          <declname>fed_id_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For each incoming message socket, we create this thread that listens for upstream messages. Currently, the only possible upstream message is CLOSE_REQUEST. If this thread receives that message, then closes the socket. The idea here is that a peer-to-peer socket connection is always closed from the sending end, never from the receiving end. This way, any sends in progress complete before the socket is actually closed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="592" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="592" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ae531b26446e581af75969ca6d9dc71f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void connect_to_federate</definition>
        <argsstring>(ushort remote_federate_id)</argsstring>
        <name>connect_to_federate</name>
        <param>
          <type><ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref></type>
          <declname>remote_federate_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect to the federate with the specified id. This established connection will then be used in functions such as <ref refid="federate_8c_1ad6916d42278d4c199272aaa884a1e01f" kindref="member">send_timed_message()</ref> to send messages directly to the specified federate. This function first sends an ADDRESS_QUERY message to the RTI to obtain the IP address and port number of the specified federate. It then attempts to establish a socket connection to the specified federate. If this fails, the program exits. If it succeeds, it sets element [id] of the _fed.sockets_for_outbound_p2p_connections global array to refer to the socket for communicating directly with the federate. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>remote_federate_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the remote federate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="631" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="631" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ac4fb5cd6e02f70979dd3e30310d4b2bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void connect_to_rti</definition>
        <argsstring>(char *hostname, int port)</argsstring>
        <name>connect_to_rti</name>
        <param>
          <type>char *</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect to the RTI at the specified host and port and return the socket descriptor for the connection. If this fails, the program exits. If it succeeds, it sets the _fed.socket_TCP_RTI global variable to refer to the socket for communicating with the RTI. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>A hostname, such as &quot;localhost&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>A port number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="813" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="813" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1aacc9f1bfb95d8b6c852a52832a9ecd9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
        <definition>instant_t get_start_time_from_rti</definition>
        <argsstring>(instant_t my_physical_time)</argsstring>
        <name>get_start_time_from_rti</name>
        <param>
          <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
          <declname>my_physical_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send the specified timestamp to the RTI and wait for a response. The specified timestamp should be current physical time of the federate, and the response will be the designated start time for the federate. This procedure blocks until the response is received from the RTI. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>my_physical_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical time at this federate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The designated start time for the federate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="967" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="967" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
        <definition>trigger_t* __action_for_port</definition>
        <argsstring>(int port_id)</argsstring>
        <name>__action_for_port</name>
        <param>
          <type>int</type>
          <declname>port_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Placeholder for a generated function that returns a pointer to the <ref refid="structtrigger__t" kindref="compound">trigger_t</ref> struct for the action corresponding to the specified port ID. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The port ID. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a <ref refid="structtrigger__t" kindref="compound">trigger_t</ref> struct or null if the ID is out of range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1001" column="11" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" declline="1001" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a26a55f84538e1d96832c6247d74e7da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_network_port_status</definition>
        <argsstring>(int portID, port_status_t status)</argsstring>
        <name>set_network_port_status</name>
        <param>
          <type>int</type>
          <declname>portID</declname>
        </param>
        <param>
          <type><ref refid="reactor_8h_1a759ba374f75ea0025b9af1bb35f14d7e" kindref="member">port_status_t</ref></type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the status of network port with id portID.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>portID</parametername>
</parameternamelist>
<parameterdescription>
<para>The network port ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The network port status (port_status_t) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1010" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1010" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a07d570a16cab26d91c4b47fa5dd6ef6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mark_all_unknown_ports_as_absent</definition>
        <argsstring>()</argsstring>
        <name>mark_all_unknown_ports_as_absent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark all status fields of unknown network input ports as absent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1019" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1019" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a943c3d7aa45a6af5b6d1567cd4ce841c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_input_control_reaction_blocked</definition>
        <argsstring>()</argsstring>
        <name>is_input_control_reaction_blocked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if there is an input control reaction blocked waiting for input. This assumes the caller holds the mutex. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1032" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1032" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a0858ebda70e9bc60f76b9d2aa3df39ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_last_known_status_on_input_ports</definition>
        <argsstring>(tag_t tag)</argsstring>
        <name>update_last_known_status_on_input_ports</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the last known status tag of all network input ports to the value of <computeroutput>tag</computeroutput>, unless that the provided <computeroutput>tag</computeroutput> is less than the last_known_status_tag of the port. This is called when all inputs to network ports with tags up to an including <computeroutput>tag</computeroutput> have been received by those ports. If any update occurs and if there are control reactions blocked, then this broadcasts a signal to potentially unblock those control reactions.</para>
<para>This assumes the caller holds the mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag on which the latest status of network input ports is known. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1056" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1056" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1aa9f7065af94169d68152aa9db4a15cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_last_known_status_on_input_port</definition>
        <argsstring>(tag_t tag, int port_id)</argsstring>
        <name>update_last_known_status_on_input_port</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the last known status tag of a network input port to the value of &quot;tag&quot;. This is the largest tag at which the status (present or absent) of the port was known.</para>
<para>This function assumes the caller holds the mutex, and, if the tag actually increases, it notifies the waiting control reaction if there is one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag on which the latest status of network input ports is known. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>portID</parametername>
</parameternamelist>
<parameterdescription>
<para>The port ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1098" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1098" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1af89b0ab26ec13c6deafeb05c3c14a88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reset_status_fields_on_input_port_triggers</definition>
        <argsstring>()</argsstring>
        <name>reset_status_fields_on_input_port_triggers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the status fields on network input ports to unknown.</para>
<para><simplesect kind="note"><para>This function must be called at the beginning of each logical time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1120" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1120" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ad92ed203ebed8e9d8a3727d9b2583c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mark_control_reaction_waiting</definition>
        <argsstring>(int portID, bool waiting)</argsstring>
        <name>mark_control_reaction_waiting</name>
        <param>
          <type>int</type>
          <declname>portID</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>waiting</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the trigger associated with the specified port to indicate whether a control reaction is waiting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1130" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1130" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a123194949f44242acbab252bc1ffed4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="reactor_8h_1a759ba374f75ea0025b9af1bb35f14d7e" kindref="member">port_status_t</ref></type>
        <definition>port_status_t get_current_port_status</definition>
        <argsstring>(int portID)</argsstring>
        <name>get_current_port_status</name>
        <param>
          <type>int</type>
          <declname>portID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the status of the port at the current tag.</para>
<para>This assumes that the caller holds the mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>portID</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the port to determine status for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1142" column="15" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1142" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a351f84aa3eb871fe8f51e3a6f18e67f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enqueue_network_input_control_reactions</definition>
        <argsstring>(pqueue_t *reaction_q)</argsstring>
        <name>enqueue_network_input_control_reactions</name>
        <param>
          <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
          <declname>reaction_q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueue network input control reactions that determine if the trigger for a given network input port is going to be present at the current logical time or absent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1172" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1172" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a58c068ed5637620f62d0be0da850bbc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enqueue_network_output_control_reactions</definition>
        <argsstring>(pqueue_t *reaction_q)</argsstring>
        <name>enqueue_network_output_control_reactions</name>
        <param>
          <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
          <declname>reaction_q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueue network output control reactions that will send a PORT_ABSENT message to downstream federates if a given network output port is not present. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1191" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1191" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ae3810deff6321784705bf27c79a07d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enqueue_network_control_reactions</definition>
        <argsstring>(pqueue_t *reaction_q)</argsstring>
        <name>enqueue_network_control_reactions</name>
        <param>
          <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
          <declname>reaction_q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueue network control reactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1212" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1212" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a4a188ed34f9cf3a6d2ede7a033089bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void send_port_absent_to_federate</definition>
        <argsstring>(interval_t additional_delay, unsigned short port_ID, unsigned short fed_ID)</argsstring>
        <name>send_port_absent_to_federate</name>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>additional_delay</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>port_ID</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>fed_ID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a port absent message to federate with fed_ID, informing the remote federate that the current federate will not produce an event on this network port at the current logical time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>additional_delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset applied to the timestamp using after. The additional delay will be greater or equal to zero if an after is used on the connection. If no after is given in the program, -1 is passed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1235" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1235" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1af4e0b0634806dadc6bda729c63dc700f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wait_until_port_status_known</definition>
        <argsstring>(int port_ID, interval_t STP)</argsstring>
        <name>wait_until_port_status_known</name>
        <param>
          <type>int</type>
          <declname>port_ID</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>STP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until the status of network port &quot;port_ID&quot; is known.</para>
<para>In decentralized coordination mode, the wait time is capped by &quot;STP&quot;, after which the status of the port is presumed to be absent.</para>
<para>This function assumes the holder does not hold a mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the network port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STP</parametername>
</parameternamelist>
<parameterdescription>
<para>The STP offset of the port </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1311" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1311" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a1f1332f247555c60e142c03189a34dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref></type>
        <definition>handle_t schedule_message_received_from_network_already_locked</definition>
        <argsstring>(trigger_t *trigger, tag_t tag, lf_token_t *token)</argsstring>
        <name>schedule_message_received_from_network_already_locked</name>
        <param>
          <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version of <ref refid="ctarget_8h_1a7e122ceb9688a43baa97a5a0dc7818e1" kindref="member">schedule_value()</ref> similar to that in reactor_common.c except that it does not acquire the mutex lock and has a special behavior during startup where it can inject reactions to the reaction queue if execution has not started yet. It is also responsible for setting the intended tag of the network message based on the calculated delay. This function assumes that the caller holds the mutex lock.</para>
<para>This is used for handling incoming timed messages to a federate.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action or timer to be triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag of the message received over the network. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamically allocated memory containing the value to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the array, if it is an array, or 1 for a scalar and 0 for no payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the event, or 0 if no event was scheduled, or -1 for error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1413" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1413" bodyend="1462"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ad48351e45d74393e322780dfeabad776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _lf_request_close_inbound_socket</definition>
        <argsstring>(int fed_id)</argsstring>
        <name>_lf_request_close_inbound_socket</name>
        <param>
          <type>int</type>
          <declname>fed_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request to close the socket that receives incoming messages from the specified federate ID. This sends a message to the upstream federate requesting that it close the socket. If the message is sent successfully, this returns 1. Otherwise it returns 0, which presumably means that the socket is already closed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the peer federate sending messages to this federate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the CLOSE_REQUEST message is sent successfully, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1475" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1475" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a89f25989edc5bf8e0c8bf46efe9310d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_close_inbound_socket</definition>
        <argsstring>(int fed_id)</argsstring>
        <name>_lf_close_inbound_socket</name>
        <param>
          <type>int</type>
          <declname>fed_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close the socket that receives incoming messages from the specified federate ID or RTI. This function should be called when a read of incoming socket fails or when an EOF is received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the peer federate sending messages to this federate, or -1 if the RTI. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1503" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1503" bodyend="1517"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a3a5875ee5db1e60f40b6dd8c98f3eec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_port_absent_message</definition>
        <argsstring>(int socket, int fed_id)</argsstring>
        <name>handle_port_absent_message</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fed_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle a port absent message received from a remote federate. This just sets the last known status tag of the port specified in the message.</para>
<para>This assumes the caller does not hold the mutex, which it acquires.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to read the message from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fed_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The sending federate ID or -1 if the centralized coordination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1530" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1530" bodyend="1571"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a8a059641cbcf0e192594ea898cd09983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_message</definition>
        <argsstring>(int socket, int fed_id)</argsstring>
        <name>handle_message</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fed_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle a message being received from a remote federate.</para>
<para>This function assumes the caller does not hold the mutex lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to read the message from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fed_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The sending federate ID or -1 if the centralized coordination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1581" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1581" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a79c416c42bbbfb8d65af0b78e6ce31c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_timed_message</definition>
        <argsstring>(int socket, int fed_id)</argsstring>
        <name>handle_timed_message</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fed_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle a timed message being received from a remote federate via the RTI or directly from other federates. This will read the tag encoded in the header and calculate an offset to pass to the schedule function. This function assumes the caller does not hold the mutex lock. Instead of holding the mutex lock, this function calls _lf_increment_global_tag_barrier with the tag carried in the message header as an argument. This ensures that the current tag will not advance to the tag of the message if it is in the future, or the tag will not advance at all if the tag of the message is now or in the past. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to read the message from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fed_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The sending federate ID or -1 if the centralized coordination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1629" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1629" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a7853e005f220474d4ce35be7a6560b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_tag_advance_grant</definition>
        <argsstring>()</argsstring>
        <name>handle_tag_advance_grant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle a time advance grant (TAG) message from the RTI. This updates the last known status tag for each network input port, and broadcasts a signal, which may cause a blocking control reaction to unblock.</para>
<para>In addition, this updates the last known TAG/PTAG and broadcasts a notification of this update, which may unblock whichever worker thread is trying to advance time.</para>
<para>This function assumes the caller does not hold the mutex lock, which it acquires.</para>
<para><simplesect kind="note"><para>This function is very similar to handle_provisinal_tag_advance_grant() except that it sets last_TAG_was_provisional to false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1800" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1800" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a77aa8325df62cb64364fb8af6b1c2334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_logical_tag_complete</definition>
        <argsstring>(tag_t tag_to_send)</argsstring>
        <name>_lf_logical_tag_complete</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag_to_send</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a logical tag complete (LTC) message to the RTI unless an equal or later LTC has previously been sent. This function assumes the caller holds the mutex lock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag_to_send</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1848" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1848" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ab1d3825f70289972e7f2ab9fed3b24f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_provisional_tag_advance_grant</definition>
        <argsstring>()</argsstring>
        <name>handle_provisional_tag_advance_grant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle a provisional tag advance grant (PTAG) message from the RTI. This updates the last known TAG/PTAG and broadcasts a notification of this update, which may unblock whichever worker thread is trying to advance time. If current_time is less than the specified PTAG, then this will also insert into the event_q a dummy event with the specified tag. This will ensure that the federate advances time to the specified tag and, for centralized coordination, inserts blocking reactions and null-message-sending output reactions at that tag.</para>
<para>This function assumes the caller does not hold the mutex lock, which it acquires.</para>
<para><simplesect kind="note"><para>This function is similar to <ref refid="federate_8c_1a7853e005f220474d4ce35be7a6560b2f" kindref="member">handle_tag_advance_grant()</ref> except that it sets last_TAG_was_provisional to true and also it does not update the last known tag for input ports. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1878" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1878" bodyend="1970"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a60ec02f52c1a7db4c7bdbc2871eae636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_fd_send_stop_request_to_rti</definition>
        <argsstring>()</argsstring>
        <name>_lf_fd_send_stop_request_to_rti</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a STOP_REQUEST message to the RTI with payload equal to the current tag plus one microstep.</para>
<para>This function raises a global barrier on logical tag at the current tag.</para>
<para>This function assumes the caller holds the mutex lock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="1981" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1981" bodyend="2006"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a295baf41cee4f9450aaf7c95abede7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_stop_granted_message</definition>
        <argsstring>()</argsstring>
        <name>handle_stop_granted_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle a STOP_GRANTED message from the RTI.</para>
<para>This function removes the global barrier on logical time raised when <ref refid="reactor_8h_1af629769c213699f0e4c9360811ee7251" kindref="member">request_stop()</ref> was called.</para>
<para>This function assumes the caller does not hold the mutex lock, therefore, it acquires it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="2018" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2018" bodyend="2058"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a5fe22b3d14b1992c6981d2cfcb89c425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handle_stop_request_message</definition>
        <argsstring>()</argsstring>
        <name>handle_stop_request_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle a STOP_REQUEST message from the RTI.</para>
<para>This function assumes the caller does not hold the mutex lock, therefore, it acquires it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="2066" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2066" bodyend="2123"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a114c79dc673219d5df3b794552ca88d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void terminate_execution</definition>
        <argsstring>()</argsstring>
        <name>terminate_execution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close sockets used to communicate with other federates, if they are open, and send a RESIGN message to the RTI. This implements the function defined in <ref refid="reactor_8h" kindref="compound">reactor.h</ref>. For unfederated execution, the code generator generates an empty implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="2131" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2131" bodyend="2179"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1a601736facfe06a4521ba59e7cff6c7b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* listen_to_rti_TCP</definition>
        <argsstring>(void *args)</argsstring>
        <name>listen_to_rti_TCP</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread that listens for TCP inputs from the RTI. When a physical message arrives, this calls schedule. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="2254" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2254" bodyend="2323"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1ad83fe9661682934029a42954b8fe6e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void synchronize_with_other_federates</definition>
        <argsstring>()</argsstring>
        <name>synchronize_with_other_federates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronize the start with other federates via the RTI. This assumes that a connection to the RTI is already made and _fed.socket_TCP_RTI is valid. It then sends the current logical time to the RTI and waits for the RTI to respond with a specified time. It starts a thread to listen for messages from the RTI. It then waits for physical time to match the specified time, sets current logical time to the time returned by the RTI, and then returns. If <ndash/>fast was specified, then this does not wait for physical time to match the logical start time returned by the RTI.</para>
<para>FIXME: Possibly should be renamed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="2339" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2339" bodyend="2375"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1aa4e74edba14fe2d25b2f05c3497c1054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _lf_bounded_NET</definition>
        <argsstring>(tag_t *tag)</argsstring>
        <name>_lf_bounded_NET</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref> *</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the specified tag, if necessary, to be an earlier tag based on the current physical time. The earlier tag is necessary if this federate has downstream federates and also has physical actions that may trigger outputs. In that case, the earlier tag will be the current physical time plus the minimum delay on all such physical actions plus any other delays along the path from the triggering physical action to the output port minus one nanosecond. The modified tag is assured of being less than any output tag that might later be produced. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the proposed NET. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if this federate requires this modification and the tag was modified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="2390" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2390" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="federate_8c_1acd313a38ec1a25c22cc94333146ba8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
        <definition>tag_t _lf_send_next_event_tag</definition>
        <argsstring>(tag_t tag, bool wait_for_reply)</argsstring>
        <name>_lf_send_next_event_tag</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait_for_reply</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If this federate depends on upstream federates or sends data to downstream federates, then send to the RTI either a NET or a TAN, depending on whether there are network outputs that depend on physical actions. If there are no such outputs, then send next event tag (NET), which will give the tag of the earliest event on the event queue, or, if the queue is empty, the timeout time, or, if there is no timeout, FOREVER.</para>
<para>A NET or TAN is a promise saying that, absent network inputs, this federate will not produce an output message with tag earlier than the NET value or (TAN,0).</para>
<para>If there are upstream federates, then after sending a NET, this will block until either the RTI grants the advance to the requested time or the wait for the response from the RTI is interrupted by a change in the event queue (e.g., a physical action triggered or a network message arrived). If there are no upstream federates, then it will not wait for a TAG (which won&apos;t be forthcoming anyway) and returns the earliest tag on the event queue.</para>
<para>If the federate has neither upstream nor downstream federates, then this returns the specified tag immediately without sending anything to the RTI.</para>
<para>If there is at least one physical action somewhere in the federate that can trigger an output to a downstream federate, then the NET is required to be less than the current physical time. If physical time is less than the earliest event in the event queue (or the event queue is empty), then this function will send a Time Advance Notice (TAN) message instead of NET. That message does not require a response from the RTI. The TAN message will be sent repeatedly as physical time advances with the time interval between messages controlled by the target parameter coordination-options: {advance-message-interval timevalue}. It will switch back to sending a NET message if and when its event queue has an event with a timestamp less than physical time.</para>
<para>If wait_for_reply is false, then this function will simply send the specified tag and return that tag immediately. This is useful when a federate is shutting down and will not be sending any more messages at all.</para>
<para>In all cases, this returns either the specified tag or another tag when it is safe to advance logical time to the returned tag. The returned tag may be less than the specified tag if there are upstream federates and either the RTI responds with a lesser tag or the wait for a response from the RTI is interrupted by a change in the event queue.</para>
<para>This function is used in centralized coordination only.</para>
<para>This function assumes the caller holds the mutex lock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_for_reply</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, wait for a reply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" line="2479" column="7" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2479" bodyend="2620"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Edward A. Lee (<ulink url="mailto:eal@berkeley.edu">eal@berkeley.edu</ulink>)</para>
</simplesect>
</para>
<sect1 id="util_8h_1LICENSE">
<title>LICENSE</title>
<para>Copyright (c) 2020, The University of California at Berkeley.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem></orderedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
</sect1>
<sect1 id="util_8h_1DESCRIPTION">
<title>DESCRIPTION</title>
<para>Utility functions for a federate in a federated execution. The main entry point is <ref refid="federate_8c_1ad83fe9661682934029a42954b8fe6e2f" kindref="member">synchronize_with_other_federates()</ref>. </para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="33"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defined<sp/>perror(),<sp/>errno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>struct<sp/>sockaddr_in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inet_ntop<sp/>&amp;<sp/>inet_pton</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>read(),<sp/>write(),<sp/>and<sp/>close()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>gethostbyname().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>bzero().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>sigaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="net__util_8c" kindref="compound">net_util.c</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>network<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rti_8h" kindref="compound">rti.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>TIMESTAMP.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reactor_8h" kindref="compound">reactor.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>instant_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;platform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="clock-sync_8c" kindref="compound">clock-sync.c</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>clock<sp/>synchronization<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="federate_8h" kindref="compound">federate.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>federate_instance_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Error<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ERROR_SENDING_HEADER<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ERROR<sp/>sending<sp/>header<sp/>information<sp/>to<sp/>federate<sp/>via<sp/>RTI&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ERROR_SENDING_MESSAGE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ERROR<sp/>sending<sp/>message<sp/>to<sp/>federate<sp/>via<sp/>RTI&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mutex<sp/>lock<sp/>held<sp/>while<sp/>performing<sp/>socket<sp/>write<sp/>and<sp/>close<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">lf_mutex_t<sp/>outbound_socket_mutex;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">lf_cond_t<sp/>port_status_changed;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="structfederate__instance__t" kindref="compound">federate_instance_t</ref><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.number_of_inbound_p2p_connections<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.inbound_socket_listeners<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.number_of_outbound_p2p_connections<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sockets_for_inbound_p2p_connections<sp/>=<sp/>{<sp/>-1<sp/>},</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sockets_for_outbound_p2p_connections<sp/>=<sp/>{<sp/>-1<sp/>},</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.inbound_p2p_handling_thread_id<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.server_socket<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.server_port<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.last_TAG<sp/>=<sp/>{.time<sp/>=<sp/>NEVER,<sp/>.microstep<sp/>=<sp/>0u},</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.is_last_TAG_provisional<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.waiting_for_TAG<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.has_upstream<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.has_downstream<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sent_a_stop_request_to_rti<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.last_sent_LTC<sp/>=<sp/>(<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{.time<sp/>=<sp/>NEVER,<sp/>.microstep<sp/>=<sp/>0u},</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.last_sent_NET<sp/>=<sp/>(<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{.time<sp/>=<sp/>NEVER,<sp/>.microstep<sp/>=<sp/>0u},</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min_delay_from_physical_action_to_federate_output<sp/>=<sp/>NEVER,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.triggers_for_network_input_control_reactions<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.triggers_for_network_input_control_reactions_size<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.trigger_for_network_output_control_reactions<sp/>=<sp/>NULL</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="federate_8c_1a0ed912257c1b82c7727c549aec8f3a73" kindref="member">listen_to_federates</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>args);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a0e2425b519aae66167fbf454f896df92" kindref="member">create_server</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>specified_port)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port<sp/>=<sp/>specified_port;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specified_port<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>default<sp/>starting<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port<sp/>=<sp/><ref refid="rti_8h_1a3935567021a890f8b97f3d733ca5cfa1" kindref="member">STARTING_PORT</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Creating<sp/>a<sp/>socket<sp/>server<sp/>on<sp/>port<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>port);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>IPv4<sp/>socket<sp/>for<sp/>TCP<sp/>(not<sp/>UDP)<sp/>communication<sp/>over<sp/>IP<sp/>(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket_descriptor<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(socket_descriptor<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>obtain<sp/>a<sp/>socket<sp/>server.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Server<sp/>file<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>server_fd;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>out<sp/>the<sp/>server<sp/>address<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>bzero((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;server_fd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_fd));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>server_fd.sin_family<sp/>=<sp/>AF_INET;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IPv4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>server_fd.sin_addr.s_addr<sp/>=<sp/>INADDR_ANY;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>interfaces,<sp/>0.0.0.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>port<sp/>number<sp/>from<sp/>host<sp/>byte<sp/>order<sp/>to<sp/>network<sp/>byte<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>server_fd.sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>bind(</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket_descriptor,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)<sp/>&amp;server_fd,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_fd));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>binding<sp/>fails<sp/>with<sp/>this<sp/>port<sp/>and<sp/>no<sp/>particular<sp/>port<sp/>was<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>LF<sp/>program,<sp/>then<sp/>try<sp/>the<sp/>next<sp/>few<sp/>ports<sp/>in<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>specified_port<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>port<sp/>&gt;=<sp/><ref refid="rti_8h_1a3935567021a890f8b97f3d733ca5cfa1" kindref="member">STARTING_PORT</ref></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>port<sp/>&lt;=<sp/><ref refid="rti_8h_1a3935567021a890f8b97f3d733ca5cfa1" kindref="member">STARTING_PORT</ref><sp/>+<sp/><ref refid="rti_8h_1aff81692fc67e6f7838d9d1cff402d7f6" kindref="member">PORT_RANGE_LIMIT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>port<sp/>%d.<sp/>Trying<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>port,<sp/>port<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port++;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server_fd.sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>bind(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket_descriptor,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)<sp/>&amp;server_fd,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_fd));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specified_port<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>bind<sp/>socket.<sp/>Cannot<sp/>find<sp/>a<sp/>usable<sp/>port.<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Consider<sp/>increasing<sp/>PORT_RANGE_LIMIT<sp/>in<sp/>federate.c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>bind<sp/>socket.<sp/>Specified<sp/>port<sp/>is<sp/>not<sp/>available.<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Consider<sp/>leaving<sp/>the<sp/>port<sp/>unspecified&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Server<sp/>for<sp/>communicating<sp/>with<sp/>other<sp/>federates<sp/>started<sp/>using<sp/>port<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>port);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>listening<sp/>for<sp/>socket<sp/>connections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>argument<sp/>is<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>queued<sp/>socket<sp/>requests,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>according<sp/>to<sp/>the<sp/>Mac<sp/>man<sp/>page<sp/>is<sp/>limited<sp/>to<sp/>128.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>listen(socket_descriptor,<sp/>128);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>global<sp/>server<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a309c9672d657f20cd1d3661edc7d5179" kindref="member">server_port</ref><sp/>=<sp/>port;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>server<sp/>port<sp/>number<sp/>to<sp/>the<sp/>RTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>an<sp/>ADDRESS_AD<sp/>message<sp/>(@see<sp/>rti.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/><ref refid="rti_8h_1a4f0f800c091729c481a6ce0f3bac4ca4" kindref="member">ADDRESS_AD</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1af4312040e137fb9d644f96edaa74075d" kindref="member">encode_int</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a309c9672d657f20cd1d3661edc7d5179" kindref="member">server_port</ref>,<sp/>&amp;(buffer[1]));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0e3b7299eccba74fcd7a27f37642dc7e" kindref="member">write_to_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>+<sp/>1,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)buffer,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>address<sp/>advertisement.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sent<sp/>port<sp/>%d<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a309c9672d657f20cd1d3661edc7d5179" kindref="member">server_port</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>global<sp/>server<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a20c5d19d5166ec82a09efe072c2f1b49" kindref="member">server_socket</ref><sp/>=<sp/>socket_descriptor;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a76f0bc068b7a7c4a30983172eea59767" kindref="member">send_message</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>message_type,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>federate,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>next_destination_str,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>header_buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>byte<sp/>identifies<sp/>this<sp/>as<sp/>a<sp/>timed<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>header_buffer[0]<sp/>=<sp/>message_type;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>two<sp/>bytes<sp/>identify<sp/>the<sp/>destination<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Send<sp/>messages<sp/>little<sp/>endian,<sp/>not<sp/>big<sp/>endian.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>(port,<sp/>&amp;(header_buffer[1]));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>two<sp/>bytes<sp/>identify<sp/>the<sp/>destination<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>(federate,<sp/>&amp;(header_buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)]));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>four<sp/>bytes<sp/>are<sp/>the<sp/>message<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1af4312040e137fb9d644f96edaa74075d" kindref="member">encode_int</ref>(length,<sp/>&amp;(header_buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)]));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>untimed<sp/>message<sp/>to<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>next_destination_str);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Header:<sp/><sp/>message_type<sp/>+<sp/>port_id<sp/>+<sp/>federate_id<sp/>+<sp/>length<sp/>of<sp/>message<sp/>+<sp/>timestamp<sp/>+<sp/>microstep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>header_length<sp/>=<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>mutex<sp/>lock<sp/>to<sp/>prevent<sp/>multiple<sp/>threads<sp/>from<sp/>simultaneously<sp/>sending.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>check<sp/>that<sp/>the<sp/>socket<sp/>is<sp/>still<sp/>connected.<sp/>This<sp/>must<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>holding<sp/>the<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_type<sp/>==<sp/><ref refid="rti_8h_1a5ce0ffa3d59395228539825e73ee490a" kindref="member">P2P_MESSAGE</ref><sp/>||<sp/>message_type<sp/>==<sp/><ref refid="rti_8h_1a6ef14664d9d9d95f792d7f847bc5b119" kindref="member">P2P_TIMED_MESSAGE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[federate];</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(socket<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>is<sp/>no<sp/>longer<sp/>connected.<sp/>Dropping<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae819deb7254b390e29a1808625acf70f" kindref="member">write_to_socket_errexit_with_mutex</ref>(socket,<sp/>header_length,<sp/>header_buffer,<sp/>&amp;outbound_socket_mutex,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>message<sp/>header<sp/>to<sp/>to<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>next_destination_str);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae819deb7254b390e29a1808625acf70f" kindref="member">write_to_socket_errexit_with_mutex</ref>(socket,<sp/>length,<sp/>message,<sp/>&amp;outbound_socket_mutex,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>message<sp/>body<sp/>to<sp/>to<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>next_destination_str);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ad6916d42278d4c199272aaa884a1e01f" kindref="member">send_timed_message</ref>(<ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>additional_delay,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>message_type,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>federate,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>next_destination_str,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>header_buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref>)];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>byte<sp/>identifies<sp/>this<sp/>as<sp/>a<sp/>timed<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>header_buffer[0]<sp/>=<sp/>message_type;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>two<sp/>bytes<sp/>identify<sp/>the<sp/>destination<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Send<sp/>messages<sp/>little<sp/>endian,<sp/>not<sp/>big<sp/>endian.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>(port,<sp/>&amp;(header_buffer[1]));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>two<sp/>bytes<sp/>identify<sp/>the<sp/>destination<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>(federate,<sp/>&amp;(header_buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)]));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>four<sp/>bytes<sp/>are<sp/>the<sp/>message<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1af4312040e137fb9d644f96edaa74075d" kindref="member">encode_int</ref>(length,<sp/>&amp;(header_buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)]));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>logical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>current_message_timestamp<sp/>=<sp/><ref refid="tag_8c_1a9da5960071964c9c2bdb602526da0565" kindref="member">get_logical_time</ref>();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>are<sp/>getting<sp/>the<sp/>microstep<sp/>here<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>assumption<sp/>that<sp/>it<sp/>does<sp/>not<sp/>change<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>is<sp/>executing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref><sp/>current_message_microstep<sp/>=<sp/><ref refid="tag_8c_1af413f18a3d52672f4ba984cc92e4efe5" kindref="member">get_microstep</ref>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(additional_delay<sp/>==<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>was<sp/>specified<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>connection<sp/>with<sp/>a<sp/>delay<sp/>of<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tag<sp/>of<sp/>the<sp/>outgoing<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>(get_logical_time(),<sp/>get_microstep()<sp/>+<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_microstep<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(additional_delay<sp/>&gt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>was<sp/>specified<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>connection<sp/>with<sp/>a<sp/>positive<sp/>delay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tag<sp/>of<sp/>the<sp/>outgoing<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>(get_logical_time()<sp/>+<sp/>additional_delay,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_timestamp<sp/>+=<sp/>additional_delay;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_microstep<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(additional_delay<sp/>==<sp/>-1LL)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>after<sp/>delay<sp/>is<sp/>given<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tag<sp/>of<sp/>the<sp/>outgoing<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>(get_logical_time(),<sp/>get_microstep())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>8<sp/>bytes<sp/>are<sp/>the<sp/>timestamp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0b8cbad5d6dc462c87eb48c6a5519c33" kindref="member">encode_ll</ref>(current_message_timestamp,<sp/>&amp;(header_buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)]));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>4<sp/>bytes<sp/>are<sp/>the<sp/>microstep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1af4312040e137fb9d644f96edaa74075d" kindref="member">encode_int</ref>(current_message_microstep,<sp/>&amp;(header_buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)]));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>message<sp/>with<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>to<sp/>%s.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_timestamp<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>current_message_microstep,<sp/>next_destination_str);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Header:<sp/><sp/>message_type<sp/>+<sp/>port_id<sp/>+<sp/>federate_id<sp/>+<sp/>length<sp/>of<sp/>message<sp/>+<sp/>timestamp<sp/>+<sp/>microstep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>header_length<sp/>=<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag((<ref refid="structtag__t" kindref="compound">tag_t</ref>){.time=current_message_timestamp,.microstep=current_message_microstep}))<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message<sp/>tag<sp/>is<sp/>past<sp/>the<sp/>timeout<sp/>time<sp/>(the<sp/>stop<sp/>time)<sp/>so<sp/>it<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>be<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>mutex<sp/>lock<sp/>to<sp/>prevent<sp/>multiple<sp/>threads<sp/>from<sp/>simultaneously<sp/>sending.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>check<sp/>that<sp/>the<sp/>socket<sp/>is<sp/>still<sp/>connected.<sp/>This<sp/>must<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>holding<sp/>the<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_type<sp/>==<sp/><ref refid="rti_8h_1a5ce0ffa3d59395228539825e73ee490a" kindref="member">P2P_MESSAGE</ref><sp/>||<sp/>message_type<sp/>==<sp/><ref refid="rti_8h_1a6ef14664d9d9d95f792d7f847bc5b119" kindref="member">P2P_TIMED_MESSAGE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[federate];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(socket<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>is<sp/>no<sp/>longer<sp/>connected.<sp/>Dropping<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae819deb7254b390e29a1808625acf70f" kindref="member">write_to_socket_errexit_with_mutex</ref>(socket,<sp/>header_length,<sp/>header_buffer,<sp/>&amp;outbound_socket_mutex,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>timed<sp/>message<sp/>header<sp/>to<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>next_destination_str);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae819deb7254b390e29a1808625acf70f" kindref="member">write_to_socket_errexit_with_mutex</ref>(socket,<sp/>length,<sp/>message,<sp/>&amp;outbound_socket_mutex,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>timed<sp/>message<sp/>body<sp/>to<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>next_destination_str);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a2c9ffe8e9c42d3c8c7e5bb170bfa6471" kindref="member">_lf_send_time</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type,<sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>time<sp/>%lld<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_to_write<sp/>=<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_write];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0b8cbad5d6dc462c87eb48c6a5519c33" kindref="member">encode_ll</ref>(time,<sp/>&amp;(buffer[1]));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>is<sp/>no<sp/>longer<sp/>connected.<sp/>Dropping<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_written<sp/>=<sp/><ref refid="net__util_8c_1ae9bab7965862259f354a419e4140b564" kindref="member">write_to_socket</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>bytes_to_write,<sp/>buffer);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_written<sp/>&lt;<sp/>bytes_to_write)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errno<sp/>==<sp/>ENOTCONN)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Shutdown<sp/>is<sp/>probably<sp/>not<sp/>working<sp/>properly<sp/>because<sp/>the<sp/>socket<sp/>gets<sp/>disconnected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>to<sp/>the<sp/>RTI<sp/>is<sp/>no<sp/>longer<sp/>connected.<sp/>Considering<sp/>this<sp/>a<sp/>soft<sp/>error.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>time<sp/>%lld<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>code<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(errno)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1aa894b9efe5e8be30222d2d34b1c8c2be" kindref="member">_lf_send_tag</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type,<sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">,<sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>tag.microstep);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_to_write<sp/>=<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_write];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0b8cbad5d6dc462c87eb48c6a5519c33" kindref="member">encode_ll</ref>(tag.time,<sp/>&amp;(buffer[1]));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1af4312040e137fb9d644f96edaa74075d" kindref="member">encode_int</ref>(tag.microstep,<sp/>&amp;(buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)]));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>is<sp/>no<sp/>longer<sp/>connected.<sp/>Dropping<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_written<sp/>=<sp/><ref refid="net__util_8c_1ae9bab7965862259f354a419e4140b564" kindref="member">write_to_socket</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>bytes_to_write,<sp/>buffer);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_written<sp/>&lt;<sp/>bytes_to_write)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errno<sp/>==<sp/>ENOTCONN)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>to<sp/>the<sp/>RTI<sp/>is<sp/>no<sp/>longer<sp/>connected.<sp/>Considering<sp/>this<sp/>a<sp/>soft<sp/>error.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>code<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.microstep,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(errno)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="federate_8c_1ade1ea1b03d383abebf7303b10a05f370" kindref="member">handle_p2p_connections_from_federates</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ignored)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>received_federates<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>to<sp/>store<sp/>thread<sp/>IDs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1ac751250db764f954659deb15f1427044" kindref="member">inbound_socket_listeners</ref><sp/>=<sp/>(lf_thread_t*)calloc(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a189bc35e092cd0c6908267aa9ff663e5" kindref="member">number_of_inbound_p2p_connections</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lf_thread_t));</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(received_federates<sp/>&lt;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a189bc35e092cd0c6908267aa9ff663e5" kindref="member">number_of_inbound_p2p_connections</ref>)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>an<sp/>incoming<sp/>connection<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr<sp/>client_fd;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>client_length<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(client_fd);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket_id<sp/>=<sp/>accept(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a20c5d19d5166ec82a09efe072c2f1b49" kindref="member">server_socket</ref>,<sp/>&amp;client_fd,<sp/>&amp;client_length);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Error<sp/>handling<sp/>here<sp/>is<sp/>too<sp/>harsh<sp/>maybe?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(socket_id<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>errno<sp/>!=<sp/>EAGAIN<sp/>&amp;&amp;<sp/>errno<sp/>!=<sp/>EWOULDBLOCK)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;A<sp/>fatal<sp/>error<sp/>occurred<sp/>while<sp/>accepting<sp/>a<sp/>new<sp/>socket.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Federate<sp/>%d<sp/>will<sp/>not<sp/>accept<sp/>connections<sp/>anymore.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Accepted<sp/>new<sp/>connection<sp/>from<sp/>remote<sp/>federate.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>header_length<sp/>=<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[header_length];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/><ref refid="net__util_8c_1a9426930d10448b1f16f6afee07777f88" kindref="member">read_from_socket</ref>(socket_id,<sp/>header_length,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;buffer);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>!=<sp/>header_length<sp/>||<sp/>buffer[0]<sp/>!=<sp/><ref refid="rti_8h_1a91cf0e11a78e0b94952a2151993fc9c2" kindref="member">P2P_SENDING_FED_ID</ref>)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Federate<sp/>received<sp/>invalid<sp/>first<sp/>message<sp/>on<sp/>P2P<sp/>socket.<sp/>Closing<sp/>socket.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>response[2];</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response[0]<sp/>=<sp/><ref refid="rti_8h_1a835f10dd1ab4bf9a80c4cd80ee6e3058" kindref="member">REJECT</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response[1]<sp/>=<sp/><ref refid="rti_8h_1a5a6c87886a0136b58ae5bb1d627c7ae3" kindref="member">WRONG_SERVER</ref>;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>errors<sp/>on<sp/>this<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae9bab7965862259f354a419e4140b564" kindref="member">write_to_socket</ref>(socket_id,<sp/>2,<sp/>response);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(socket_id);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>federation<sp/>ID<sp/>and<sp/>check<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>federation_id_length<sp/>=<sp/>buffer[header_length<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>remote_federation_id[federation_id_length];</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes_read<sp/>=<sp/><ref refid="net__util_8c_1a9426930d10448b1f16f6afee07777f88" kindref="member">read_from_socket</ref>(socket_id,<sp/>federation_id_length,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)remote_federation_id);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>!=<sp/>federation_id_length</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(strncmp(<ref refid="rti_8c_1afb7337572879824d012d59222ea86eeb" kindref="member">federation_id</ref>,<sp/>remote_federation_id,<sp/>strnlen(<ref refid="rti_8c_1afb7337572879824d012d59222ea86eeb" kindref="member">federation_id</ref>,<sp/>255))<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>invalid<sp/>federation<sp/>ID.<sp/>Closing<sp/>socket.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>response[2];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response[0]<sp/>=<sp/><ref refid="rti_8h_1a835f10dd1ab4bf9a80c4cd80ee6e3058" kindref="member">REJECT</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response[1]<sp/>=<sp/><ref refid="rti_8h_1a653676d1f302fe08249af3dee78fa294" kindref="member">FEDERATION_ID_DOES_NOT_MATCH</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>errors<sp/>on<sp/>this<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae9bab7965862259f354a419e4140b564" kindref="member">write_to_socket</ref>(socket_id,<sp/>2,<sp/>response);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(socket_id);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>ID<sp/>of<sp/>the<sp/>sending<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref><sp/>remote_fed_id<sp/>=<sp/><ref refid="net__util_8c_1ab52445dc6792e1d40424c4e0edc18704" kindref="member">extract_ushort</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;(buffer[1]));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>sending<sp/>federate<sp/>ID<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>remote_fed_id);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Once<sp/>we<sp/>record<sp/>the<sp/>socket_id<sp/>here,<sp/>all<sp/>future<sp/>calls<sp/>to<sp/>close()<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>socket<sp/>should<sp/>be<sp/>done<sp/>while<sp/>holding<sp/>a<sp/>mutex,<sp/>and<sp/>this<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>should<sp/>be<sp/>reset<sp/>to<sp/>-1<sp/>during<sp/>that<sp/>critical<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>there<sp/>can<sp/>be<sp/>race<sp/>condition<sp/>where,<sp/>during<sp/>termination,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>threads<sp/>attempt<sp/>to<sp/>simultaneously<sp/>access<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[remote_fed_id]<sp/>=<sp/>socket_id;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>an<sp/>ACK<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>response<sp/>=<sp/><ref refid="rti_8h_1a6f6489887e08bff4887d0bc5dcf214d8" kindref="member">ACK</ref>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0e3b7299eccba74fcd7a27f37642dc7e" kindref="member">write_to_socket_errexit</ref>(socket_id,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;response,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>ACK<sp/>in<sp/>response<sp/>to<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_fed_id);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>a<sp/>thread<sp/>to<sp/>listen<sp/>for<sp/>incoming<sp/>messages<sp/>from<sp/>other<sp/>federates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>pass<sp/>a<sp/>pointer<sp/>to<sp/>remote_fed_id<sp/>to<sp/>the<sp/>thread<sp/>we<sp/>need<sp/>to<sp/>create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>that<sp/>variable<sp/>is<sp/>on<sp/>the<sp/>stack.<sp/>Instead,<sp/>we<sp/>malloc<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>created<sp/>thread<sp/>is<sp/>responsible<sp/>for<sp/>calling<sp/>free().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>*<sp/>remote_fed_id_copy<sp/>=<sp/>(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remote_fed_id_copy<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;malloc<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*remote_fed_id_copy<sp/>=<sp/>remote_fed_id;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>lf_thread_create(</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1ac751250db764f954659deb15f1427044" kindref="member">inbound_socket_listeners</ref>[received_federates],</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a0ed912257c1b82c7727c549aec8f3a73" kindref="member">listen_to_federates</ref>,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_fed_id_copy);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>to<sp/>create<sp/>a<sp/>listening<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(socket_id);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[remote_fed_id]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>a<sp/>thread<sp/>to<sp/>listen<sp/>for<sp/>incoming<sp/>physical<sp/>connection.<sp/>Error<sp/>code:<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>received_federates++;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;All<sp/>remote<sp/>federates<sp/>are<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ab74e4453a091929855ab82a38074150e" kindref="member">_lf_close_outbound_socket</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fed_id)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(fed_id<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>fed_id<sp/>&lt;<sp/>NUMBER_OF_FEDERATES);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[fed_id]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shutdown(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[fed_id],<sp/>SHUT_RDWR);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[fed_id]);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[fed_id]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="federate_8c_1af5f3bc3822dd7bbfd67d52b91bf9d382" kindref="member">listen_for_upstream_messages_from_downstream_federates</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fed_id_ptr)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref><sp/>fed_id<sp/>=<sp/>*((<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>*)fed_id_ptr);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[fed_id]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlock<sp/>the<sp/>mutex<sp/>before<sp/>performing<sp/>a<sp/>blocking<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>there<sp/>is<sp/>a<sp/>race<sp/>condition<sp/>here,<sp/>but<sp/>the<sp/>read<sp/>will<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>failure<sp/>if<sp/>the<sp/>socket<sp/>gets<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Thread<sp/>listening<sp/>for<sp/>CLOSE_REQUEST<sp/>from<sp/>federate<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>fed_id);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/><ref refid="net__util_8c_1a9426930d10448b1f16f6afee07777f88" kindref="member">read_from_socket</ref>(</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[fed_id],<sp/>1,<sp/>&amp;message);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reacquire<sp/>the<sp/>mutex<sp/>lock<sp/>before<sp/>closing<sp/>or<sp/>reading<sp/>the<sp/>socket<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>message<sp/>==<sp/><ref refid="rti_8h_1a4bb77849ca928a2744185ed37697bfd9" kindref="member">CLOSE_REQUEST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Received<sp/>a<sp/>request<sp/>to<sp/>close<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>CLOSE_REQUEST<sp/>from<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>fed_id);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ab74e4453a091929855ab82a38074150e" kindref="member">_lf_close_outbound_socket</ref>(fed_id);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ae531b26446e581af75969ca6d9dc71f5" kindref="member">connect_to_federate</ref>(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref><sp/>remote_federate_id)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_retries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>RTI<sp/>for<sp/>port<sp/>number<sp/>of<sp/>the<sp/>remote<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>is<sp/>used<sp/>for<sp/>both<sp/>sending<sp/>and<sp/>receiving<sp/>replies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>is<sp/>what<sp/>is<sp/>needed<sp/>for<sp/>receiving<sp/>replies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>+<sp/>INET_ADDRSTRLEN];</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">in_addr<sp/>host_ip_addr;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_tries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(port<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/><ref refid="rti_8h_1a78332727fe2ecd72cb7e47881a87d494" kindref="member">ADDRESS_QUERY</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Sending<sp/>messages<sp/>in<sp/>little<sp/>endian.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>(remote_federate_id,<sp/>&amp;(buffer[1]));</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>address<sp/>query<sp/>for<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0e3b7299eccba74fcd7a27f37642dc7e" kindref="member">write_to_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/>1,<sp/>buffer,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>address<sp/>query<sp/>for<sp/>federate<sp/>%d<sp/>to<sp/>RTI.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>RTI&apos;s<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>buffer,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>the<sp/>requested<sp/>port<sp/>number<sp/>for<sp/>federate<sp/>%d<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port<sp/>=<sp/><ref refid="net__util_8c_1a2c3e1559ae8f31e111cedc00211edded" kindref="member">extract_int</ref>(buffer);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(host_ip_addr),<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;host_ip_addr,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>the<sp/>IP<sp/>address<sp/>for<sp/>federate<sp/>%d<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>reply<sp/>of<sp/>-1<sp/>for<sp/>the<sp/>port<sp/>means<sp/>that<sp/>the<sp/>RTI<sp/>does<sp/>not<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>port<sp/>number<sp/>of<sp/>the<sp/>remote<sp/>federate,<sp/>presumably<sp/>because<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remote<sp/>federate<sp/>has<sp/>not<sp/>yet<sp/>sent<sp/>an<sp/>ADDRESS_AD<sp/>message<sp/>to<sp/>the<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleep<sp/>for<sp/>some<sp/>time<sp/>before<sp/>retrying.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count_tries++<sp/>&gt;=<sp/><ref refid="rti_8h_1a0ea56eac4d92cb13df332bd6765c3601" kindref="member">CONNECT_NUM_RETRIES</ref>)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;TIMEOUT<sp/>obtaining<sp/>IP/port<sp/>for<sp/>federate<sp/>%d<sp/>from<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>wait_time<sp/>=<sp/>{0L,<sp/><ref refid="rti_8h_1a8ce563da4edbe9c4f7c1ccf35ad8694f" kindref="member">ADDRESS_QUERY_RETRY_INTERVAL</ref>};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>remaining_time;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nanosleep(&amp;wait_time,<sp/>&amp;remaining_time)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleep<sp/>was<sp/>interrupted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(port<sp/>&lt;<sp/>65536);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(port<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LOG_LEVEL<sp/>&gt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>received<sp/>IP<sp/>address<sp/>in<sp/>a<sp/>human<sp/>readable<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>human<sp/>readable<sp/>format<sp/>of<sp/>the<sp/>received<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>avoided<sp/>unless<sp/>LOG_LEVEL<sp/>is<sp/>high<sp/>enough<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subdue<sp/>the<sp/>overhead<sp/>caused<sp/>by<sp/>inet_ntop().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hostname[INET_ADDRSTRLEN];</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>inet_ntop(AF_INET,<sp/>&amp;host_ip_addr,<sp/>hostname,<sp/>INET_ADDRSTRLEN);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>address<sp/>%s<sp/>port<sp/>%d<sp/>for<sp/>federate<sp/>%d<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hostname,<sp/>port,<sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>until<sp/>we<sp/>either<sp/>successfully<sp/>connect<sp/>or<sp/>exceed<sp/>the<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attempts<sp/>given<sp/>by<sp/>CONNECT_NUM_RETRIES.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>IPv4<sp/>socket<sp/>for<sp/>TCP<sp/>(not<sp/>UDP)<sp/>communication<sp/>over<sp/>IP<sp/>(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket_id<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>0);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(socket_id<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>socket<sp/>to<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Server<sp/>file<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>server_fd;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>out<sp/>the<sp/>server_fd<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzero((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;server_fd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_fd));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>server_fd<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server_fd.sin_family<sp/>=<sp/>AF_INET;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IPv4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server_fd.sin_addr<sp/>=<sp/>host_ip_addr;<sp/></highlight><highlight class="comment">//<sp/>Received<sp/>from<sp/>the<sp/>RTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>port<sp/>number<sp/>from<sp/>host<sp/>byte<sp/>order<sp/>to<sp/>network<sp/>byte<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server_fd.sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>connect(</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket_id,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)&amp;server_fd,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_fd));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>connect<sp/>to<sp/>federate<sp/>%d<sp/>on<sp/>port<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>remote_federate_id,<sp/>port);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>again<sp/>after<sp/>some<sp/>time<sp/>if<sp/>the<sp/>connection<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>should<sp/>not<sp/>really<sp/>happen<sp/>since<sp/>the<sp/>remote<sp/>federate<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accepting<sp/>socket<sp/>connections.<sp/>But<sp/>possibly<sp/>it<sp/>will<sp/>be<sp/>busy<sp/>(in<sp/>process<sp/>of<sp/>accepting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>another<sp/>socket<sp/>connection?).<sp/>Hence,<sp/>we<sp/>retry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count_retries++;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count_retries<sp/>&gt;<sp/><ref refid="rti_8h_1a0ea56eac4d92cb13df332bd6765c3601" kindref="member">CONNECT_NUM_RETRIES</ref>)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>remote<sp/>federate<sp/>is<sp/>not<sp/>accepting<sp/>the<sp/>connection<sp/>after<sp/>CONNECT_NUM_RETRIES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>treat<sp/>it<sp/>as<sp/>a<sp/>soft<sp/>error<sp/>condition<sp/>and<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>connect<sp/>to<sp/>federate<sp/>%d<sp/>after<sp/>%d<sp/>retries.<sp/>Giving<sp/>up.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_federate_id,<sp/><ref refid="rti_8h_1a0ea56eac4d92cb13df332bd6765c3601" kindref="member">CONNECT_NUM_RETRIES</ref>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>connect<sp/>to<sp/>federate<sp/>%d.<sp/>Will<sp/>try<sp/>again<sp/>every<sp/>%d<sp/>nanoseconds.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_federate_id,<sp/><ref refid="rti_8h_1a8ce563da4edbe9c4f7c1ccf35ad8694f" kindref="member">ADDRESS_QUERY_RETRY_INTERVAL</ref>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>CONNECT_RETRY_INTERVAL<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>wait_time<sp/>=<sp/>{0L,<sp/><ref refid="rti_8h_1a8ce563da4edbe9c4f7c1ccf35ad8694f" kindref="member">ADDRESS_QUERY_RETRY_INTERVAL</ref>};</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>remaining_time;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nanosleep(&amp;wait_time,<sp/>&amp;remaining_time)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleep<sp/>was<sp/>interrupted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>was<sp/>successful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_length<sp/>=<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[buffer_length];</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/><ref refid="rti_8h_1a91cf0e11a78e0b94952a2151993fc9c2" kindref="member">P2P_SENDING_FED_ID</ref>;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8c_1a2c4180118c19ff02a0d42f4c6758bdd3" kindref="member">_lf_my_fed_id</ref><sp/>&gt;<sp/>USHRT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>error<sp/>is<sp/>very<sp/>unlikely<sp/>to<sp/>occur.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>federates!<sp/>More<sp/>than<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>USHRT_MAX);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>((<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<ref refid="util_8c_1a2c4180118c19ff02a0d42f4c6758bdd3" kindref="member">_lf_my_fed_id</ref>,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;(buffer[1]));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>federation_id_length<sp/>=<sp/>strnlen(<ref refid="rti_8c_1afb7337572879824d012d59222ea86eeb" kindref="member">federation_id</ref>,<sp/>255);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/>1]<sp/>=<sp/>federation_id_length;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0e3b7299eccba74fcd7a27f37642dc7e" kindref="member">write_to_socket_errexit</ref>(socket_id,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_length,<sp/>buffer,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>fed_id<sp/>to<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0e3b7299eccba74fcd7a27f37642dc7e" kindref="member">write_to_socket_errexit</ref>(socket_id,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>federation_id_length,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="rti_8c_1afb7337572879824d012d59222ea86eeb" kindref="member">federation_id</ref>,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>federation<sp/>id<sp/>to<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(socket_id,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)buffer,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>ACK<sp/>from<sp/>federate<sp/>%d<sp/>in<sp/>response<sp/>to<sp/>sending<sp/>fed_id.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[0]<sp/>!=<sp/><ref refid="rti_8h_1a6f6489887e08bff4887d0bc5dcf214d8" kindref="member">ACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>error<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(socket_id,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)buffer,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>error<sp/>code<sp/>from<sp/>federate<sp/>%d<sp/>in<sp/>response<sp/>to<sp/>sending<sp/>fed_id.&quot;</highlight><highlight class="normal">,<sp/>remote_federate_id);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>REJECT<sp/>message<sp/>from<sp/>remote<sp/>federate<sp/>(%d).&quot;</highlight><highlight class="normal">,<sp/>buffer[0]);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Connected<sp/>to<sp/>federate<sp/>%d,<sp/>port<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>remote_federate_id,<sp/>port);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Once<sp/>we<sp/>set<sp/>this<sp/>variable,<sp/>then<sp/>all<sp/>future<sp/>calls<sp/>to<sp/>close()<sp/>on<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>socket<sp/>ID<sp/>should<sp/>reset<sp/>it<sp/>to<sp/>-1<sp/>within<sp/>a<sp/>critical<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[remote_federate_id]<sp/>=<sp/>socket_id;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>a<sp/>thread<sp/>to<sp/>listen<sp/>for<sp/>upstream<sp/>messages<sp/>(CLOSE_REQUEST)<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>downstream<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>*<sp/>remote_fed_id_copy<sp/>=<sp/>(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remote_fed_id_copy<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;malloc<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>*remote_fed_id_copy<sp/>=<sp/>remote_federate_id;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_thread_t<sp/>thread_id;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>lf_thread_create(</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;thread_id,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1af5f3bc3822dd7bbfd67d52b91bf9d382" kindref="member">listen_for_upstream_messages_from_downstream_federates</ref>,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remote_fed_id_copy);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>to<sp/>create<sp/>a<sp/>listening<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>a<sp/>thread<sp/>to<sp/>listen<sp/>for<sp/>upstream<sp/>message.<sp/>Error<sp/>code:<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ac4fb5cd6e02f70979dd3e30310d4b2bb" kindref="member">connect_to_rti</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>hostname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Connecting<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeatedly<sp/>try<sp/>to<sp/>connect,<sp/>one<sp/>attempt<sp/>every<sp/>2<sp/>seconds,<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>either<sp/>the<sp/>program<sp/>is<sp/>killed,<sp/>the<sp/>sleep<sp/>is<sp/>interrupted,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>the<sp/>connection<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>specified<sp/>port<sp/>is<sp/>0,<sp/>set<sp/>it<sp/>instead<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>port<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>specific_port_given<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port<sp/>=<sp/><ref refid="rti_8h_1a3935567021a890f8b97f3d733ca5cfa1" kindref="member">STARTING_PORT</ref>;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specific_port_given<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_retries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>IPv4<sp/>socket<sp/>for<sp/>TCP<sp/>(not<sp/>UDP)<sp/>communication<sp/>over<sp/>IP<sp/>(0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>0);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Creating<sp/>socket<sp/>to<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hostent<sp/>*server<sp/>=<sp/>gethostbyname(hostname);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(server<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;ERROR,<sp/>no<sp/>such<sp/>host<sp/>for<sp/>RTI:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>hostname);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Server<sp/>file<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>server_fd;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>out<sp/>the<sp/>server_fd<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bzero((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;server_fd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_fd));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>server_fd<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server_fd.sin_family<sp/>=<sp/>AF_INET;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IPv4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcopy((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)server-&gt;h_addr,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;server_fd.sin_addr.s_addr,</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server-&gt;h_length);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>port<sp/>number<sp/>from<sp/>host<sp/>byte<sp/>order<sp/>to<sp/>network<sp/>byte<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server_fd.sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>connect(</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)&amp;server_fd,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_fd));</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>failed,<sp/>try<sp/>more<sp/>ports,<sp/>unless<sp/>a<sp/>specific<sp/>port<sp/>was<sp/>given.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!specific_port_given</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>port<sp/>&gt;=<sp/><ref refid="rti_8h_1a3935567021a890f8b97f3d733ca5cfa1" kindref="member">STARTING_PORT</ref></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>port<sp/>&lt;=<sp/><ref refid="rti_8h_1a3935567021a890f8b97f3d733ca5cfa1" kindref="member">STARTING_PORT</ref><sp/>+<sp/><ref refid="rti_8h_1aff81692fc67e6f7838d9d1cff402d7f6" kindref="member">PORT_RANGE_LIMIT</ref></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>connect<sp/>to<sp/>RTI<sp/>on<sp/>port<sp/>%d.<sp/>Trying<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>port,<sp/>port<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port++;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>PORT_KNOCKING_RETRY_INTERVAL<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>wait_time<sp/>=<sp/>{0L,<sp/><ref refid="rti_8h_1a98427377c5c05d575a91f0b144bf7c74" kindref="member">PORT_KNOCKING_RETRY_INTERVAL</ref>};</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>remaining_time;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nanosleep(&amp;wait_time,<sp/>&amp;remaining_time)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleep<sp/>was<sp/>interrupted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>still<sp/>failed,<sp/>try<sp/>again<sp/>with<sp/>the<sp/>original<sp/>port<sp/>after<sp/>some<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!specific_port_given<sp/>&amp;&amp;<sp/>port<sp/>==<sp/><ref refid="rti_8h_1a3935567021a890f8b97f3d733ca5cfa1" kindref="member">STARTING_PORT</ref><sp/>+<sp/><ref refid="rti_8h_1aff81692fc67e6f7838d9d1cff402d7f6" kindref="member">PORT_RANGE_LIMIT</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port<sp/>=<sp/><ref refid="rti_8h_1a3935567021a890f8b97f3d733ca5cfa1" kindref="member">STARTING_PORT</ref>;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count_retries++;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count_retries<sp/>&gt;<sp/><ref refid="rti_8h_1a0ea56eac4d92cb13df332bd6765c3601" kindref="member">CONNECT_NUM_RETRIES</ref>)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>connect<sp/>to<sp/>the<sp/>RTI<sp/>after<sp/>%d<sp/>retries.<sp/>Giving<sp/>up.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8h_1a0ea56eac4d92cb13df332bd6765c3601" kindref="member">CONNECT_NUM_RETRIES</ref>);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>connect<sp/>to<sp/>RTI<sp/>at<sp/>%s.<sp/>Will<sp/>try<sp/>again<sp/>every<sp/>%d<sp/>seconds.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hostname,<sp/><ref refid="rti_8h_1ab2106828de539188aed925f592751c12" kindref="member">CONNECT_RETRY_INTERVAL</ref>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>CONNECT_RETRY_INTERVAL<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>wait_time<sp/>=<sp/>{(time_t)<ref refid="rti_8h_1ab2106828de539188aed925f592751c12" kindref="member">CONNECT_RETRY_INTERVAL</ref>,<sp/>0L};</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>remaining_time;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nanosleep(&amp;wait_time,<sp/>&amp;remaining_time)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleep<sp/>was<sp/>interrupted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>connected<sp/>to<sp/>an<sp/>RTI,<sp/>but<sp/>not<sp/>sure<sp/>it&apos;s<sp/>the<sp/>right<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>a<sp/>FED_ID<sp/>message<sp/>and<sp/>wait<sp/>for<sp/>a<sp/>reply.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>RTI<sp/>of<sp/>the<sp/>ID<sp/>of<sp/>this<sp/>federate<sp/>and<sp/>its<sp/>federation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[4];</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Connected<sp/>to<sp/>an<sp/>RTI.<sp/>Sending<sp/>federation<sp/>ID<sp/>for<sp/>authentication.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>message<sp/>type<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/><ref refid="rti_8h_1af7370318c7e1ddead64c1a262b632c20" kindref="member">FED_ID</ref>;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>send<sp/>the<sp/>federate<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8c_1a2c4180118c19ff02a0d42f4c6758bdd3" kindref="member">_lf_my_fed_id</ref><sp/>&gt;<sp/>USHRT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>federates!<sp/>More<sp/>than<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>USHRT_MAX);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>((<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<ref refid="util_8c_1a2c4180118c19ff02a0d42f4c6758bdd3" kindref="member">_lf_my_fed_id</ref>,<sp/>&amp;buffer[1]);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>send<sp/>the<sp/>federation<sp/>ID<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>federation<sp/>ID<sp/>is<sp/>limited<sp/>to<sp/>255<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>federation_id_length<sp/>=<sp/>strnlen(<ref refid="rti_8c_1afb7337572879824d012d59222ea86eeb" kindref="member">federation_id</ref>,<sp/>255);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(federation_id_length<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0e3b7299eccba74fcd7a27f37642dc7e" kindref="member">write_to_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>2<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>),<sp/>buffer,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>federate<sp/>ID<sp/>to<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>send<sp/>the<sp/>federation<sp/>ID<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0e3b7299eccba74fcd7a27f37642dc7e" kindref="member">write_to_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>federation_id_length,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="rti_8c_1afb7337572879824d012d59222ea86eeb" kindref="member">federation_id</ref>,</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>federation<sp/>ID<sp/>to<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>a<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>response<sp/>will<sp/>be<sp/>REJECT<sp/>if<sp/>the<sp/>federation<sp/>ID<sp/>doesn&apos;t<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>it<sp/>will<sp/>be<sp/>either<sp/>ACK<sp/>or<sp/>UDP_PORT,<sp/>where<sp/>the<sp/>latter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>used<sp/>if<sp/>clock<sp/>synchronization<sp/>will<sp/>be<sp/>performed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>response;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>response<sp/>to<sp/>federation<sp/>ID<sp/>from<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>1,<sp/>&amp;response,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>response<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response<sp/>==<sp/><ref refid="rti_8h_1a835f10dd1ab4bf9a80c4cd80ee6e3058" kindref="member">REJECT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>more<sp/>byte<sp/>to<sp/>determine<sp/>the<sp/>cause<sp/>of<sp/>rejection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cause;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>1,<sp/>&amp;cause,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>the<sp/>cause<sp/>of<sp/>rejection<sp/>by<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cause<sp/>==<sp/><ref refid="rti_8h_1a653676d1f302fe08249af3dee78fa294" kindref="member">FEDERATION_ID_DOES_NOT_MATCH</ref><sp/>||<sp/>cause<sp/>==<sp/><ref refid="rti_8h_1a5a6c87886a0136b58ae5bb1d627c7ae3" kindref="member">WRONG_SERVER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Connected<sp/>to<sp/>the<sp/>wrong<sp/>RTI<sp/>on<sp/>port<sp/>%d.<sp/>Trying<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>port,<sp/>port<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port++;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;RTI<sp/>Rejected<sp/>FED_ID<sp/>message<sp/>with<sp/>response<sp/>(see<sp/>rti.h):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%d.<sp/>Error<sp/>code:<sp/>%d.<sp/>Federate<sp/>quits.\n&quot;</highlight><highlight class="normal">,<sp/>response,<sp/>cause);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response<sp/>==<sp/><ref refid="rti_8h_1a6f6489887e08bff4887d0bc5dcf214d8" kindref="member">ACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>acknowledgment<sp/>from<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref><sp/>udp_port<sp/>=<sp/><ref refid="clock-sync_8c_1aefb38f85188382621177f531f5134a89" kindref="member">setup_clock_synchronization_with_rti</ref>();</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>returned<sp/>port<sp/>number<sp/>to<sp/>the<sp/>RTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>UDP_port_number[1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)];</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UDP_port_number[0]<sp/>=<sp/><ref refid="rti_8h_1a7342deb9bd9ebf195e550e2d8e7c38b4" kindref="member">UDP_PORT</ref>;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>(udp_port,<sp/>&amp;(UDP_port_number[1]));</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0e3b7299eccba74fcd7a27f37642dc7e" kindref="member">write_to_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>),<sp/>UDP_port_number,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>the<sp/>UDP<sp/>port<sp/>number<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>unexpected<sp/>response<sp/>%u<sp/>from<sp/>the<sp/>RTI<sp/>(see<sp/>rti.h).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Connected<sp/>to<sp/>RTI<sp/>at<sp/>%s:%d.&quot;</highlight><highlight class="normal">,<sp/>hostname,<sp/>port);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/><ref refid="federate_8c_1aacc9f1bfb95d8b6c852a52832a9ecd9e" kindref="member">get_start_time_from_rti</ref>(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>my_physical_time)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>timestamp<sp/>marker<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a2c9ffe8e9c42d3c8c7e5bb170bfa6471" kindref="member">_lf_send_time</ref>(<ref refid="rti_8h_1ac59bf49f337079e65fe54acbfa21977e" kindref="member">TIMESTAMP</ref>,<sp/>my_physical_time);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>bytes<sp/>from<sp/>the<sp/>socket.<sp/>We<sp/>need<sp/>9<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>for<sp/>message<sp/>ID<sp/>plus<sp/>timestamp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_length<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[buffer_length];</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>buffer_length,<sp/>buffer,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>TIMESTAMP<sp/>message<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Read<sp/>9<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>byte<sp/>received<sp/>is<sp/>the<sp/>message<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[0]<sp/>!=<sp/><ref refid="rti_8h_1ac59bf49f337079e65fe54acbfa21977e" kindref="member">TIMESTAMP</ref>)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>TIMESTAMP<sp/>message<sp/>from<sp/>the<sp/>RTI.<sp/>Got<sp/>%u<sp/>(see<sp/>rti.h).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>timestamp<sp/>=<sp/><ref refid="net__util_8c_1a3c03766b3fd76c7ad5901581a766caa8" kindref="member">extract_ll</ref>(&amp;(buffer[1]));</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Starting<sp/>timestamp<sp/>is:<sp/>%lld.&quot;</highlight><highlight class="normal">,<sp/>timestamp);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Current<sp/>physical<sp/>time<sp/>is:<sp/>%lld.&quot;</highlight><highlight class="normal">,<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>());</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timestamp;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"></codeline>
<codeline lineno="1001"><highlight class="normal"><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port_id);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a26a55f84538e1d96832c6247d74e7da6" kindref="member">set_network_port_status</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portID,<sp/><ref refid="reactor_8h_1a759ba374f75ea0025b9af1bb35f14d7e" kindref="member">port_status_t</ref><sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>network_input_port_action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(portID);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>network_input_port_action-&gt;status<sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a07d570a16cab26d91c4b47fa5dd6ef6a" kindref="member">mark_all_unknown_ports_as_absent</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.triggers_for_network_input_control_reactions_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>input_port_action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(i);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_port_action-&gt;status<sp/>==<sp/>unknown)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a26a55f84538e1d96832c6247d74e7da6" kindref="member">set_network_port_status</ref>(i,<sp/>absent);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a943c3d7aa45a6af5b6d1567cd4ce841c" kindref="member">is_input_control_reaction_blocked</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.triggers_for_network_input_control_reactions_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>input_port_action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(i);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_port_action-&gt;is_a_control_reaction_waiting)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a0858ebda70e9bc60f76b9d2aa3df39ef" kindref="member">update_last_known_status_on_input_ports</ref>(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>notify<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.triggers_for_network_input_control_reactions_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>input_port_action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(i);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>called<sp/>when<sp/>a<sp/>TAG<sp/>is<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>it<sp/>is<sp/>possible<sp/>for<sp/>an<sp/>input<sp/>port<sp/>to<sp/>have<sp/>received<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>message<sp/>with<sp/>a<sp/>larger<sp/>tag<sp/>(if<sp/>there<sp/>is<sp/>an<sp/>after<sp/>delay<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connection),<sp/>in<sp/>which<sp/>case,<sp/>the<sp/>last<sp/>known<sp/>status<sp/>tag<sp/>of<sp/>the<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>in<sp/>the<sp/>future<sp/>and<sp/>should<sp/>not<sp/>be<sp/>rolled<sp/>back.<sp/>So<sp/>in<sp/>that<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>do<sp/>not<sp/>update<sp/>the<sp/>last<sp/>known<sp/>status<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(tag,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_port_action-&gt;last_known_status_tag)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_port_action-&gt;last_known_status_tag<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_port_action-&gt;is_a_control_reaction_waiting)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notify<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then,<sp/>check<sp/>if<sp/>any<sp/>control<sp/>reaction<sp/>is<sp/>waiting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>so,<sp/>notify<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>We<sp/>could<sp/>put<sp/>a<sp/>condition<sp/>variable<sp/>into<sp/>the<sp/>trigger_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>struct<sp/>for<sp/>each<sp/>network<sp/>input<sp/>port,<sp/>in<sp/>which<sp/>case<sp/>this<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>a<sp/>broadcast<sp/>but<sp/>rather<sp/>a<sp/>targetted<sp/>signal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notify)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>network<sp/>input<sp/>control<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;port_status_changed);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1aa9f7065af94169d68152aa9db4a15cc5" kindref="member">update_last_known_status_on_input_port</ref>(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port_id)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>input_port_action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(port_id);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(tag,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_port_action-&gt;last_known_status_tag)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_port_action-&gt;last_known_status_tag<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>control<sp/>reaction<sp/>is<sp/>waiting,<sp/>notify<sp/>them<sp/>that<sp/>the<sp/>status<sp/>has<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_port_action-&gt;is_a_control_reaction_waiting)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>known<sp/>status<sp/>tag<sp/>of<sp/>the<sp/>port<sp/>has<sp/>changed.<sp/>Notify<sp/>any<sp/>waiting<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;port_status_changed);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>update<sp/>the<sp/>last<sp/>known<sp/>status<sp/>tag<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>network<sp/>input<sp/>port<sp/>%d<sp/>to<sp/>an<sp/>earlier<sp/>tag<sp/>was<sp/>ignored.&quot;</highlight><highlight class="normal">,<sp/>port_id);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1af89b0ab26ec13c6deafeb05c3c14a88e" kindref="member">reset_status_fields_on_input_port_triggers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.triggers_for_network_input_control_reactions_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a26a55f84538e1d96832c6247d74e7da6" kindref="member">set_network_port_status</ref>(i,<sp/>unknown);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ad92ed203ebed8e9d8a3727d9b2583c56" kindref="member">mark_control_reaction_waiting</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portID,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waiting)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>network_input_port_action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(portID);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>network_input_port_action-&gt;is_a_control_reaction_waiting<sp/>=<sp/>waiting;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><ref refid="reactor_8h_1a759ba374f75ea0025b9af1bb35f14d7e" kindref="member">port_status_t</ref><sp/><ref refid="federate_8c_1a123194949f44242acbab252bc1ffed4f" kindref="member">get_current_port_status</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portID)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>status<sp/>of<sp/>the<sp/>port<sp/>is<sp/>known<sp/>at<sp/>the<sp/>current<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>network_input_port_action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(portID);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(network_input_port_action-&gt;status<sp/>==<sp/>present)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>status<sp/>of<sp/>the<sp/>trigger<sp/>is<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>present;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(network_input_port_action-&gt;status<sp/>==<sp/>absent)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>status<sp/>of<sp/>the<sp/>trigger<sp/>is<sp/>absent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absent;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(network_input_port_action-&gt;status<sp/>==<sp/>unknown</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(network_input_port_action-&gt;last_known_status_tag,<sp/><ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>())<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>a<sp/>known<sp/>status<sp/>for<sp/>this<sp/>port<sp/>in<sp/>a<sp/>future<sp/>tag.<sp/>Therefore,<sp/>no<sp/>event<sp/>is<sp/>going</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>present<sp/>for<sp/>this<sp/>port<sp/>at<sp/>the<sp/>current<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a26a55f84538e1d96832c6247d74e7da6" kindref="member">set_network_port_status</ref>(portID,<sp/>absent);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absent;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a05a9586ad89b82d0bf5f969a194ef69c" kindref="member">is_last_TAG_provisional</ref></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>,<sp/><ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>())<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,<sp/>a<sp/>PTAG<sp/>has<sp/>been<sp/>received<sp/>with<sp/>a<sp/>larger<sp/>tag<sp/>than<sp/>the<sp/>current<sp/>tag,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>means<sp/>that<sp/>the<sp/>input<sp/>port<sp/>is<sp/>known<sp/>to<sp/>be<sp/>absent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a26a55f84538e1d96832c6247d74e7da6" kindref="member">set_network_port_status</ref>(portID,<sp/>absent);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absent;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unknown;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a351f84aa3eb871fe8f51e3a6f18e67f6" kindref="member">enqueue_network_input_control_reactions</ref>(<ref refid="structpqueue__t" kindref="compound">pqueue_t</ref><sp/>*reaction_q)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.triggers_for_network_input_control_reactions_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reaction<sp/>0<sp/>should<sp/>always<sp/>be<sp/>the<sp/>network<sp/>input<sp/>control<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a123194949f44242acbab252bc1ffed4f" kindref="member">get_current_port_status</ref>(i)<sp/>==<sp/>unknown)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref><sp/>*reaction<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a8385397cd2996dbf5f79828e077926f2" kindref="member">triggers_for_network_input_control_reactions</ref>[i]-&gt;reactions[0];</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(reaction_q,<sp/>reaction)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction-&gt;is_a_control_reaction<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>network<sp/>input<sp/>control<sp/>reaction<sp/>on<sp/>reaction<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(reaction_q,<sp/>reaction);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ad92ed203ebed8e9d8a3727d9b2583c56" kindref="member">mark_control_reaction_waiting</ref>(i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a58c068ed5637620f62d0be0da850bbc3" kindref="member">enqueue_network_output_control_reactions</ref>(<ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>reaction_q){</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Enqueueing<sp/>output<sp/>control<sp/>reactions.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a786701f771e06e14c369be4b0a6519b5" kindref="member">trigger_for_network_output_control_reactions</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>no<sp/>network<sp/>output<sp/>control<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>output<sp/>control<sp/>reactions.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a786701f771e06e14c369be4b0a6519b5" kindref="member">trigger_for_network_output_control_reactions</ref>-&gt;number_of_reactions;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>reaction<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a786701f771e06e14c369be4b0a6519b5" kindref="member">trigger_for_network_output_control_reactions</ref>-&gt;reactions[i];</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(reaction_q,<sp/>reaction)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction-&gt;is_a_control_reaction<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>network<sp/>output<sp/>control<sp/>reaction<sp/>on<sp/>reaction<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(reaction_q,<sp/>reaction);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ae3810deff6321784705bf27c79a07d32" kindref="member">enqueue_network_control_reactions</ref>(<ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>reaction_q)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>granted<sp/>tag<sp/>is<sp/>not<sp/>provisional,<sp/>there<sp/>is<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>for<sp/>network<sp/>control<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>,<sp/><ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>())<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a05a9586ad89b82d0bf5f969a194ef69c" kindref="member">is_last_TAG_provisional</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a351f84aa3eb871fe8f51e3a6f18e67f6" kindref="member">enqueue_network_input_control_reactions</ref>(reaction_q);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a58c068ed5637620f62d0be0da850bbc3" kindref="member">enqueue_network_output_control_reactions</ref>(reaction_q);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a4a188ed34f9cf3a6d2ede7a033089bdd" kindref="member">send_port_absent_to_federate</ref>(<ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>additional_delay,</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port_ID,<sp/></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>fed_ID)<sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>message_length<sp/>=<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(port_ID)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(fed_ID)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref>);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[message_length];</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>logical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>current_message_timestamp<sp/>=<sp/><ref refid="tag_8c_1a9da5960071964c9c2bdb602526da0565" kindref="member">get_logical_time</ref>();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>are<sp/>getting<sp/>the<sp/>microstep<sp/>here<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>assumption<sp/>that<sp/>it<sp/>does<sp/>not<sp/>change<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>is<sp/>executing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref><sp/>current_message_microstep<sp/>=<sp/><ref refid="tag_8c_1af413f18a3d52672f4ba984cc92e4efe5" kindref="member">get_microstep</ref>();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(additional_delay<sp/>==<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>was<sp/>specified<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>connection<sp/>with<sp/>a<sp/>delay<sp/>of<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tag<sp/>of<sp/>the<sp/>outgoing<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>(get_logical_time(),<sp/>get_microstep()<sp/>+<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_microstep<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(additional_delay<sp/>&gt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>was<sp/>specified<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>connection<sp/>with<sp/>a<sp/>positive<sp/>delay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tag<sp/>of<sp/>the<sp/>outgoing<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>(get_logical_time()<sp/>+<sp/>additional_delay,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_timestamp<sp/>+=<sp/>additional_delay;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_microstep<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(additional_delay<sp/>==<sp/>-1LL)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>after<sp/>delay<sp/>is<sp/>given<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tag<sp/>of<sp/>the<sp/>outgoing<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>(get_logical_time(),<sp/>get_microstep())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>port<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;absent<sp/>for<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>for<sp/>port<sp/>%d<sp/>to<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_timestamp<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_message_microstep,</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port_ID,<sp/>fed_ID);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/><ref refid="rti_8h_1a82ec41cec8ce47732562301bd2155e54" kindref="member">PORT_ABSENT</ref>;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>(port_ID,<sp/>&amp;(buffer[1]));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ac91e6a5450e934d80281f626ba25deaa" kindref="member">encode_ushort</ref>(fed_ID,<sp/>&amp;(buffer[1+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(port_ID)]));</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a0b8cbad5d6dc462c87eb48c6a5519c33" kindref="member">encode_ll</ref>(current_message_timestamp,<sp/>&amp;(buffer[1+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(port_ID)+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(fed_ID)]));</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1af4312040e137fb9d644f96edaa74075d" kindref="member">encode_int</ref>(current_message_microstep,<sp/>&amp;(buffer[1+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(port_ID)+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(fed_ID)+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)]));</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>absent<sp/>message<sp/>through<sp/>the<sp/>RTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>absent<sp/>message<sp/>directly<sp/>to<sp/>the<sp/>federate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9e1cde7330bec95f787bb7a85d509c9a" kindref="member">sockets_for_outbound_p2p_connections</ref>[fed_ID];</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>write<sp/>if<sp/>the<sp/>socket<sp/>is<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(socket<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae819deb7254b390e29a1808625acf70f" kindref="member">write_to_socket_errexit_with_mutex</ref>(socket,<sp/>message_length,<sp/>buffer,<sp/>&amp;outbound_socket_mutex,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>port<sp/>absent<sp/>message<sp/>for<sp/>port<sp/>%hu<sp/>to<sp/>federate<sp/>%hu.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port_ID,<sp/>fed_ID);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1af4e0b0634806dadc6bda729c63dc700f" kindref="member">wait_until_port_status_known</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port_ID,<sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>STP)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>lock<sp/>the<sp/>mutex<sp/>to<sp/>prevent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>race<sp/>condition<sp/>with<sp/>the<sp/>network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>receiver<sp/>logic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>the<sp/>port<sp/>status<sp/>is<sp/>already<sp/>known.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a123194949f44242acbab252bc1ffed4f" kindref="member">get_current_port_status</ref>(port_ID)<sp/>!=<sp/>unknown)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>status<sp/>of<sp/>the<sp/>trigger<sp/>is<sp/>known.<sp/>No<sp/>need<sp/>to<sp/>wait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;------<sp/>Not<sp/>waiting<sp/>for<sp/>network<sp/>input<sp/>port<sp/>%d:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Status<sp/>of<sp/>the<sp/>port<sp/>is<sp/>known<sp/>already.&quot;</highlight><highlight class="normal">,<sp/>port_ID);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ad92ed203ebed8e9d8a3727d9b2583c56" kindref="member">mark_control_reaction_waiting</ref>(port_ID,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>wait<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>centralized<sp/>coordination,<sp/>the<sp/>wait<sp/>time<sp/>is<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>RTI<sp/>can<sp/>determine<sp/>the<sp/>port<sp/>status<sp/>and<sp/>send<sp/>a<sp/>TAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replacing<sp/>the<sp/>PTAG<sp/>it<sp/>sent<sp/>earlier<sp/>or<sp/>until<sp/>a<sp/>port<sp/>absent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>message<sp/>has<sp/>been<sp/>sent<sp/>by<sp/>an<sp/>upstream<sp/>federate<sp/>for<sp/>this<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>tag<sp/>greater<sp/>than<sp/>the<sp/>current<sp/>tag.<sp/>The<sp/>federate<sp/>will<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>here<sp/>FOREVER,<sp/>until<sp/>one<sp/>of<sp/>the<sp/>aforementioned<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conditions<sp/>is<sp/>met.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>wait_until_time<sp/>=<sp/>FOREVER;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED<sp/>//<sp/>Only<sp/>applies<sp/>to<sp/>decentralized<sp/>coordination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>wait<sp/>time<sp/>for<sp/>port<sp/>status<sp/>in<sp/>the<sp/>decentralized<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coordination<sp/>is<sp/>capped<sp/>by<sp/>the<sp/>STP<sp/>offset<sp/>assigned<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>wait_until_time<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>+<sp/>STP;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>the<sp/>wait,<sp/>unless<sp/>the<sp/>STP<sp/>is<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wait_until_time<sp/>!=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;------<sp/>Waiting<sp/>until<sp/>time<sp/>%lldns<sp/>for<sp/>network<sp/>input<sp/>port<sp/>%d<sp/>at<sp/>tag<sp/>(%llu,<sp/>%d).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_until_time,</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port_ID,</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!wait_until(wait_until_time,<sp/>&amp;port_status_changed))<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interrupted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;------<sp/>Wait<sp/>for<sp/>network<sp/>input<sp/>port<sp/>%d<sp/>interrupted.&quot;</highlight><highlight class="normal">,<sp/>port_ID);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>status<sp/>of<sp/>the<sp/>port<sp/>is<sp/>known</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a123194949f44242acbab252bc1ffed4f" kindref="member">get_current_port_status</ref>(port_ID)<sp/>!=<sp/>unknown)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>status<sp/>of<sp/>the<sp/>trigger<sp/>is<sp/>known.<sp/>No<sp/>need<sp/>to<sp/>wait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;------<sp/>Done<sp/>waiting<sp/>for<sp/>network<sp/>input<sp/>port<sp/>%d:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Status<sp/>of<sp/>the<sp/>port<sp/>has<sp/>changed.&quot;</highlight><highlight class="normal">,<sp/>port_ID);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ad92ed203ebed8e9d8a3727d9b2583c56" kindref="member">mark_control_reaction_waiting</ref>(port_ID,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>In<sp/>centralized<sp/>coordination,<sp/>cannot<sp/>reach<sp/>this<sp/>point<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>wait_until<sp/>is<sp/>called<sp/>with<sp/>FOREVER,<sp/>so<sp/>the<sp/>while<sp/>loop<sp/>above<sp/>exits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>when<sp/>the<sp/>port<sp/>becomes<sp/>known.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED<sp/>//<sp/>Only<sp/>applies<sp/>in<sp/>decentralized<sp/>coordination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>wait<sp/>has<sp/>timed<sp/>out.<sp/>However,<sp/>a<sp/>message<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>current<sp/>tag<sp/>could<sp/>have<sp/>been<sp/>received<sp/>in<sp/>time<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>the<sp/>the<sp/>body<sp/>of<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>on<sp/>the<sp/>tag<sp/>barrier<sp/>based<sp/>on<sp/>the<sp/>current<sp/>tag.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_wait_on_global_tag_barrier(<ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>());</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Done<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>status<sp/>of<sp/>the<sp/>port<sp/>is<sp/>still<sp/>unknown,<sp/>assume<sp/>it<sp/>is<sp/>absent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a123194949f44242acbab252bc1ffed4f" kindref="member">get_current_port_status</ref>(port_ID)<sp/>==<sp/>unknown)<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Port<sp/>will<sp/>not<sp/>be<sp/>triggered<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>logical<sp/>time.<sp/>Set<sp/>the<sp/>absent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>the<sp/>trigger<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>the<sp/>receiving<sp/>logic<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>any<sp/>further<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a26a55f84538e1d96832c6247d74e7da6" kindref="member">set_network_port_status</ref>(port_ID,<sp/>absent);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ad92ed203ebed8e9d8a3727d9b2583c56" kindref="member">mark_control_reaction_waiting</ref>(port_ID,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;------<sp/>Done<sp/>waiting<sp/>for<sp/>network<sp/>input<sp/>port<sp/>%d:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Wait<sp/>timed<sp/>out<sp/>without<sp/>a<sp/>port<sp/>status<sp/>change.&quot;</highlight><highlight class="normal">,<sp/>port_ID);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"></codeline>
<codeline lineno="1413"><highlight class="normal"><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/><ref refid="federate_8c_1a1f1332f247555c60e142c03189a34dff" kindref="member">schedule_message_received_from_network_already_locked</ref>(</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger,</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag,</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>value<sp/>of<sp/>the<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Indicates<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>intended<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>message<sp/>(timestamp,<sp/>microstep)<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>future<sp/>relative<sp/>to<sp/>the<sp/>tag<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>federate.<sp/>By<sp/>default,<sp/>assume<sp/>it<sp/>is<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>message_tag_is_in_the_future<sp/>=<sp/><ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(tag,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>the<sp/>intended<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger-&gt;intended_tag<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>extra_delay<sp/>required<sp/>to<sp/>be<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>schedule<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>extra_delay<sp/>=<sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!message_tag_is_in_the_future)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>coordination<sp/>is<sp/>centralized,<sp/>receiving<sp/>a<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>carry<sp/>a<sp/>timestamp<sp/>that<sp/>is<sp/>in<sp/>the<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>would<sp/>indicate<sp/>a<sp/>critical<sp/>condition,<sp/>showing<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>advance<sp/>mechanism<sp/>is<sp/>not<sp/>working<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>a<sp/>message<sp/>at<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>that&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>a<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>that<sp/>has<sp/>violated<sp/>the<sp/>STP<sp/>offset.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Centralized<sp/>coordination<sp/>should<sp/>not<sp/>have<sp/>these<sp/>types<sp/>of<sp/>messages.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="tag_8c_1af413f18a3d52672f4ba984cc92e4efe5" kindref="member">get_microstep</ref>(),</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>tag.microstep);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>delay<sp/>back<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_delay<sp/>=<sp/>0LL;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Calling<sp/>schedule<sp/>with<sp/>0<sp/>delay<sp/>and<sp/>intended<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger-&gt;intended_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger-&gt;intended_tag.microstep);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_value<sp/>=<sp/><ref refid="reactor_8h_1a1b914dafd583948c817b0ae6ce739b6d" kindref="member">__schedule</ref>(trigger,<sp/>extra_delay,<sp/>token);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>the<sp/>message<sp/>is<sp/>in<sp/>the<sp/>future,<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_lf_schedule_at_tag()<sp/>so<sp/>that<sp/>the<sp/>microstep<sp/>is<sp/>respected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>a<sp/>message<sp/>that<sp/>is<sp/>(%lld<sp/>nanoseconds,<sp/>%u<sp/>microsteps)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>the<sp/>future.&quot;</highlight><highlight class="normal">,<sp/>extra_delay,<sp/>tag.microstep<sp/>-<sp/><ref refid="tag_8c_1af413f18a3d52672f4ba984cc92e4efe5" kindref="member">get_microstep</ref>());</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_value<sp/>=<sp/><ref refid="reactor_8h_1af1f3a3c4613102e28fc0105408731c5e" kindref="member">_lf_schedule_at_tag</ref>(trigger,<sp/>tag,<sp/>token);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>main<sp/>thread<sp/>in<sp/>case<sp/>it<sp/>is<sp/>waiting<sp/>for<sp/>physical<sp/>time<sp/>to<sp/>elapse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Broadcasting<sp/>notification<sp/>that<sp/>event<sp/>queue<sp/>changed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_value;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ad48351e45d74393e322780dfeabad776" kindref="member">_lf_request_close_inbound_socket</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fed_id)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fed_id<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>fed_id<sp/>&lt;<sp/>NUMBER_OF_FEDERATES);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[fed_id]<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>a<sp/>CLOSE_REQUEST<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message_marker<sp/>=<sp/><ref refid="rti_8h_1a4bb77849ca928a2744185ed37697bfd9" kindref="member">CLOSE_REQUEST</ref>;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>CLOSE_REQUEST<sp/>message<sp/>to<sp/>upstream<sp/>federate.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>written<sp/>=<sp/><ref refid="net__util_8c_1ae9bab7965862259f354a419e4140b564" kindref="member">write_to_socket</ref>(</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[fed_id],</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>&amp;message_marker);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[fed_id]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(written<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sent<sp/>CLOSE_REQUEST<sp/>message<sp/>to<sp/>upstream<sp/>federate.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a89f25989edc5bf8e0c8bf46efe9310d0" kindref="member">_lf_close_inbound_socket</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fed_id)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fed_id<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>socket<sp/>connection<sp/>is<sp/>to<sp/>the<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>set<sp/>the<sp/>global<sp/>socket<sp/>to<sp/>-1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>shutdown<sp/>and<sp/>close<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shutdown(socket,<sp/>SHUT_RDWR);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(socket);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[fed_id]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shutdown(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[fed_id],<sp/>SHUT_RDWR);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[fed_id]);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[fed_id]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a3a5875ee5db1e60f40b6dd8c98f3eec3" kindref="member">handle_port_absent_message</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fed_id)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref>);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_read];</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(socket,<sp/>bytes_to_read,<sp/>buffer,</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>port<sp/>absent<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>header<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port_id<sp/>=<sp/><ref refid="net__util_8c_1ab52445dc6792e1d40424c4e0edc18704" kindref="member">extract_ushort</ref>(buffer);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>part<sp/>of<sp/>the<sp/>message<sp/>is<sp/>the<sp/>federate_id,<sp/>but<sp/>we<sp/>don&apos;t<sp/>need<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unsigned<sp/>short<sp/>federate_id<sp/>=<sp/>extract_ushort(&amp;(buffer[sizeof(ushort)]));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>intended_tag;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>intended_tag.time<sp/>=<sp/><ref refid="net__util_8c_1a3c03766b3fd76c7ad5901581a766caa8" kindref="member">extract_ll</ref>(&amp;(buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)]));</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>intended_tag.microstep<sp/>=<sp/><ref refid="net__util_8c_1a2c3e1559ae8f31e111cedc00211edded" kindref="member">extract_int</ref>(&amp;(buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)]));<sp/></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Handling<sp/>port<sp/>absent<sp/>for<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>for<sp/>port<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.microstep,</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port_id,<sp/></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fed_id</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>network_input_port_action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(port_id);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(intended_tag,</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network_input_port_action-&gt;last_known_status_tag)<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;The<sp/>following<sp/>contract<sp/>was<sp/>violated<sp/>for<sp/>port<sp/>absent<sp/>messages:<sp/>In-order<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;delivery<sp/>of<sp/>messages<sp/>over<sp/>a<sp/>TCP<sp/>socket.<sp/>Had<sp/>status<sp/>for<sp/>(%lld,<sp/>%u),<sp/>got<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;port<sp/>absent<sp/>with<sp/>intended<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network_input_port_action-&gt;last_known_status_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network_input_port_action-&gt;last_known_status_tag.microstep,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.microstep);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>In<sp/>centralized<sp/>coordination,<sp/>a<sp/>TAG<sp/>message<sp/>from<sp/>the<sp/>RTI<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>set<sp/>the<sp/>last_known_status_tag<sp/>to<sp/>a<sp/>future<sp/>tag<sp/>where<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>not<sp/>arrived<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>mutex<sp/>status<sp/>as<sp/>absent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1aa9f7065af94169d68152aa9db4a15cc5" kindref="member">update_last_known_status_on_input_port</ref>(intended_tag,<sp/>port_id);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a8a059641cbcf0e192594ea898cd09983" kindref="member">handle_message</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fed_id)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Need<sp/>better<sp/>error<sp/>handling?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_read];</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(socket,<sp/>bytes_to_read,<sp/>buffer,</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>message<sp/>header.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>header<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port_id;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>federate_id;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a11217be2cfd106df54dfab0c53218238" kindref="member">extract_header</ref>(buffer,<sp/>&amp;port_id,<sp/>&amp;federate_id,<sp/>&amp;length);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>message<sp/>is<sp/>intended<sp/>for<sp/>this<sp/>federate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="util_8c_1a2c4180118c19ff02a0d42f4c6758bdd3" kindref="member">_lf_my_fed_id</ref><sp/>==<sp/>federate_id);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Receiving<sp/>message<sp/>to<sp/>port<sp/>%d<sp/>of<sp/>length<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>port_id,<sp/>length);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>triggering<sp/>action<sp/>for<sp/>the<sp/>corerponding<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(port_id);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>message<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message_contents<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(length);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(socket,<sp/>length,<sp/>message_contents,</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>message<sp/>body.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Message<sp/>received<sp/>by<sp/>federate:<sp/>%s.<sp/>Length:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>message_contents,<sp/>length);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Calling<sp/>schedule<sp/>for<sp/>message<sp/>received<sp/>on<sp/>a<sp/>physical<sp/>connection.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1aa0a09f1dc9ee5870a6d225a3569388df" kindref="member">_lf_schedule_value</ref>(&amp;action,<sp/>0,<sp/>message_contents,<sp/>length);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a79c416c42bbbfb8d65af0b78e6ce31c4" kindref="member">handle_timed_message</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fed_id)<sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Need<sp/>better<sp/>error<sp/>handling?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>header<sp/>which<sp/>contains<sp/>the<sp/>timestamp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref>);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_read];</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(socket,<sp/>bytes_to_read,<sp/>buffer,</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>timed<sp/>message<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>header<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>port_id;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>federate_id;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>intended_tag;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a3e9fc45154c83606a54f358e4978b489" kindref="member">extract_timed_header</ref>(buffer,<sp/>&amp;port_id,<sp/>&amp;federate_id,<sp/>&amp;length,<sp/>&amp;intended_tag);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>message<sp/>is<sp/>intended<sp/>for<sp/>this<sp/>federate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="util_8c_1a2c4180118c19ff02a0d42f4c6758bdd3" kindref="member">_lf_my_fed_id</ref><sp/>==<sp/>federate_id);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Receiving<sp/>message<sp/>to<sp/>port<sp/>%d<sp/>of<sp/>length<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>port_id,<sp/>length);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>triggering<sp/>action<sp/>for<sp/>the<sp/>corerponding<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>action<sp/>=<sp/><ref refid="federate_8c_1a7754be26c0ad41c264f391253cf03ecd" kindref="member">__action_for_port</ref>(port_id);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>physical<sp/>time<sp/>of<sp/>arrival<sp/>of<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>action-&gt;physical_time_of_arrival<sp/>=<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>();</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action-&gt;is_physical)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Messages<sp/>sent<sp/>on<sp/>physical<sp/>connections<sp/>should<sp/>be<sp/>handled<sp/>via<sp/>handle_message().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>a<sp/>timed<sp/>message<sp/>on<sp/>a<sp/>physical<sp/>connection.<sp/>Time<sp/>stamp<sp/>will<sp/>be<sp/>lost.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED<sp/>//<sp/>Only<sp/>applicable<sp/>for<sp/>federated<sp/>programs<sp/>with<sp/>decentralized<sp/>coordination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>logical<sp/>connections<sp/>in<sp/>decentralized<sp/>coordination,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>the<sp/>barrier<sp/>to<sp/>prevent<sp/>advancement<sp/>of<sp/>tag<sp/>beyond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>received<sp/>tag<sp/>if<sp/>possible.<sp/>The<sp/>following<sp/>function<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>suggests<sp/>that<sp/>the<sp/>tag<sp/>barrier<sp/>be<sp/>raised<sp/>to<sp/>the<sp/>tag<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>message.<sp/>If<sp/>this<sp/>tag<sp/>is<sp/>in<sp/>the<sp/>past,<sp/>the<sp/>function<sp/>will<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tag<sp/>to<sp/>freeze<sp/>at<sp/>the<sp/>current<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>something<sp/>happens,<sp/>make<sp/>sure<sp/>to<sp/>release<sp/>the<sp/>barrier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_increment_global_tag_barrier(intended_tag);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>message<sp/>with<sp/>tag:<sp/>(%lld,<sp/>%u),<sp/>Current<sp/>tag:<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>intended_tag.microstep,<sp/><ref refid="tag_8c_1a23e91eb69aca986b03aba4ce86923102" kindref="member">get_elapsed_logical_time</ref>(),<sp/><ref refid="tag_8c_1af413f18a3d52672f4ba984cc92e4efe5" kindref="member">get_microstep</ref>());</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>message<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message_contents<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(length);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(socket,<sp/>length,<sp/>message_contents,</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>message<sp/>body.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>is<sp/>only<sp/>valid<sp/>for<sp/>string<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DEBUG_PRINT(&quot;Message<sp/>received:<sp/>%s.&quot;,<sp/>message_contents);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>token<sp/>for<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>message_token<sp/>=<sp/><ref refid="reactor_8h_1a9d8ea5bc3ac4d18edafab309bc2a9c8a" kindref="member">create_token</ref>(action-&gt;element_size);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>message_token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref><sp/>=<sp/>message_contents;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>message_token-&gt;<ref refid="structlf__token__t_1aa907a3d0901bd1ae3ab88fecb8dc11e5" kindref="member">length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(intended_tag,</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action-&gt;last_known_status_tag)<sp/>&lt;=<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;The<sp/>following<sp/>contract<sp/>was<sp/>violated<sp/>for<sp/>a<sp/>timed<sp/>message:<sp/>In-order<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;delivery<sp/>of<sp/>messages<sp/>over<sp/>a<sp/>TCP<sp/>socket.<sp/>Had<sp/>status<sp/>for<sp/>(%lld,<sp/>%u),<sp/>got<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;timed<sp/>message<sp/>with<sp/>intended<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action-&gt;last_known_status_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action-&gt;last_known_status_tag.microstep,</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.microstep);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>In<sp/>centralized<sp/>coordination,<sp/>a<sp/>TAG<sp/>message<sp/>from<sp/>the<sp/>RTI<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>set<sp/>the<sp/>last_known_status_tag<sp/>to<sp/>a<sp/>future<sp/>tag<sp/>where<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>not<sp/>arrived<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action-&gt;is_a_control_reaction_waiting<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__advancing_time)<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Federate<sp/>was<sp/>attempting<sp/>to<sp/>advance<sp/>time<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;while<sp/>control<sp/>reactions<sp/>are<sp/>still<sp/>present.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>It<sp/>might<sp/>be<sp/>enough<sp/>to<sp/>just<sp/>check<sp/>this<sp/>field<sp/>and<sp/>not<sp/>the<sp/>status<sp/>at<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1aa9f7065af94169d68152aa9db4a15cc5" kindref="member">update_last_known_status_on_input_port</ref>(intended_tag,<sp/>port_id);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>reactions<sp/>need<sp/>to<sp/>be<sp/>inserted<sp/>directly<sp/>into<sp/>the<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>queue<sp/>or<sp/>a<sp/>call<sp/>to<sp/>schedule<sp/>is<sp/>needed.<sp/>This<sp/>checks<sp/>if<sp/>the<sp/>intended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag<sp/>of<sp/>the<sp/>message<sp/>is<sp/>for<sp/>the<sp/>current<sp/>tag<sp/>or<sp/>a<sp/>tag<sp/>that<sp/>is<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>passed<sp/>and<sp/>if<sp/>any<sp/>control<sp/>reaction<sp/>is<sp/>waiting<sp/>on<sp/>this<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>tag<sp/>is<sp/>intended<sp/>for<sp/>a<sp/>tag<sp/>that<sp/>is<sp/>passed,<sp/>the<sp/>control<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>would<sp/>need<sp/>to<sp/>exit<sp/>because<sp/>only<sp/>one<sp/>message<sp/>can<sp/>be<sp/>processed<sp/>per<sp/>tag,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>that<sp/>message<sp/>is<sp/>going<sp/>to<sp/>be<sp/>a<sp/>tardy<sp/>message.<sp/>The<sp/>actual<sp/>tardiness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handling<sp/>is<sp/>done<sp/>inside<sp/>_lf_insert_reactions_for_trigger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>prevent<sp/>multiple<sp/>procesing<sp/>of<sp/>messages<sp/>per<sp/>tag,<sp/>we<sp/>also<sp/>need<sp/>to<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>port<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>there<sp/>could<sp/>be<sp/>a<sp/>case<sp/>where<sp/>current<sp/>tag<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>10<sp/>with<sp/>a<sp/>control<sp/>reaction<sp/>waiting,<sp/>and<sp/>a<sp/>message<sp/>has<sp/>arrived<sp/>with<sp/>intended_tag<sp/>8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>message<sp/>will<sp/>eventually<sp/>cause<sp/>the<sp/>control<sp/>reaction<sp/>to<sp/>exit,<sp/>but<sp/>before<sp/>that,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>message<sp/>with<sp/>intended_tag<sp/>of<sp/>9<sp/>could<sp/>arrive<sp/>before<sp/>the<sp/>control<sp/>reaction<sp/>has<sp/>had<sp/>a<sp/>chance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>exit.<sp/>The<sp/>port<sp/>status<sp/>is<sp/>on<sp/>the<sp/>other<sp/>hand<sp/>changed<sp/>in<sp/>this<sp/>thread,<sp/>and<sp/>thus,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>checked<sp/>in<sp/>this<sp/>scenario<sp/>without<sp/>this<sp/>race<sp/>condition.<sp/>The<sp/>message<sp/>with<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intended_tag<sp/>of<sp/>9<sp/>in<sp/>this<sp/>case<sp/>needs<sp/>to<sp/>wait<sp/>one<sp/>microstep<sp/>to<sp/>be<sp/>processed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(intended_tag,<sp/><ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>())<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action-&gt;is_a_control_reaction_waiting<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>a<sp/>control<sp/>reaction<sp/>is<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action-&gt;status<sp/>==<sp/>unknown<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>status<sp/>of<sp/>the<sp/>port<sp/>is<sp/>still<sp/>unknown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>message<sp/>is<sp/>intended<sp/>for<sp/>the<sp/>current<sp/>tag<sp/>and<sp/>a<sp/>control<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>waiting<sp/>for<sp/>the<sp/>message,<sp/>trigger<sp/>the<sp/>corresponding<sp/>reactions<sp/>for<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>reactions<sp/>directly<sp/>at<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,<sp/>intended_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>intended_tag.microstep);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action-&gt;intended_tag<sp/>=<sp/>intended_tag;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_insert_reactions_for_trigger(action,<sp/>message_token);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>status<sp/>of<sp/>the<sp/>port<sp/>as<sp/>present<sp/>here<sp/>to<sp/>inform<sp/>the<sp/>network<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>control<sp/>reactions<sp/>know<sp/>that<sp/>they<sp/>no<sp/>longer<sp/>need<sp/>to<sp/>block.<sp/>The<sp/>reason<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>because<sp/>the<sp/>network<sp/>receiver<sp/>reaction<sp/>is<sp/>now<sp/>in<sp/>the<sp/>reaction<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keeping<sp/>the<sp/>precedence<sp/>order<sp/>intact.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a26a55f84538e1d96832c6247d74e7da6" kindref="member">set_network_port_status</ref>(port_id,<sp/>present);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Port<sp/>is<sp/>now<sp/>present.<sp/>Therefore,<sp/>notify<sp/>the<sp/>network<sp/>input<sp/>control<sp/>reactions<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>waiting<sp/>and<sp/>re-check<sp/>the<sp/>port<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;port_status_changed);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>main<sp/>thread<sp/>in<sp/>case<sp/>it<sp/>is<sp/>waiting<sp/>for<sp/>reactions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Broadcasting<sp/>notification<sp/>that<sp/>reaction<sp/>queue<sp/>changed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;reaction_q_changed);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>control<sp/>reaction<sp/>is<sp/>waiting<sp/>for<sp/>this<sp/>message,<sp/>or<sp/>if<sp/>the<sp/>intended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag<sp/>is<sp/>in<sp/>the<sp/>future,<sp/>use<sp/>schedule<sp/>functions<sp/>to<sp/>process<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Before<sp/>that,<sp/>if<sp/>the<sp/>current<sp/>time<sp/>&gt;=<sp/>stop<sp/>time,<sp/>discard<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>only<sp/>if<sp/>the<sp/>stop<sp/>time<sp/>is<sp/>not<sp/>equal<sp/>to<sp/>the<sp/>start<sp/>time!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>,<sp/>stop_tag)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>message<sp/>too<sp/>late.<sp/>Already<sp/>at<sp/>stopping<sp/>time.<sp/>Discarding<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Calling<sp/>schedule<sp/>with<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,<sp/>intended_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>intended_tag.microstep);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a1f1332f247555c60e142c03189a34dff" kindref="member">schedule_message_received_from_network_already_locked</ref>(action,<sp/>intended_tag,<sp/>message_token);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED<sp/>//<sp/>Only<sp/>applicable<sp/>for<sp/>federated<sp/>programs<sp/>with<sp/>decentralized<sp/>coordination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>decrement<sp/>the<sp/>barrier<sp/>to<sp/>allow<sp/>the<sp/>execution<sp/>to<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>past<sp/>the<sp/>raised<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_decrement_global_tag_barrier_locked();</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mutex<sp/>is<sp/>unlocked<sp/>here<sp/>after<sp/>the<sp/>barrier<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>logical<sp/>time<sp/>has<sp/>been<sp/>removed<sp/>to<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>need<sp/>for<sp/>unecessary<sp/>lock<sp/>and<sp/>unlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a7853e005f220474d4ce35be7a6560b2f" kindref="member">handle_tag_advance_grant</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref>);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_read];</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>bytes_to_read,<sp/>buffer,</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>tag<sp/>advance<sp/>grant<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>TAG;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>TAG.time<sp/>=<sp/><ref refid="net__util_8c_1a3c03766b3fd76c7ad5901581a766caa8" kindref="member">extract_ll</ref>(buffer);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>TAG.microstep<sp/>=<sp/><ref refid="net__util_8c_1a2c3e1559ae8f31e111cedc00211edded" kindref="member">extract_int</ref>(&amp;(buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)]));</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>last<sp/>known<sp/>status<sp/>tag<sp/>of<sp/>all<sp/>network<sp/>input<sp/>ports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>TAG<sp/>received<sp/>from<sp/>the<sp/>RTI.<sp/>Here<sp/>we<sp/>assume<sp/>that<sp/>the<sp/>RTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>knows<sp/>the<sp/>status<sp/>of<sp/>network<sp/>ports<sp/>up<sp/>to<sp/>and<sp/>including<sp/>the<sp/>granted<sp/>tag,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>by<sp/>extension,<sp/>we<sp/>assume<sp/>that<sp/>the<sp/>federate<sp/>can<sp/>safely<sp/>rely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>RTI<sp/>to<sp/>handle<sp/>port<sp/>statuses<sp/>up<sp/>until<sp/>the<sp/>granted<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a0858ebda70e9bc60f76b9d2aa3df39ef" kindref="member">update_last_known_status_on_input_ports</ref>(TAG);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>possible<sp/>for<sp/>this<sp/>federate<sp/>to<sp/>have<sp/>received<sp/>a<sp/>PTAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>earlier<sp/>with<sp/>the<sp/>same<sp/>tag<sp/>as<sp/>this<sp/>TAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(TAG,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.time<sp/>=<sp/>TAG.time;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.microstep<sp/>=<sp/>TAG.microstep;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a05a9586ad89b82d0bf5f969a194ef69c" kindref="member">is_last_TAG_provisional</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>Time<sp/>Advance<sp/>Grant<sp/>(TAG):<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.microstep);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>a<sp/>TAG<sp/>(%lld,<sp/>%u)<sp/>that<sp/>wasn&apos;t<sp/>larger<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;than<sp/>the<sp/>previous<sp/>TAG<sp/>or<sp/>PTAG<sp/>(%lld,<sp/>%u).<sp/>Ignoring<sp/>the<sp/>TAG.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TAG.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>TAG.microstep,</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.microstep);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9812f0499dda0efd9f2718981be2e905" kindref="member">waiting_for_TAG</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>everything<sp/>that<sp/>is<sp/>blocked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a77aa8325df62cb64364fb8af6b1c2334" kindref="member">_lf_logical_tag_complete</ref>(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag_to_send)<sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare_with_last_tag<sp/>=<sp/><ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1ae95f54a01b0367048faa6460ff86e987" kindref="member">last_sent_LTC</ref>,<sp/>tag_to_send);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare_with_last_tag<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>Logical<sp/>Time<sp/>Complete<sp/>(LTC)<sp/>(%lld,<sp/>%u)<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag_to_send.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag_to_send.microstep);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1aa894b9efe5e8be30222d2d34b1c8c2be" kindref="member">_lf_send_tag</ref>(<ref refid="rti_8h_1a5c99fcbbcca0bf2d2ca961d769f2fbb1" kindref="member">LOGICAL_TAG_COMPLETE</ref>,<sp/>tag_to_send);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1ae95f54a01b0367048faa6460ff86e987" kindref="member">last_sent_LTC</ref><sp/>=<sp/>tag_to_send;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ab1d3825f70289972e7f2ab9fed3b24f4" kindref="member">handle_provisional_tag_advance_grant</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref>);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_read];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>bytes_to_read,<sp/>buffer,</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>provisional<sp/>tag<sp/>advance<sp/>grant<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>PTAG;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>PTAG.time<sp/>=<sp/><ref refid="net__util_8c_1a3c03766b3fd76c7ad5901581a766caa8" kindref="member">extract_ll</ref>(buffer);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>PTAG.microstep<sp/>=<sp/><ref refid="net__util_8c_1a2c3e1559ae8f31e111cedc00211edded" kindref="member">extract_int</ref>(&amp;(buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)]));</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>it<sp/>is<sp/>important<sp/>that<sp/>last_known_status_tag<sp/>of<sp/>ports<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>updated<sp/>to<sp/>a<sp/>PTAG<sp/>value<sp/>because<sp/>a<sp/>PTAG<sp/>does<sp/>not<sp/>indicate<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>RTI<sp/>knows<sp/>about<sp/>the<sp/>status<sp/>of<sp/>all<sp/>ports<sp/>up<sp/>to<sp/>and<sp/>_including_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>of<sp/>PTAG.<sp/>Only<sp/>a<sp/>TAG<sp/>message<sp/>indicates<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(PTAG,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>)<sp/>&lt;<sp/>0</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(PTAG,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a05a9586ad89b82d0bf5f969a194ef69c" kindref="member">is_last_TAG_provisional</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>a<sp/>PTAG<sp/>(%lld,<sp/>%d)<sp/>that<sp/>is<sp/>equal<sp/>or<sp/>earlier<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;than<sp/>an<sp/>already<sp/>received<sp/>TAG<sp/>(%lld,<sp/>%d).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PTAG.time,<sp/>PTAG.microstep,</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.time,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.microstep);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref><sp/>=<sp/>PTAG;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9812f0499dda0efd9f2718981be2e905" kindref="member">waiting_for_TAG</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a05a9586ad89b82d0bf5f969a194ef69c" kindref="member">is_last_TAG_provisional</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;At<sp/>tag<sp/>(%lld,<sp/>%d),<sp/>received<sp/>Provisional<sp/>Tag<sp/>Advance<sp/>Grant<sp/>(PTAG):<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep,</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.microstep);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>if<sp/>we<sp/>don&apos;t<sp/>modify<sp/>the<sp/>event<sp/>queue,<sp/>we<sp/>need<sp/>to<sp/>broadcast<sp/>a<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>continue<sp/>to<sp/>wait<sp/>for<sp/>a<sp/>TAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>control<sp/>reactions<sp/>that<sp/>are<sp/>blocked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>here<sp/>whether<sp/>there<sp/>is<sp/>any<sp/>control<sp/>reaction<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>broadcasting<sp/>to<sp/>avoid<sp/>an<sp/>unnecessary<sp/>broadcast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>avoids<sp/>problems<sp/>waking<sp/>up<sp/>threads<sp/>before<sp/>execution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>started<sp/>(while<sp/>they<sp/>are<sp/>waiting<sp/>for<sp/>the<sp/>start<sp/>time).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a943c3d7aa45a6af5b6d1567cd4ce841c" kindref="member">is_input_control_reaction_blocked</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;port_status_changed);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Possibly<sp/>insert<sp/>a<sp/>dummy<sp/>event<sp/>into<sp/>the<sp/>event<sp/>queue<sp/>if<sp/>current<sp/>time<sp/>is<sp/>behind</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(which<sp/>it<sp/>should<sp/>be).<sp/>Do<sp/>not<sp/>do<sp/>this<sp/>if<sp/>the<sp/>federate<sp/>has<sp/>not<sp/>fully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>started<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>dummy_event_time<sp/>=<sp/>PTAG.time;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref><sp/>dummy_event_relative_microstep<sp/>=<sp/>PTAG.microstep;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>,<sp/>PTAG)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>tag<sp/>can<sp/>equal<sp/>the<sp/>PTAG<sp/>if<sp/>we<sp/>are<sp/>at<sp/>the<sp/>start<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>if<sp/>this<sp/>federate<sp/>has<sp/>been<sp/>able<sp/>to<sp/>advance<sp/>time<sp/>to<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag<sp/>(e.g.,<sp/>it<sp/>has<sp/>no<sp/>upstream<sp/>federates).<sp/>In<sp/>either<sp/>case,<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>already<sp/>treating<sp/>the<sp/>current<sp/>tag<sp/>as<sp/>PTAG<sp/>cycle<sp/>(e.g.<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>time)<sp/>or<sp/>it<sp/>will<sp/>be<sp/>completing<sp/>the<sp/>current<sp/>cycle<sp/>and<sp/>sending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>LTC<sp/>message<sp/>shortly.<sp/>In<sp/>either<sp/>case,<sp/>there<sp/>is<sp/>nothing<sp/>more<sp/>to<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>,<sp/>PTAG)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>tag<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>PTAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>could<sp/>be<sp/>that<sp/>we<sp/>have<sp/>sent<sp/>an<sp/>LTC<sp/>that<sp/>crossed<sp/>with<sp/>the<sp/>incoming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PTAG<sp/>or<sp/>that<sp/>we<sp/>have<sp/>advanced<sp/>to<sp/>a<sp/>tag<sp/>greater<sp/>than<sp/>the<sp/>PTAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>former<sp/>case,<sp/>there<sp/>is<sp/>nothing<sp/>more<sp/>to<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>latter<sp/>case,<sp/>we<sp/>may<sp/>be<sp/>blocked<sp/>processing<sp/>a<sp/>PTAG<sp/>cycle<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>greater<sp/>tag<sp/>or<sp/>we<sp/>may<sp/>be<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>processing<sp/>a<sp/>regular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TAG.<sp/>In<sp/>either<sp/>case,<sp/>we<sp/>know<sp/>that<sp/>at<sp/>the<sp/>PTAG<sp/>tag,<sp/>all<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>either<sp/>been<sp/>sent<sp/>or<sp/>are<sp/>absent,<sp/>so<sp/>we<sp/>can<sp/>send<sp/>an<sp/>LTC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>an<sp/>LTC<sp/>to<sp/>indicate<sp/>absent<sp/>outputs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a77aa8325df62cb64364fb8af6b1c2334" kindref="member">_lf_logical_tag_complete</ref>(PTAG);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>more<sp/>to<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PTAG.time<sp/>==<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time)<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>now<sp/>know<sp/>current_tag<sp/>&lt;<sp/>PTAG,<sp/>but<sp/>the<sp/>times<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>microstep<sp/>for<sp/>scheduling<sp/>the<sp/>dummy<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy_event_relative_microstep<sp/>-=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>now<sp/>know<sp/>current_tag<sp/>&lt;<sp/>PTAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Schedule<sp/>a<sp/>dummy<sp/>event<sp/>at<sp/>the<sp/>specified<sp/>time<sp/>and<sp/>(relative)<sp/>microstep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;At<sp/>tag<sp/>(%lld,<sp/>%d),<sp/>inserting<sp/>into<sp/>the<sp/>event<sp/>queue<sp/>a<sp/>dummy<sp/>event<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>time<sp/>%lld<sp/>and<sp/>(relative)<sp/>microstep<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep,</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy_event_time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>dummy_event_relative_microstep);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dummy<sp/>event<sp/>points<sp/>to<sp/>a<sp/>NULL<sp/>trigger<sp/>and<sp/>NULL<sp/>real<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>dummy<sp/>=<sp/>_lf_create_dummy_events(</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>dummy_event_time,<sp/>NULL,<sp/>dummy_event_relative_microstep);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(event_q,<sp/>dummy);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a60ec02f52c1a7db4c7bdbc2871eae636" kindref="member">_lf_fd_send_stop_request_to_rti</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>send<sp/>a<sp/>stop<sp/>request<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a5bed997749ef910209491c67e3ece6b4" kindref="member">sent_a_stop_request_to_rti</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Requesting<sp/>the<sp/>whole<sp/>program<sp/>to<sp/>stop.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Raise<sp/>a<sp/>logical<sp/>time<sp/>barrier<sp/>at<sp/>the<sp/>current<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_increment_global_tag_barrier_already_locked(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>a<sp/>stop<sp/>request<sp/>with<sp/>the<sp/>current<sp/>tag<sp/>to<sp/>the<sp/>RTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[STOP_REQUEST_MESSAGE_LENGTH];</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>at<sp/>the<sp/>next<sp/>microstep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>ENCODE_STOP_REQUEST(buffer,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>is<sp/>no<sp/>longer<sp/>connected.<sp/>Dropping<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae819deb7254b390e29a1808625acf70f" kindref="member">write_to_socket_errexit_with_mutex</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>STOP_REQUEST_MESSAGE_LENGTH,<sp/></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,<sp/>&amp;outbound_socket_mutex,</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>stop<sp/>time<sp/>%lld<sp/>to<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a5bed997749ef910209491c67e3ece6b4" kindref="member">sent_a_stop_request_to_rti</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a295baf41cee4f9450aaf7c95abede7e8" kindref="member">handle_stop_granted_message</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/>STOP_GRANTED_MESSAGE_LENGTH<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_read];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>bytes_to_read,<sp/>buffer,</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>stop<sp/>granted<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acquire<sp/>a<sp/>mutex<sp/>lock<sp/>to<sp/>ensure<sp/>that<sp/>this<sp/>state<sp/>does<sp/>change<sp/>while<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>message<sp/>is<sp/>transport<sp/>or<sp/>being<sp/>used<sp/>to<sp/>determine<sp/>a<sp/>TAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>received_stop_tag;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>received_stop_tag.time<sp/>=<sp/><ref refid="net__util_8c_1a3c03766b3fd76c7ad5901581a766caa8" kindref="member">extract_ll</ref>(buffer);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>received_stop_tag.microstep<sp/>=<sp/><ref refid="net__util_8c_1a3c03766b3fd76c7ad5901581a766caa8" kindref="member">extract_ll</ref>(&amp;(buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)]));</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>from<sp/>RTI<sp/>a<sp/>STOP_GRANTED<sp/>message<sp/>with<sp/>elapsed<sp/>tag<sp/>(%lld,<sp/>%d).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>received_stop_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>received_stop_tag.microstep);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref><sp/>=<sp/><ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>();</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(received_stop_tag,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>)<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;RTI<sp/>granted<sp/>a<sp/>STOP_GRANTED<sp/>tag<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>or<sp/>less<sp/>than<sp/>this<sp/>federate&apos;s<sp/>current<sp/>tag<sp/>(%lld,<sp/>%u).<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Stopping<sp/>at<sp/>the<sp/>next<sp/>microstep<sp/>instead.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>received_stop_tag<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>received_stop_tag.microstep++;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>stop_tag<sp/>=<sp/>received_stop_tag;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Setting<sp/>the<sp/>stop<sp/>tag<sp/>to<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_tag.microstep);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_decrement_global_tag_barrier_locked();</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>any<sp/>thread<sp/>is<sp/>waiting<sp/>on<sp/>a<sp/>condition,<sp/>notify<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;reaction_q_changed);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>signal<sp/>instead<sp/>of<sp/>broadcast<sp/>under<sp/>the<sp/>assumption<sp/>that<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>worker<sp/>thread<sp/>can<sp/>call<sp/>wait_until<sp/>at<sp/>a<sp/>given<sp/>time<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>call<sp/>to<sp/>wait_until<sp/>is<sp/>protected<sp/>by<sp/>a<sp/>mutex<sp/>lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a5fe22b3d14b1992c6981d2cfcb89c425" kindref="member">handle_stop_request_message</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/>STOP_REQUEST_MESSAGE_LENGTH<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[bytes_to_read];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1a9d26e19c03e782593ba0f1791b7f35b5" kindref="member">read_from_socket_errexit</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>bytes_to_read,<sp/>buffer,</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>stop<sp/>request<sp/>from<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acquire<sp/>a<sp/>mutex<sp/>lock<sp/>to<sp/>ensure<sp/>that<sp/>this<sp/>state<sp/>does<sp/>change<sp/>while<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>message<sp/>is<sp/>being<sp/>used<sp/>to<sp/>determine<sp/>a<sp/>TAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>the<sp/>message<sp/>if<sp/>this<sp/>federate<sp/>originated<sp/>a<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>federate<sp/>is<sp/>already<sp/>blocked<sp/>is<sp/>awaiting<sp/>a<sp/>STOP_GRANTED<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a5bed997749ef910209491c67e3ece6b4" kindref="member">sent_a_stop_request_to_rti</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag_to_stop;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>tag_to_stop.time<sp/>=<sp/><ref refid="net__util_8c_1a3c03766b3fd76c7ad5901581a766caa8" kindref="member">extract_ll</ref>(buffer);<sp/></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>tag_to_stop.microstep<sp/>=<sp/><ref refid="net__util_8c_1a2c3e1559ae8f31e111cedc00211edded" kindref="member">extract_int</ref>(&amp;(buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref>)]));</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>from<sp/>RTI<sp/>a<sp/>STOP_REQUEST<sp/>message<sp/>with<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag_to_stop.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag_to_stop.microstep);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encode<sp/>the<sp/>current<sp/>logical<sp/>time<sp/>plus<sp/>one<sp/>microstep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>the<sp/>requested<sp/>tag_to_stop,<sp/>whichever<sp/>is<sp/>bigger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(tag_to_stop,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>)<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>stop<sp/>at<sp/>the<sp/>requested<sp/>tag.<sp/>Make<sp/>a<sp/>counteroffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag_to_stop<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag_to_stop.microstep++;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outgoing_buffer[STOP_REQUEST_REPLY_MESSAGE_LENGTH];</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>ENCODE_STOP_REQUEST_REPLY(outgoing_buffer,<sp/>tag_to_stop.time,<sp/>tag_to_stop.microstep);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>is<sp/>no<sp/>longer<sp/>connected.<sp/>Dropping<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>current<sp/>logical<sp/>time<sp/>to<sp/>the<sp/>RTI.<sp/>This<sp/>message<sp/>does<sp/>not<sp/>have<sp/>an<sp/>identifying<sp/>byte<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>the<sp/>RTI<sp/>is<sp/>waiting<sp/>for<sp/>a<sp/>response<sp/>from<sp/>this<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net__util_8c_1ae819deb7254b390e29a1808625acf70f" kindref="member">write_to_socket_errexit_with_mutex</ref>(</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>STOP_REQUEST_REPLY_MESSAGE_LENGTH,<sp/>outgoing_buffer,<sp/>&amp;outbound_socket_mutex,</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>the<sp/>answer<sp/>to<sp/>STOP_REQUEST<sp/>to<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Raise<sp/>a<sp/>barrier<sp/>at<sp/>current<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>are<sp/>sending<sp/>it<sp/>to<sp/>the<sp/>RTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_increment_global_tag_barrier_already_locked(tag_to_stop);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>subsequent<sp/>call<sp/>to<sp/>request_stop<sp/>will<sp/>be<sp/>a<sp/>no-op.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a5bed997749ef910209491c67e3ece6b4" kindref="member">sent_a_stop_request_to_rti</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a114c79dc673219d5df3b794552ca88d7" kindref="member">terminate_execution</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>all<sp/>outgoing<sp/>physical<sp/>connections<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_fed.sockets_for_outbound_p2p_connections<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>socket<sp/>ID<sp/>is<sp/>not<sp/>-1,<sp/>the<sp/>connection<sp/>is<sp/>still<sp/>open.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>an<sp/>EOF<sp/>by<sp/>closing<sp/>the<sp/>socket<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>It<sp/>is<sp/>dangerous<sp/>to<sp/>acquire<sp/>a<sp/>mutex<sp/>in<sp/>a<sp/>termination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>because<sp/>it<sp/>can<sp/>block<sp/>program<sp/>exit<sp/>if<sp/>a<sp/>deadlock<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hence,<sp/>it<sp/>is<sp/>paramount<sp/>that<sp/>these<sp/>mutexes<sp/>not<sp/>allow<sp/>for<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possibility<sp/>of<sp/>deadlock.<sp/>To<sp/>ensure<sp/>this,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>should<sp/>NEVER<sp/>be<sp/>called<sp/>while<sp/>holding<sp/>any<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>NUMBER_OF_FEDERATES;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>outbound<sp/>connections,<sp/>in<sp/>case<sp/>they<sp/>have<sp/>not<sp/>closed<sp/>themselves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>result<sp/>in<sp/>EOF<sp/>being<sp/>sent<sp/>to<sp/>the<sp/>remote<sp/>federate,<sp/>I<sp/>think.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ab74e4453a091929855ab82a38074150e" kindref="member">_lf_close_outbound_socket</ref>(i);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resign<sp/>the<sp/>federation,<sp/>which<sp/>will<sp/>close<sp/>the<sp/>socket<sp/>to<sp/>the<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message_marker<sp/>=<sp/><ref refid="rti_8h_1abed4d766c1f54069227b5cb054b8c198" kindref="member">RESIGN</ref>;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>written<sp/>=<sp/><ref refid="net__util_8c_1ae9bab7965862259f354a419e4140b564" kindref="member">write_to_socket</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>1,<sp/>&amp;message_marker);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(written<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Resigned.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;outbound_socket_mutex);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>closing<sp/>the<sp/>incoming<sp/>P2P<sp/>sockets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>NUMBER_OF_FEDERATES;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1ad48351e45d74393e322780dfeabad776" kindref="member">_lf_request_close_inbound_socket</ref>(i)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sending<sp/>the<sp/>close<sp/>request<sp/>failed.<sp/>Mark<sp/>the<sp/>socket<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>each<sp/>inbound<sp/>socket<sp/>listener<sp/>thread<sp/>to<sp/>close.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a189bc35e092cd0c6908267aa9ff663e5" kindref="member">number_of_inbound_p2p_connections</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>%d<sp/>threads<sp/>listening<sp/>for<sp/>incoming<sp/>messages<sp/>to<sp/>exit.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a189bc35e092cd0c6908267aa9ff663e5" kindref="member">number_of_inbound_p2p_connections</ref>);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a189bc35e092cd0c6908267aa9ff663e5" kindref="member">number_of_inbound_p2p_connections</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignoring<sp/>errors<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_thread_join(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1ac751250db764f954659deb15f1427044" kindref="member">inbound_socket_listeners</ref>[i],<sp/>NULL);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>thread<sp/>listening<sp/>for<sp/>messages<sp/>from<sp/>the<sp/>RTI<sp/>to<sp/>close.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_thread_join(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a5b6b4b5912a7bb7df1c8987f38e12004" kindref="member">RTI_socket_listener</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1ac751250db764f954659deb15f1427044" kindref="member">inbound_socket_listeners</ref>);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="federate_8c_1a0ed912257c1b82c7727c549aec8f3a73" kindref="member">listen_to_federates</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fed_id_ptr)<sp/>{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref><sp/>fed_id<sp/>=<sp/>*((<ref refid="reactor_8h_1a3fa7784c89589b49764048e9909d0e07" kindref="member">ushort</ref>*)fed_id_ptr);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Listening<sp/>to<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket_id<sp/>=<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a244a65a4b9ca9e27230c87ce9021b7e1" kindref="member">sockets_for_inbound_p2p_connections</ref>[fed_id];</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>for<sp/>incoming<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>does<sp/>not<sp/>constrain<sp/>the<sp/>message<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>the<sp/>message<sp/>will<sp/>be<sp/>put<sp/>into<sp/>malloc&apos;d<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[<ref refid="rti_8h_1acc95612e1d2dbbdf34afe76d50e75223" kindref="member">FED_COM_BUFFER_SIZE</ref>];</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Listen<sp/>for<sp/>messages<sp/>from<sp/>the<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>byte<sp/>to<sp/>get<sp/>the<sp/>message<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>a<sp/>P2P<sp/>message<sp/>on<sp/>socket<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>socket_id);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/><ref refid="net__util_8c_1a9426930d10448b1f16f6afee07777f88" kindref="member">read_from_socket</ref>(socket_id,<sp/>1,<sp/>buffer);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EOF<sp/>occurred.<sp/>This<sp/>breaks<sp/>the<sp/>connection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>EOF<sp/>from<sp/>peer<sp/>federate<sp/>%d.<sp/>Closing<sp/>the<sp/>socket.&quot;</highlight><highlight class="normal">,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a89f25989edc5bf8e0c8bf46efe9310d0" kindref="member">_lf_close_inbound_socket</ref>(fed_id);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;P2P<sp/>socket<sp/>to<sp/>federate<sp/>%d<sp/>is<sp/>broken.&quot;</highlight><highlight class="normal">,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a89f25989edc5bf8e0c8bf46efe9310d0" kindref="member">_lf_close_inbound_socket</ref>(fed_id);</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>a<sp/>P2P<sp/>message<sp/>on<sp/>socket<sp/>%d<sp/>of<sp/>type<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket_id,<sp/>buffer[0]);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bad_message<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(buffer[0])<sp/>{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1a5ce0ffa3d59395228539825e73ee490a" kindref="member">P2P_MESSAGE</ref>:</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>untimed<sp/>message<sp/>from<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8a059641cbcf0e192594ea898cd09983" kindref="member">handle_message</ref>(socket_id,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1a6ef14664d9d9d95f792d7f847bc5b119" kindref="member">P2P_TIMED_MESSAGE</ref>:</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>timed<sp/>message<sp/>from<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a79c416c42bbbfb8d65af0b78e6ce31c4" kindref="member">handle_timed_message</ref>(socket_id,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1a82ec41cec8ce47732562301bd2155e54" kindref="member">PORT_ABSENT</ref>:</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>port<sp/>absent<sp/>message<sp/>from<sp/>federate<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a3a5875ee5db1e60f40b6dd8c98f3eec3" kindref="member">handle_port_absent_message</ref>(socket_id,<sp/>fed_id);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bad_message<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bad_message)<sp/>{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Better<sp/>error<sp/>handling<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>erroneous<sp/>message<sp/>type:<sp/>%d.<sp/>Closing<sp/>the<sp/>socket.&quot;</highlight><highlight class="normal">,<sp/>buffer[0]);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>free(fed_id_ptr);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="federate_8c_1a601736facfe06a4521ba59e7cff6c7b7" kindref="member">listen_to_rti_TCP</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>for<sp/>incoming<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>does<sp/>not<sp/>constrain<sp/>the<sp/>message<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>the<sp/>message<sp/>will<sp/>be<sp/>put<sp/>into<sp/>malloc&apos;d<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[<ref refid="rti_8h_1acc95612e1d2dbbdf34afe76d50e75223" kindref="member">FED_COM_BUFFER_SIZE</ref>];</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Listen<sp/>for<sp/>messages<sp/>from<sp/>the<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>RTI<sp/>socket<sp/>is<sp/>still<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>to<sp/>the<sp/>RTI<sp/>unexpectedly<sp/>closed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>one<sp/>byte<sp/>to<sp/>get<sp/>the<sp/>message<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>exit<sp/>if<sp/>the<sp/>read<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/><ref refid="net__util_8c_1a9426930d10448b1f16f6afee07777f88" kindref="member">read_from_socket</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>1,<sp/>buffer);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errno<sp/>==<sp/>ECONNRESET)<sp/>{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>connection<sp/>to<sp/>the<sp/>RTI<sp/>was<sp/>closed<sp/>by<sp/>the<sp/>RTI<sp/>without&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>properly<sp/>sending<sp/>an<sp/>EOF<sp/>first.<sp/>Considering<sp/>this<sp/>a<sp/>soft<sp/>error.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>If<sp/>this<sp/>happens,<sp/>possibly<sp/>a<sp/>new<sp/>RTI<sp/>must<sp/>be<sp/>elected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Socket<sp/>connection<sp/>to<sp/>the<sp/>RTI<sp/>has<sp/>been<sp/>broken&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>error<sp/>%d:<sp/>%s.<sp/>The<sp/>RTI<sp/>should&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>close<sp/>connections<sp/>with<sp/>an<sp/>EOF<sp/>first.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Considering<sp/>this<sp/>a<sp/>soft<sp/>error.&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno,<sp/></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(errno));</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>If<sp/>this<sp/>happens,<sp/>possibly<sp/>a<sp/>new<sp/>RTI<sp/>must<sp/>be<sp/>elected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EOF<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Connection<sp/>to<sp/>the<sp/>RTI<sp/>closed<sp/>with<sp/>an<sp/>EOF.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(buffer[0])<sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1a0283943cd958ee91edaffe4dd45782f1" kindref="member">TIMED_MESSAGE</ref>:</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a79c416c42bbbfb8d65af0b78e6ce31c4" kindref="member">handle_timed_message</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>-1);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1a6e44583f2f5668165e01b0d15a3a780f" kindref="member">TIME_ADVANCE_GRANT</ref>:</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a7853e005f220474d4ce35be7a6560b2f" kindref="member">handle_tag_advance_grant</ref>();</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1a8ec00307b6556a571f6420bbcb0a5d66" kindref="member">PROVISIONAL_TIME_ADVANCE_GRANT</ref>:</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ab1d3825f70289972e7f2ab9fed3b24f4" kindref="member">handle_provisional_tag_advance_grant</ref>();</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1af423f7742f891187e4dcafce5c41844a" kindref="member">STOP_REQUEST</ref>:</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a5fe22b3d14b1992c6981d2cfcb89c425" kindref="member">handle_stop_request_message</ref>();</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1acd984d88f77b2961da3e431d851ebf5e" kindref="member">STOP_GRANTED</ref>:</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a295baf41cee4f9450aaf7c95abede7e8" kindref="member">handle_stop_granted_message</ref>();</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1a82ec41cec8ce47732562301bd2155e54" kindref="member">PORT_ABSENT</ref>:</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a3a5875ee5db1e60f40b6dd8c98f3eec3" kindref="member">handle_port_absent_message</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aacdc19a638ccdc9fae494ce641f4cb04" kindref="member">socket_TCP_RTI</ref>,<sp/>-1);</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rti_8h_1a31f24c0e324077c60e4ded8a30b15978" kindref="member">PHYSICAL_CLOCK_SYNC_MESSAGE_T1</ref>:</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PHYSICAL_CLOCK_SYNC_MESSAGE_T4:</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Federate<sp/>%d<sp/>received<sp/>unexpected<sp/>clock<sp/>sync<sp/>message<sp/>from<sp/>RTI<sp/>on<sp/>TCP<sp/>socket.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a2c4180118c19ff02a0d42f4c6758bdd3" kindref="member">_lf_my_fed_id</ref>);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Received<sp/>from<sp/>RTI<sp/>an<sp/>unrecognized<sp/>TCP<sp/>message<sp/>type:<sp/>%hhx.&quot;</highlight><highlight class="normal">,<sp/>buffer[0]);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ad83fe9661682934029a42954b8fe6e2f" kindref="member">synchronize_with_other_federates</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Synchronizing<sp/>with<sp/>other<sp/>federates.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>start<sp/>time<sp/>to<sp/>the<sp/>coordinated<sp/>start<sp/>time<sp/>for<sp/>all<sp/>federates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>does<sp/>not<sp/>grant<sp/>execution<sp/>to<sp/>this<sp/>federate.<sp/>In<sp/>the<sp/>centralized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coordination,<sp/>the<sp/>tag<sp/>(0,0)<sp/>should<sp/>be<sp/>explicitly<sp/>sent<sp/>to<sp/>the<sp/>RTI<sp/>on<sp/>a<sp/>Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>Grant<sp/>message<sp/>to<sp/>request<sp/>for<sp/>permission<sp/>to<sp/>execute.<sp/>In<sp/>the<sp/>decentralized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coordination,<sp/>either<sp/>the<sp/>after<sp/>delay<sp/>on<sp/>the<sp/>connection<sp/>must<sp/>be<sp/>sufficiently<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enough<sp/>or<sp/>the<sp/>STP<sp/>offset<sp/>must<sp/>be<sp/>set<sp/>globally<sp/>to<sp/>an<sp/>accurate<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref><sp/>=<sp/><ref refid="federate_8c_1aacc9f1bfb95d8b6c852a52832a9ecd9e" kindref="member">get_start_time_from_rti</ref>(<ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>());</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Every<sp/>federate<sp/>starts<sp/>out<sp/>assuming<sp/>that<sp/>it<sp/>has<sp/>been<sp/>granted<sp/>a<sp/>PTAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>start<sp/>time,<sp/>or<sp/>if<sp/>it<sp/>has<sp/>no<sp/>upstream<sp/>federates,<sp/>a<sp/>TAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref><sp/>=<sp/>(<ref refid="structtag__t" kindref="compound">tag_t</ref>){.time<sp/>=<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>.microstep<sp/>=<sp/>0u};</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a603662cf0155920b8a76659e7dacb9ef" kindref="member">has_upstream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a05a9586ad89b82d0bf5f969a194ef69c" kindref="member">is_last_TAG_provisional</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a05a9586ad89b82d0bf5f969a194ef69c" kindref="member">is_last_TAG_provisional</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(duration<sp/>&gt;=<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>duration<sp/>has<sp/>been<sp/>specified.<sp/>Recalculate<sp/>the<sp/>stop<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_tag<sp/>=<sp/>((<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{.time<sp/>=<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref><sp/>+<sp/>duration,<sp/>.microstep<sp/>=<sp/>0});</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>a<sp/>thread<sp/>to<sp/>listen<sp/>for<sp/>incoming<sp/>TCP<sp/>messages<sp/>from<sp/>the<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@note<sp/>Up<sp/>until<sp/>this<sp/>point,<sp/>the<sp/>federate<sp/>has<sp/>been<sp/>listening<sp/>for<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>from<sp/>the<sp/>RTI<sp/>in<sp/>a<sp/>sequential<sp/>manner<sp/>in<sp/>the<sp/>main<sp/>thread.<sp/>From<sp/>now<sp/>on,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>separate<sp/>thread<sp/>is<sp/>created<sp/>to<sp/>allow<sp/>for<sp/>asynchronous<sp/>communication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_thread_create(&amp;<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a5b6b4b5912a7bb7df1c8987f38e12004" kindref="member">RTI_socket_listener</ref>,<sp/><ref refid="federate_8c_1a601736facfe06a4521ba59e7cff6c7b7" kindref="member">listen_to_rti_TCP</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_thread_t<sp/>thread_id;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="clock-sync_8c_1ac094b53ced87d3cbd617a66591f4282a" kindref="member">create_clock_sync_thread</ref>(&amp;thread_id))<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>thread<sp/>to<sp/>handle<sp/>clock<sp/>synchronization.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1aa4e74edba14fe2d25b2f05c3497c1054" kindref="member">_lf_bounded_NET</ref>(<ref refid="structtag__t" kindref="compound">tag_t</ref>*<sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>tag<sp/>sent<sp/>by<sp/>this<sp/>function<sp/>is<sp/>a<sp/>promise<sp/>that,<sp/>absent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inputs<sp/>from<sp/>another<sp/>federate,<sp/>this<sp/>federate<sp/>will<sp/>not<sp/>produce<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>earlier<sp/>than<sp/>t.<sp/>But<sp/>if<sp/>there<sp/>are<sp/>downstream<sp/>federates<sp/>and<sp/>there<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>physical<sp/>action<sp/>(not<sp/>counting<sp/>receivers<sp/>from<sp/>upstream<sp/>federates),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>we<sp/>can<sp/>only<sp/>promise<sp/>up<sp/>to<sp/>current<sp/>physical<sp/>time<sp/>(plus<sp/>the<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>all<sp/>minimum<sp/>delays<sp/>on<sp/>the<sp/>physical<sp/>actions).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,<sp/>we<sp/>send<sp/>a<sp/>NET<sp/>message<sp/>with<sp/>the<sp/>current<sp/>physical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>permit<sp/>downstream<sp/>federates<sp/>to<sp/>advance.<sp/>To<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overwhelming<sp/>the<sp/>network,<sp/>this<sp/>NET<sp/>message<sp/>should<sp/>be<sp/>sent<sp/>periodically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>specified<sp/>intervals<sp/>controlled<sp/>by<sp/>the<sp/>target<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coordination-options:<sp/>{advance-message-interval:<sp/>time<sp/>units}.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>larger<sp/>the<sp/>interval,<sp/>the<sp/>more<sp/>downstream<sp/>federates<sp/>will<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>behind<sp/>real<sp/>time,<sp/>but<sp/>the<sp/>less<sp/>network<sp/>traffic.<sp/>If<sp/>this<sp/>option<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>missing,<sp/>we<sp/>issue<sp/>a<sp/>warning<sp/>message<sp/>suggesting<sp/>that<sp/>a<sp/>redesign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>might<sp/>be<sp/>in<sp/>order<sp/>so<sp/>that<sp/>outputs<sp/>don&apos;t<sp/>depend<sp/>on<sp/>physical<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Checking<sp/>NET<sp/>to<sp/>see<sp/>whether<sp/>it<sp/>should<sp/>be<sp/>bounded<sp/>by<sp/>physical<sp/>time.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Min<sp/>delay<sp/>from<sp/>physical<sp/>action:<sp/>%lld.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a91a34b0d7f0f604c2f21cf062dbe0314" kindref="member">min_delay_from_physical_action_to_federate_output</ref>);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a91a34b0d7f0f604c2f21cf062dbe0314" kindref="member">min_delay_from_physical_action_to_federate_output</ref><sp/>&gt;=<sp/>0LL</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1ac130c67ec68fe84d6753a54e6e73d59a" kindref="member">has_downstream</ref></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>physical<sp/>action<sp/>upstream<sp/>of<sp/>some<sp/>output<sp/>from<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>federate,<sp/>and<sp/>there<sp/>is<sp/>at<sp/>least<sp/>one<sp/>downstream<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>the<sp/>tag<sp/>to<sp/>the<sp/>current<sp/>physical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>physical_time<sp/>=<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>();</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(physical_time<sp/>+<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a91a34b0d7f0f604c2f21cf062dbe0314" kindref="member">min_delay_from_physical_action_to_federate_output</ref><sp/>&lt;<sp/>tag-&gt;time)<sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>only<sp/>promise<sp/>up<sp/>and<sp/>not<sp/>including<sp/>this<sp/>new<sp/>time:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag-&gt;time<sp/>=<sp/>physical_time<sp/>+<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a91a34b0d7f0f604c2f21cf062dbe0314" kindref="member">min_delay_from_physical_action_to_federate_output</ref><sp/>-<sp/>1L;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag-&gt;microstep<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Has<sp/>physical<sp/>actions<sp/>that<sp/>bound<sp/>NET<sp/>to<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag-&gt;time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>tag-&gt;microstep);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/><ref refid="federate_8c_1acd313a38ec1a25c22cc94333146ba8fc" kindref="member">_lf_send_next_event_tag</ref>(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wait_for_reply)<sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1ac130c67ec68fe84d6753a54e6e73d59a" kindref="member">has_downstream</ref><sp/>&amp;&amp;<sp/>!<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a603662cf0155920b8a76659e7dacb9ef" kindref="member">has_upstream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>federate<sp/>is<sp/>not<sp/>connected<sp/>(except<sp/>possibly<sp/>by<sp/>physical<sp/>links)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>there<sp/>is<sp/>no<sp/>need<sp/>for<sp/>the<sp/>RTI<sp/>to<sp/>get<sp/>involved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>If<sp/>the<sp/>event<sp/>queue<sp/>is<sp/>empty,<sp/>then<sp/>the<sp/>time<sp/>argument<sp/>is<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>timeout_time<sp/>or<sp/>FOREVER.<sp/>If<sp/>-fast<sp/>is<sp/>also<sp/>set,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>matters<sp/>whether<sp/>there<sp/>are<sp/>upstream<sp/>federates<sp/>connected<sp/>by<sp/>physical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connections,<sp/>which<sp/>do<sp/>not<sp/>affect<sp/>_fed.has_upstream.<sp/>Perhaps<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>not<sp/>return<sp/>immediately<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>execution<sp/>will<sp/>hit<sp/>its<sp/>timeout_time<sp/>and<sp/>fail<sp/>to<sp/>receive<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>messages<sp/>sent<sp/>by<sp/>upstream<sp/>federates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>-fast<sp/>is<sp/>really<sp/>incompatible<sp/>with<sp/>federated<sp/>execution<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physical<sp/>connections,<sp/>so<sp/>I<sp/>don&apos;t<sp/>think<sp/>we<sp/>need<sp/>to<sp/>worry<sp/>about<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Granted<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>because<sp/>the<sp/>federate<sp/>has<sp/>neither<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;upstream<sp/>nor<sp/>downstream<sp/>federates.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>tag.microstep);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tag;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>time<sp/>advance<sp/>(TAG<sp/>or<sp/>PTAG)<sp/>has<sp/>already<sp/>been<sp/>granted<sp/>for<sp/>this<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>larger<sp/>tag,<sp/>then<sp/>return<sp/>immediately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>,<sp/>tag)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Granted<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>because<sp/>TAG<sp/>or<sp/>PTAG<sp/>has<sp/>been<sp/>received.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>.microstep);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>tag<sp/>because<sp/>_lf_bounded_NET()<sp/>may<sp/>modify<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>original_tag<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>NET<sp/>sent<sp/>by<sp/>this<sp/>function<sp/>is<sp/>a<sp/>promise<sp/>that,<sp/>absent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inputs<sp/>from<sp/>another<sp/>federate,<sp/>this<sp/>federate<sp/>will<sp/>not<sp/>produce<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>earlier<sp/>than<sp/>t.<sp/>But<sp/>if<sp/>there<sp/>are<sp/>downstream<sp/>federates<sp/>and<sp/>there<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>physical<sp/>action<sp/>(not<sp/>counting<sp/>receivers<sp/>from<sp/>upstream<sp/>federates),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>we<sp/>can<sp/>only<sp/>promise<sp/>up<sp/>to<sp/>current<sp/>physical<sp/>time<sp/>(plus<sp/>the<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>all<sp/>minimum<sp/>delays<sp/>on<sp/>the<sp/>physical<sp/>actions).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>wait_for_reply<sp/>is<sp/>false,<sp/>leave<sp/>the<sp/>tag<sp/>alone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tag_bounded_by_physical_time<sp/>=<sp/>wait_for_reply<sp/>?</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1aa4e74edba14fe2d25b2f05c3497c1054" kindref="member">_lf_bounded_NET</ref>(&amp;tag)</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>we<sp/>do<sp/>next<sp/>depends<sp/>on<sp/>whether<sp/>the<sp/>NET<sp/>has<sp/>been<sp/>bounded<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physical<sp/>time<sp/>or<sp/>by<sp/>an<sp/>event<sp/>on<sp/>the<sp/>event<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tag_bounded_by_physical_time)<sp/>{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NET<sp/>is<sp/>not<sp/>bounded<sp/>by<sp/>physical<sp/>time<sp/>or<sp/>has<sp/>no<sp/>downstream<sp/>federates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1aa894b9efe5e8be30222d2d34b1c8c2be" kindref="member">_lf_send_tag</ref>(<ref refid="rti_8h_1a40f3720fa53cce015534fb7246006645" kindref="member">NEXT_EVENT_TAG</ref>,<sp/>tag);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a42618a45ae75b42e1caec4b373471d96" kindref="member">last_sent_NET</ref><sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sent<sp/>next<sp/>event<sp/>tag<sp/>(NET)<sp/>(%lld,<sp/>%u)<sp/>to<sp/>RTI.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>tag.microstep);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wait_for_reply)<sp/>{</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>waiting<sp/>for<sp/>reply<sp/>to<sp/>NET.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tag;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>no<sp/>upstream<sp/>federates,<sp/>return<sp/>immediately,<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>for<sp/>a<sp/>reply.<sp/>This<sp/>federate<sp/>does<sp/>not<sp/>need<sp/>to<sp/>wait<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>other<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>If<sp/>fast<sp/>execution<sp/>is<sp/>being<sp/>used,<sp/>it<sp/>may<sp/>be<sp/>necessary<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>throttle<sp/>upstream<sp/>federates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a603662cf0155920b8a76659e7dacb9ef" kindref="member">has_upstream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>waiting<sp/>for<sp/>reply<sp/>to<sp/>NET<sp/>(%lld,<sp/>%u)<sp/>because<sp/>I<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;have<sp/>no<sp/>upstream<sp/>federates.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>tag.microstep);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tag;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fed<sp/>has<sp/>upstream<sp/>federates.<sp/>Have<sp/>to<sp/>wait<sp/>for<sp/>a<sp/>TAG<sp/>or<sp/>PTAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9812f0499dda0efd9f2718981be2e905" kindref="member">waiting_for_TAG</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>a<sp/>TAG<sp/>is<sp/>received<sp/>from<sp/>the<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>either<sp/>something<sp/>changes<sp/>on<sp/>the<sp/>event<sp/>queue<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>RTI<sp/>has<sp/>responded<sp/>with<sp/>a<sp/>TAG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>a<sp/>TAG<sp/>from<sp/>the<sp/>RTI.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lf_cond_wait(&amp;event_q_changed,<sp/>&amp;mutex)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Wait<sp/>error.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Either<sp/>a<sp/>TAG<sp/>or<sp/>PTAG<sp/>arrived.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a9812f0499dda0efd9f2718981be2e905" kindref="member">waiting_for_TAG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_fed.last_TAG<sp/>will<sp/>have<sp/>been<sp/>set<sp/>by<sp/>the<sp/>thread<sp/>receiving<sp/>the<sp/>TAG<sp/>message<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>_fed.waiting_for_TAG<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1aa66a2f08ea9173743106c7ff18f1846a" kindref="member">last_TAG</ref>;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>new<sp/>event<sp/>on<sp/>the<sp/>event<sp/>queue<sp/>requires<sp/>sending<sp/>a<sp/>new<sp/>NET.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>next_tag<sp/>=<sp/>get_next_event_tag();</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(next_tag,<sp/>tag)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1aa894b9efe5e8be30222d2d34b1c8c2be" kindref="member">_lf_send_tag</ref>(<ref refid="rti_8h_1a40f3720fa53cce015534fb7246006645" kindref="member">NEXT_EVENT_TAG</ref>,<sp/>next_tag);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a42618a45ae75b42e1caec4b373471d96" kindref="member">last_sent_NET</ref><sp/>=<sp/>next_tag;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>tag<sp/>is<sp/>greater<sp/>than<sp/>physical<sp/>time<sp/>and<sp/>this<sp/>fed<sp/>has<sp/>downstream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>federates.<sp/>Need<sp/>to<sp/>send<sp/>TAN<sp/>rather<sp/>than<sp/>NET.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TAN<sp/>does<sp/>not<sp/>include<sp/>a<sp/>microstep<sp/>and<sp/>expects<sp/>no<sp/>reply.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>sent<sp/>to<sp/>enable<sp/>downstream<sp/>federates<sp/>to<sp/>advance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a2c9ffe8e9c42d3c8c7e5bb170bfa6471" kindref="member">_lf_send_time</ref>(<ref refid="rti_8h_1a01049d88b81bb8b6e6b3e8242e435c50" kindref="member">TIME_ADVANCE_NOTICE</ref>,<sp/>tag.time);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a8dd2a9d602522afd72f6c524356868e4" kindref="member">_fed</ref>.<ref refid="structfederate__instance__t_1a42618a45ae75b42e1caec4b373471d96" kindref="member">last_sent_NET</ref><sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Sent<sp/>Time<sp/>Advance<sp/>Notice<sp/>(TAN)<sp/>%lld<sp/>to<sp/>RTI.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wait_for_reply)<sp/>{</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>waiting<sp/>physical<sp/>time<sp/>to<sp/>advance<sp/>further.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tag;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>federate<sp/>should<sp/>repeatedly<sp/>send<sp/>TAN<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>RTI<sp/>so<sp/>that<sp/>downstream<sp/>federates<sp/>can<sp/>advance<sp/>time<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>has<sp/>a<sp/>candidate<sp/>event<sp/>that<sp/>it<sp/>can<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Before<sp/>sending<sp/>the<sp/>next<sp/>message,<sp/>we<sp/>need<sp/>to<sp/>wait<sp/>some<sp/>time<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>we<sp/>don&apos;t<sp/>overwhelm<sp/>the<sp/>network<sp/>and<sp/>the<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>That<sp/>amount<sp/>of<sp/>time<sp/>will<sp/>be<sp/>no<sp/>greater<sp/>than<sp/>ADVANCE_MESSAGE_INTERVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>physical<sp/>time<sp/>to<sp/>elapse<sp/>or<sp/>an<sp/>event<sp/>on<sp/>the<sp/>event<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>call<sp/>to<sp/>_lf_bounded_NET<sp/>called<sp/>get_physical_time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>_lf_last_reported_unadjusted_physical_time_ns,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>obtained<sp/>using<sp/>CLOCK_REALTIME<sp/>before<sp/>adjustment<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clock<sp/>synchronization.<sp/>Since<sp/>that<sp/>is<sp/>the<sp/>clock<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lf_cond_timedwait,<sp/>this<sp/>is<sp/>the<sp/>clock<sp/>we<sp/>want<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>wait_until_time_ns<sp/>=</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1aa69d28e60eef684c98f95a802681c4b9" kindref="member">_lf_last_reported_unadjusted_physical_time_ns</ref><sp/>+<sp/>ADVANCE_MESSAGE_INTERVAL;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Regardless<sp/>of<sp/>the<sp/>ADVANCE_MESSAGE_INTERVAL,<sp/>do<sp/>not<sp/>let<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>exceed<sp/>the<sp/>time<sp/>of<sp/>the<sp/>next<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wait_until_time_ns<sp/>&gt;<sp/>original_tag.time)<sp/>{</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_until_time_ns<sp/>=<sp/>original_tag.time;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_timedwait(&amp;event_q_changed,<sp/>&amp;mutex,<sp/>wait_until_time_ns);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Wait<sp/>finished<sp/>or<sp/>interrupted.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Either<sp/>the<sp/>timeout<sp/>expired<sp/>or<sp/>the<sp/>wait<sp/>was<sp/>interrupted<sp/>by<sp/>an<sp/>event<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>onto<sp/>the<sp/>event<sp/>queue.<sp/>In<sp/>either<sp/>case,<sp/>we<sp/>can<sp/>just<sp/>loop<sp/>around.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>iteration<sp/>will<sp/>determine<sp/>whether<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TAN<sp/>should<sp/>be<sp/>sent<sp/>or<sp/>a<sp/>NET.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag<sp/>=<sp/>get_next_event_tag();</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c"/>
  </compounddef>
</doxygen>
