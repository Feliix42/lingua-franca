<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="reactor__common_8c" kind="file" language="C++">
    <compoundname>reactor_common.c</compoundname>
    <includes refid="reactor_8h" local="yes">reactor.h</includes>
    <includes refid="tag_8c" local="yes">tag.c</includes>
    <includes refid="pqueue_8c" local="yes">pqueue.c</includes>
    <includes refid="util_8c" local="yes">util.c</includes>
    <includedby refid="reactor_8c" local="yes">/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor.c</includedby>
    <includedby refid="reactor__threaded_8c" local="yes">/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="17">
        <label>util.c</label>
        <link refid="util_8c"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pqueue.h</label>
        <link refid="pqueue_8h"/>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="18">
        <label>assert.h</label>
      </node>
      <node id="14">
        <label>trace.h</label>
        <link refid="trace_8h"/>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="9">
        <label>errno.h</label>
      </node>
      <node id="16">
        <label>platform.h</label>
        <link refid="platform_8h_source"/>
      </node>
      <node id="15">
        <label>tag.c</label>
        <link refid="tag_8c"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tag.h</label>
        <link refid="tag_8h"/>
      </node>
      <node id="8">
        <label>limits.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="2">
        <label>reactor.h</label>
        <link refid="reactor_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>time.h</label>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c</label>
        <link refid="reactor__common_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="reactor__common_8c_1ab66f2115ba9955781972ae5109d9cf65" prot="public" static="no">
        <name>__TOKEN_RECYCLING_BIN_SIZE_LIMIT</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To allow a system to recover from burst of activity, the token recycling bin has a limited size. When it becomes full, token are freed using free(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="354" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="354" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="reactor__common_8c_1abe23a36a87d2f0c076da417eb0114c7e" prot="public" static="no" strong="no">
        <type></type>
        <name>token_freed</name>
        <enumvalue id="reactor__common_8c_1abe23a36a87d2f0c076da417eb0114c7ea3d7522b54086645e077eb70e78731c5c" prot="public">
          <name>NOT_FREED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="reactor__common_8c_1abe23a36a87d2f0c076da417eb0114c7ea417a0268666423fd955fea6f38cde238" prot="public">
          <name>VALUE_FREED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="reactor__common_8c_1abe23a36a87d2f0c076da417eb0114c7ea0a6094445d7a54e61aa3a43f6d017e2b" prot="public">
          <name>TOKEN_FREED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible return values for __done_using. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="357" column="25" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="357" bodyend="361"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="reactor__common_8c_1a0cb4f0fedba2f1e1fd3893440ab53647" prot="public" static="no">
        <type>enum token_freed</type>
        <definition>typedef enum token_freed token_freed</definition>
        <argsstring></argsstring>
        <name>token_freed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible return values for __done_using. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="361" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="reactor__common_8c_1a9c91e5c84c3910df17c909ccdea074db" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fast</definition>
        <argsstring></argsstring>
        <name>fast</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runtime infrastructure for the C target of Lingua Franca. This file contains resources that are shared by the threaded and non-threaded versions of the C runtime.</para>
<para><simplesect kind="author"><para>{Edward A. Lee <ulink url="mailto:eal@berkeley.edu">eal@berkeley.edu</ulink>} </para>
</simplesect>
<simplesect kind="author"><para>{Marten Lohstroh <ulink url="mailto:marten@berkeley.edu">marten@berkeley.edu</ulink>} </para>
</simplesect>
<simplesect kind="author"><para>{Mehrdad Niknami <ulink url="mailto:mniknami@berkeley.edu">mniknami@berkeley.edu</ulink>} </para>
</simplesect>
<simplesect kind="author"><para>{Soroush Bateni &lt;<ulink url="mailto:soroush@utdallas.edu">soroush@utdallas.edu</ulink>} Indicator of whether to wait for physical time to match logical time. By default, execution will wait. The command-line argument -fast will eliminate the wait and allow logical time to exceed physical time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="47" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1af74a2782bda0d66298d22d637ad964b5" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _lf_number_of_threads</definition>
        <argsstring></argsstring>
        <name>_lf_number_of_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of worker threads for threaded execution. By default, execution is not threaded and this variable will have value 0, meaning that the execution is not threaded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="54" column="14" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a8079fdfadf07cba8a660c9c25cb9dc77" prot="public" static="no" mutable="no">
        <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
        <definition>instant_t duration</definition>
        <argsstring></argsstring>
        <name>duration</name>
        <initializer>= -1LL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The logical time to elapse during execution, or -1 if no timeout time has been given. When the logical equal to start_time + duration has been reached, execution will terminate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="61" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1abac6e1f16371ec26c509b7ad375d6334" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _lf_execution_started</definition>
        <argsstring></argsstring>
        <name>_lf_execution_started</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates whether or not the execution has started. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="67" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a007aadaac39cca4ce69656a91b5e236c" prot="public" static="no" mutable="no">
        <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
        <definition>tag_t stop_tag</definition>
        <argsstring></argsstring>
        <name>stop_tag</name>
        <initializer>= FOREVER_TAG</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The tag at which the Lingua Franca program should stop. It will be initially set to timeout if it is set. However, starvation or calling <ref refid="reactor_8h_1af629769c213699f0e4c9360811ee7251" kindref="member">request_stop()</ref> can also alter the stop_tag by moving it earlier.</para>
<para>FIXME: This variable might need to be volatile </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="77" column="7" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a3e69bf5802b3968ed00af688cc7a8006" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool keepalive_specified</definition>
        <argsstring></argsstring>
        <name>keepalive_specified</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicator of whether the keepalive command-line option was given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="80" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1af9acad1a4118f33de00cb260ab8fa940" prot="public" static="no" mutable="no">
        <type>bool **</type>
        <definition>bool** __is_present_fields</definition>
        <argsstring></argsstring>
        <name>__is_present_fields</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="85" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a943199b1b472a757b5696f8bfb1df849" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int __is_present_fields_size</definition>
        <argsstring></argsstring>
        <name>__is_present_fields_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="86" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a5937db18ee680664d53156297cde0566" prot="public" static="no" mutable="no">
        <type><ref refid="structtag__t" kindref="compound">tag_t</ref> **</type>
        <definition>tag_t** __intended_tag_fields</definition>
        <argsstring></argsstring>
        <name>__intended_tag_fields</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="91" column="7" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a6c49fe9041b97e8b684ece79a8bd9c2f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int __intended_tag_fields_size</definition>
        <argsstring></argsstring>
        <name>__intended_tag_fields_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="92" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a06f0942477b53169cb855a4c55e9f166" prot="public" static="no" mutable="no">
        <type><ref refid="structtoken__present__t" kindref="compound">token_present_t</ref> *</type>
        <definition>token_present_t* __tokens_with_ref_count</definition>
        <argsstring></argsstring>
        <name>__tokens_with_ref_count</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="98" column="17" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a10daeb6bf7d37ada7a878859a34ed5ed" prot="public" static="no" mutable="no">
        <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
        <definition>lf_token_t* _lf_more_tokens_with_ref_count</definition>
        <argsstring></argsstring>
        <name>_lf_more_tokens_with_ref_count</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="102" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1affc668e6289203bd5234f70dbd8f899c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int __tokens_with_ref_count_size</definition>
        <argsstring></argsstring>
        <name>__tokens_with_ref_count_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="103" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a39f588e1df453139dbb9a4157dda2027" prot="public" static="no" mutable="no">
        <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
        <definition>interval_t _lf_global_time_STP_offset</definition>
        <argsstring></argsstring>
        <name>_lf_global_time_STP_offset</name>
        <initializer>= 0LL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Global STP offset uniformly applied to advancement of each time step in federated execution. This can be retrieved in user code by calling <ref refid="reactor_8h_1a54be08fbc7990c2d8082a31cbbf6e019" kindref="member">get_stp_offset()</ref> and adjusted by calling <ref refid="reactor_8h_1a75a5bf324229d35fb88541a04449c95b" kindref="member">set_stp_offset(interval_t offset)</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="111" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a5336de38071181906a15eccf873858fe" prot="public" static="no" mutable="no">
        <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
        <definition>pqueue_t* event_q</definition>
        <argsstring></argsstring>
        <name>event_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Priority queues. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="216" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1ac78005c2cb229d6bec832088d9cdef10" prot="public" static="no" mutable="no">
        <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
        <definition>pqueue_t* reaction_q</definition>
        <argsstring></argsstring>
        <name>reaction_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="218" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a209e679d16efc35de4ffc5e1c68bafdf" prot="public" static="no" mutable="no">
        <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
        <definition>pqueue_t* recycle_q</definition>
        <argsstring></argsstring>
        <name>recycle_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="219" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a3015ddee9b93cc02c05fd721efb528a4" prot="public" static="no" mutable="no">
        <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
        <definition>pqueue_t* next_q</definition>
        <argsstring></argsstring>
        <name>next_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="220" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a4b6b293a457fbf7b977e8014b6255fe5" prot="public" static="no" mutable="no">
        <type><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref></type>
        <definition>handle_t __handle</definition>
        <argsstring></argsstring>
        <name>__handle</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="223" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1ace449e324d2fd52f242c156b17402717" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int __count_payload_allocations</definition>
        <argsstring></argsstring>
        <name>__count_payload_allocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counter used to issue a warning if memory is allocated for message payloads and never freed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="329" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a64054e6549042dd00be401a844571ea1" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int __count_token_allocations</definition>
        <argsstring></argsstring>
        <name>__count_token_allocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counter used to issue a warning if memory is allocated for tokens and never freed. Note that every trigger will have one token allocated for it. That token is not counted because it is not expected to be freed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="338" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1ad494a04fc994bcc2561e508b879ea98b" prot="public" static="no" mutable="no">
        <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
        <definition>lf_token_t* __token_recycling_bin</definition>
        <argsstring></argsstring>
        <name>__token_recycling_bin</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tokens always have the same size in memory so they are easily recycled. When a token is freed, this pointer will be updated to point to it. Freed tokens are chained using their next_free field. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="345" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a1cd4da1c408432c9e14cdca6aed2279f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int __token_recycling_bin_size</definition>
        <argsstring></argsstring>
        <name>__token_recycling_bin_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count of the number of tokens in the recycling bin. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="348" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1aab46895a3a4d1341a19b689a0ea902d1" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int default_argc</definition>
        <argsstring></argsstring>
        <name>default_argc</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1669" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1a079c42a8611d008395dba5af4911e85c" prot="public" static="no" mutable="no">
        <type>char **</type>
        <definition>char** default_argv</definition>
        <argsstring></argsstring>
        <name>default_argv</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1670" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__common_8c_1afb7337572879824d012d59222ea86eeb" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* federation_id</definition>
        <argsstring></argsstring>
        <name>federation_id</name>
        <initializer>= &quot;Unidentified Federation&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The ID of the federation that this reactor will join. This should be overridden with a command-line -i option to ensure that each federate only joins its assigned federation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1677" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1677" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="reactor__common_8c_1ae7e27b8e8e57c4d024a0db52043034df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_set_stop_tag</definition>
        <argsstring>(tag_t tag)</argsstring>
        <name>_lf_set_stop_tag</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the stop tag.</para>
<para>This function will always choose the minimum of the provided tag and stop_tag</para>
<para><simplesect kind="note"><para>In threaded programs, the mutex must be locked before calling this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="144" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a54be08fbc7990c2d8082a31cbbf6e019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
        <definition>interval_t get_stp_offset</definition>
        <argsstring>()</argsstring>
        <name>get_stp_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the global STP offset on advancement of logical time for federated execution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="157" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a75a5bf324229d35fb88541a04449c95b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_stp_offset</definition>
        <argsstring>(interval_t offset)</argsstring>
        <name>set_stp_offset</name>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the global STP offset on advancement of logical time for federated execution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A positive time value to be applied as the STP offset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="168" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1aab41b7d549aa8e04de9183dcd4ee468b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void readable_time</definition>
        <argsstring>(char *buffer, instant_t time)</argsstring>
        <name>readable_time</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print a non-negative time value in nanoseconds with commas separating thousands into the specified buffer. Ideally, this would use the locale to use periods if appropriate, but I haven&apos;t found a sufficiently portable way to do that. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer long enough to contain a string like &quot;9,223,372,036,854,775,807&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>A time value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="182" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="182" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a122c64aeb030b278e2ce845a4c17d369" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int in_reverse_order</definition>
        <argsstring>(pqueue_pri_t thiz, pqueue_pri_t that)</argsstring>
        <name>in_reverse_order</name>
        <param>
          <type><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref></type>
          <declname>thiz</declname>
        </param>
        <param>
          <type><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref></type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether the first and second argument are given in reverse order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="230" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1ab6dd4e1fb820126b8f3ed674247b77a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int in_no_particular_order</definition>
        <argsstring>(pqueue_pri_t thiz, pqueue_pri_t that)</argsstring>
        <name>in_no_particular_order</name>
        <param>
          <type><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref></type>
          <declname>thiz</declname>
        </param>
        <param>
          <type><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref></type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether the first and second argument are given in reverse order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="237" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1afaed1bed31450448af78662d8d61ffc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int event_matches</definition>
        <argsstring>(void *next, void *curr)</argsstring>
        <name>event_matches</name>
        <param>
          <type>void *</type>
          <declname>next</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>curr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether or not the given events have matching triggers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="244" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a62492b62e50e3b691be1f63ff7cbf657" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int reaction_matches</definition>
        <argsstring>(void *next, void *curr)</argsstring>
        <name>reaction_matches</name>
        <param>
          <type>void *</type>
          <declname>next</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>curr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether or not the given <ref refid="structreaction__t" kindref="compound">reaction_t</ref> pointers point to the same struct. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="252" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a9113142655fa7fe7e1a7bb98e8a3f3a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref></type>
        <definition>static pqueue_pri_t get_event_time</definition>
        <argsstring>(void *a)</argsstring>
        <name>get_event_time</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Report a priority equal to the time of the given event. Used for sorting pointers to <ref refid="structevent__t" kindref="compound">event_t</ref> structs in the event queue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="260" column="21" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a0c8cab2191a63b69c391f30247bac905" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref></type>
        <definition>static pqueue_pri_t get_reaction_index</definition>
        <argsstring>(void *a)</argsstring>
        <name>get_reaction_index</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Report a priority equal to the index of the given reaction. Used for sorting pointers to <ref refid="structreaction__t" kindref="compound">reaction_t</ref> structs in the blocked and executing queues. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="269" column="21" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1af9e3edae9db4455323506738265db7f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t get_event_position</definition>
        <argsstring>(void *a)</argsstring>
        <name>get_event_position</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the given event&apos;s position in the queue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="276" column="15" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="276" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a3f363845aac14c2a268109b3321ac56a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t get_reaction_position</definition>
        <argsstring>(void *a)</argsstring>
        <name>get_reaction_position</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the given reaction&apos;s position in the queue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="283" column="15" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a33780bfe43c9f4efe13ca532b2f92df6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void set_event_position</definition>
        <argsstring>(void *a, size_t pos)</argsstring>
        <name>set_event_position</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the given event&apos;s position in the queue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="290" column="13" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="290" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a6649050197451c1d9bdb40ae0497604e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void set_reaction_position</definition>
        <argsstring>(void *a, size_t pos)</argsstring>
        <name>set_reaction_position</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the given reaction&apos;s position in the queue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="297" column="13" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="297" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1af314e4d23674622cd4b4d2f1bae924cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_reaction</definition>
        <argsstring>(void *reaction)</argsstring>
        <name>print_reaction</name>
        <param>
          <type>void *</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print some information about the given reaction.</para>
<para>DEBUG function only. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="306" column="13" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="306" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1af0d8a7c01538e8d9f6216fe42d0b73f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_event</definition>
        <argsstring>(void *event)</argsstring>
        <name>print_event</name>
        <param>
          <type>void *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print some information about the given event.</para>
<para>DEBUG function only. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="317" column="13" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="317" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a81719b9e1f8d5402943213a240c42beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>token_freed</type>
        <definition>token_freed __done_using</definition>
        <argsstring>(lf_token_t *token)</argsstring>
        <name>__done_using</name>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrement the reference count of the specified token. If the reference count hits 0, free the memory for the value carried by the token, and, if the token is not also the template token of its trigger, free the token. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a token. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NOT_FREED if nothing was freed, VALUE_FREED if the value was freed, and TOKEN_FREED if both the value and the token were freed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="373" column="13" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="373" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a90d13f45544346ea6623768358762d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_enqueue_reaction</definition>
        <argsstring>(reaction_t *reaction)</argsstring>
        <name>_lf_enqueue_reaction</name>
        <param>
          <type><ref refid="structreaction__t" kindref="compound">reaction_t</ref> *</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Put the specified reaction on the reaction queue. This version is just a template. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>The reaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Put the specified reaction on the reaction queue. This version does not acquire a mutex lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>The reaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Put the specified reaction on the reaction queue. This version acquires a mutex lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>The reaction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="421" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor.c" bodystart="127" bodyend="133" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" declline="421" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1af8aacf433fcf349ffa1b163962eb3681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __start_time_step</definition>
        <argsstring>()</argsstring>
        <name>__start_time_step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use tables to reset is_present fields to false, set intended_tag fields in federated execution to the current_tag, and decrement reference counts between time steps and at the end of execution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="429" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="429" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a1212ccaa6cb6dc0bf0c9d9a4e7b86267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
        <definition>lf_token_t* __create_token</definition>
        <argsstring>(size_t element_size)</argsstring>
        <name>__create_token</name>
        <param>
          <type>size_t</type>
          <declname>element_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> struct and initialize it for assignment to a trigger. The value pointer will be NULL and the length will be 0. This function is for tokens that are not expected to be freed, and reactors are not expected to use it. It is used by the code generator to initialize actions with tokens. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of an element carried in the payload or 0 if there is no payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new or recycled <ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> struct. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="470" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="470" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a9d8ea5bc3ac4d18edafab309bc2a9c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
        <definition>lf_token_t* create_token</definition>
        <argsstring>(size_t element_size)</argsstring>
        <name>create_token</name>
        <param>
          <type>size_t</type>
          <declname>element_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new token and initialize it. The value pointer will be NULL and the length will be 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of an element carried in the payload or 0 if there is no payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new or recycled <ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> struct.</para>
</simplesect>
<simplesect kind="note"><para>For multithreaded applications, the caller must hold the mutex lock because it accesses global variables. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="501" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="501" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1affc5826a64f44605c4db375276912944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
        <definition>lf_token_t* __initialize_token_with_value</definition>
        <argsstring>(lf_token_t *token, void *value, int length)</argsstring>
        <name>__initialize_token_with_value</name>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a token for storing an array of the specified length with the specified value containing the array. If the specified token is available (its reference count is 0), then reuse it. Otherwise, create a new token. The element_size for elements of the array is specified by the specified token.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token to populate, if it is available (must not be NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the array, or 1 if it is not an array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Either the specified token or a new one, in each case with a value field pointing to newly allocated memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="523" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="523" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1aa7c982b773ad80af0557e66839358d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
        <definition>lf_token_t* __initialize_token</definition>
        <argsstring>(lf_token_t *token, int length)</argsstring>
        <name>__initialize_token</name>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a token for storing an array of the specified length with new memory allocated (using malloc) for storing that array. If the specified token is available (its reference count is 0), then reuse it. Otherwise, create a new token. The element_size for elements of the array is specified by the specified token. The caller should populate the value and ref_count field of the returned token after this returns.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token to populate, if it is available (must not be NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the array, or 1 if it is not an array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Either the specified token or a new one, in each case with a value field pointing to newly allocated memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="553" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="553" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a7d189a2e2d8b3af5f40e261f3a6b8076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _lf_is_tag_after_stop_tag</definition>
        <argsstring>(tag_t tag)</argsstring>
        <name>_lf_is_tag_after_stop_tag</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A helper function that returns true if the provided tag is after stop tag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to check against stop tag </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="568" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="568" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a1825238bcb81ecc6aeeb6dd42d308089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __pop_events</definition>
        <argsstring>()</argsstring>
        <name>__pop_events</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pop all events from event_q with timestamp equal to current_tag.time, extract all the reactions triggered by these events, and stick them into the reaction queue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="577" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="577" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1abffc41fcd9c4870f3b01157b523a257b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_initialize_timer</definition>
        <argsstring>(trigger_t *timer)</argsstring>
        <name>_lf_initialize_timer</name>
        <param>
          <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the given timer. If this timer has a zero offset, enqueue the reactions it triggers. If this timer is to trigger reactions at a <emphasis>future</emphasis> tag as well, schedule it accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="698" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="698" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a116897d2fd982e8836d2118af641b575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevent__t" kindref="compound">event_t</ref> *</type>
        <definition>event_t* _lf_get_new_event</definition>
        <argsstring>()</argsstring>
        <name>_lf_get_new_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a new event. If there is a recycled event available, use that. If not, allocate a new one. In either case, all fields will be zero&apos;ed out. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="730" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="730" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a662cfd5714e5930f5e1c880f13deba6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_recycle_event</definition>
        <argsstring>(event_t *e)</argsstring>
        <name>_lf_recycle_event</name>
        <param>
          <type><ref refid="structevent__t" kindref="compound">event_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recycle the given event. Zero it out and pushed it onto the recycle queue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="746" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="746" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1affb4de1184b7e6997ed528939de0e0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structevent__t" kindref="compound">event_t</ref> *</type>
        <definition>event_t* _lf_create_dummy_events</definition>
        <argsstring>(trigger_t *trigger, instant_t time, event_t *next, microstep_t offset)</argsstring>
        <name>_lf_create_dummy_events</name>
        <param>
          <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="structevent__t" kindref="compound">event_t</ref> *</type>
          <declname>next</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create dummy events to be used as spacers in the event queue. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>The eventual event to be triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>The logical time of that event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to place after the dummy events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of dummy events to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first dummy event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="767" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="767" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a392daea2eacb39e6d8b940d671949331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_replace_token</definition>
        <argsstring>(event_t *event, lf_token_t *token)</argsstring>
        <name>_lf_replace_token</name>
        <param>
          <type><ref refid="structevent__t" kindref="compound">event_t</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the token on the specified event with the specified token and free the old token. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="794" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="794" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1af1f3a3c4613102e28fc0105408731c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _lf_schedule_at_tag</definition>
        <argsstring>(trigger_t *trigger, tag_t tag, lf_token_t *token)</argsstring>
        <name>_lf_schedule_at_tag</name>
        <param>
          <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedule events at a specific tag (time, microstep), provided that the tag is in the future relative to the current tag. The input time values are absolute.</para>
<para>If there is an event found at the requested tag, the payload is replaced and 0 is returned.</para>
<para>Note that this function is an internal API that must be called with tags that are in order for a given trigger. This means that the following order is illegal: _lf_schedule_at_tag(trigger1, bigger_tag, ...); _lf_schedule_at_tag(trigger1, smaller_tag, ...); where bigger_tag &gt; smaller_tag. This function is primarily used for network communication (which is assumed to be in order).</para>
<para>This function assumes the caller holds the mutex lock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger to be invoked at a later logical time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical tag of the event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token wrapping the payload or NULL for no payload.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 for success, 0 if no new event was scheduled (instead, the payload was updated), or -1 for error (the tag is equal to or less than the current tag). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="829" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="829" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a4d82b4df75ff5c58449cd6079df38417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref></type>
        <definition>handle_t __schedule</definition>
        <argsstring>(trigger_t *trigger, interval_t extra_delay, lf_token_t *token)</argsstring>
        <name>__schedule</name>
        <param>
          <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>extra_delay</declname>
        </param>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedule the specified trigger at current_tag.time plus the offset of the specified trigger plus the delay. See <ref refid="ctarget_8h_1ab666cf351f7ca211945793b37cb29f58" kindref="member">schedule_token()</ref> in <ref refid="reactor_8h" kindref="compound">reactor.h</ref> for details. This is the internal implementation shared by both the threaded and non-threaded versions.</para>
<para>The value is required to be either NULL or a pointer to a token wrapping the payload. The token carries a reference count, and when the reference count decrements to 0, the will be freed. Hence, it is essential that the payload be in memory allocated using malloc.</para>
<para>There are three conditions under which this function will not actually put an event on the event queue and decrement the reference count of the token (if there is one), which could result in the payload being freed. In all three cases, this function returns 0. Otherwise, it returns a handle to the scheduled trigger, which is an integer greater than 0.</para>
<para>The first condition is that a stop has been requested and the trigger offset plus the extra delay is greater than zero. The second condition is that the trigger offset plus the extra delay is greater that the requested stop time (timeout). The third condition is that the trigger argument is null.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger to be invoked at a later logical time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The logical time delay, which gets added to the trigger&apos;s minimum delay, if it has one. If this number is negative, then zero is used instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token wrapping the payload or NULL for no payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the event, or 0 if no new event was scheduled, or -1 for error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1032" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1032" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a663ece708fd7f23ead60fe109fd73d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref></type>
        <definition>handle_t _lf_insert_reactions_for_trigger</definition>
        <argsstring>(trigger_t *trigger, lf_token_t *token)</argsstring>
        <name>_lf_insert_reactions_for_trigger</name>
        <param>
          <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert reactions triggered by trigger to the reaction queue...</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token wrapping the payload or NULL for no payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, or 0 if no new reaction was scheduled because the function was called incorrectly. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1271" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1271" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a02aaee842c2c225482fb73cc838dc43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
        <definition>trigger_t* _lf_action_to_trigger</definition>
        <argsstring>(void *action)</argsstring>
        <name>_lf_action_to_trigger</name>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility function to convert a pointer to action struct into a pointer to the corresponding trigger struct. The type of the action struct is defined by a generated typedef and differs for different actions, which is why the point to the action struct is a void*. All such structs, however, share a common feature, which is tht the first entry in the struct is a pointer to the corresponding <ref refid="structtrigger__t" kindref="compound">trigger_t</ref> struct. This function uses this fact to return a pointer to that <ref refid="structtrigger__t" kindref="compound">trigger_t</ref> struct. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an action struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the corresponding trigger struct. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1357" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1357" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1abadead0c4f54963b062503cf6cb7ace7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_advance_logical_time</definition>
        <argsstring>(instant_t next_time)</argsstring>
        <name>_lf_advance_logical_time</name>
        <param>
          <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
          <declname>next_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advance from the current tag to the next. If the given next_time is equal to the current time, then increase the microstep. Otherwise, update the current time and set the microstep to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>next_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The time step to advance to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1368" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1368" bodyend="1397"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1aa715873b79dee5b9f50daa2fef88cf34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref></type>
        <definition>handle_t _lf_schedule_int</definition>
        <argsstring>(void *action, interval_t extra_delay, int value)</argsstring>
        <name>_lf_schedule_int</name>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>extra_delay</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variant of schedule_value when the value is an integer. See <ref refid="reactor_8h" kindref="compound">reactor.h</ref> for documentation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an action on the self struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1404" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1404" bodyend="1416"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a0b42e0feb13505a45d1a93a0e5920d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
        <definition>lf_token_t* __set_new_array_impl</definition>
        <argsstring>(lf_token_t *token, int length, int num_destinations)</argsstring>
        <name>__set_new_array_impl</name>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_destinations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Library function for allocating memory for an array to be sent on an output. This turns over &quot;ownership&quot; of the allocated memory to the output, so the allocated memory will be freed downstream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token to use as a template (or if it is free, to use). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_destinations</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of destinations (for initializing the reference count). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the new or reused token or null if the template token is incompatible with this usage. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1428" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1428" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a615a0670be544780678a1940a49c8d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void schedule_output_reactions</definition>
        <argsstring>(reaction_t *reaction, int worker)</argsstring>
        <name>schedule_output_reactions</name>
        <param>
          <type><ref refid="structreaction__t" kindref="compound">reaction_t</ref> *</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type>int</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For the specified reaction, if it has produced outputs, insert the resulting triggered reactions into the reaction queue. This procedure assumes the mutex lock is NOT held and grabs the lock only when it actually inserts something onto the reaction queue. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>The reaction that has just executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread number of the worker thread or 0 for unthreaded execution (for tracing). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1449" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1449" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a8ebd417064963fe4e5bdacec21074eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
        <definition>lf_token_t* writable_copy</definition>
        <argsstring>(lf_token_t *token)</argsstring>
        <name>writable_copy</name>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a writable copy of the specified token. If the reference count is 1, this returns the original token rather than a copy. The reference count will still be 1. If the size of the token payload is zero, this also returns the original token. Otherwise, this returns a new token with a reference count of 0. To ensure that the allocated memory is not leaked, this new token must be either passed to an output using set_token() or scheduled with a action using <ref refid="ctarget_8h_1ab666cf351f7ca211945793b37cb29f58" kindref="member">schedule_token()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1619" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1619" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1aeb5079a0bdbc96962460a991aa880725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usage</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>usage</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print a usage message. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1646" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1646" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a8de011aeee37cd0347b5e01d7e3baed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int process_args</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>process_args</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process the command-line arguments. If the command line arguments are not understood, then print a usage message and return 0. Otherwise, return 1. <simplesect kind="return"><para>1 if the arguments processed successfully, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1684" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1684" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a1b0a8eaaff75fcae37d968ca5de88702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void calculate_epoch_offset</definition>
        <argsstring>()</argsstring>
        <name>calculate_epoch_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the necessary offset to bring _LF_CLOCK in parity with the epoch time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1792" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1792" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a25a40b6614565f755233080a384c35f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the priority queues and set logical time to match physical time. This also prints a message reporting the start time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1817" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1817" bodyend="1861"/>
      </memberdef>
      <memberdef kind="function" id="reactor__common_8c_1a06d2cf592cdae0fc5924998df16fa6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void termination</definition>
        <argsstring>()</argsstring>
        <name>termination</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Report elapsed logical and physical times and report if any memory allocated by set_new, set_new_array, or writable_copy has not been freed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" line="1868" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c" bodystart="1868" bodyend="1909"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Runtime<sp/>infrastructure<sp/>for<sp/>the<sp/>C<sp/>target<sp/>of<sp/>Lingua<sp/>Franca.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2019,<sp/>The<sp/>University<sp/>of<sp/>California<sp/>at<sp/>Berkeley.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="17"><highlight class="comment">EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="18"><highlight class="comment">MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="19"><highlight class="comment">THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="22"><highlight class="comment">INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="23"><highlight class="comment">STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="24"><highlight class="comment">THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">***************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reactor_8h" kindref="compound">reactor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tag_8c" kindref="compound">tag.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pqueue.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_8c" kindref="compound">util.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fast<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>duration<sp/>=<sp/>-1LL;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_lf_execution_started<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>stop_tag<sp/>=<sp/>FOREVER_TAG;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepalive_specified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>the<sp/>_is_present<sp/>fields<sp/>of<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>self<sp/>structs<sp/>that<sp/>need<sp/>to<sp/>be<sp/>reinitialized<sp/>at<sp/>the<sp/>start<sp/>of<sp/>each<sp/>time<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>may<sp/>have<sp/>to<sp/>be<sp/>resized<sp/>for<sp/>a<sp/>mutation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">**<sp/>__is_present_fields<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__is_present_fields_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>the<sp/>intended_tag<sp/>fields<sp/>of<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ports<sp/>and<sp/>actions<sp/>that<sp/>need<sp/>to<sp/>be<sp/>reinitialized<sp/>at<sp/>the<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>each<sp/>time<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref>**<sp/>__intended_tag_fields<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__intended_tag_fields_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>the<sp/>token<sp/>fields<sp/>of<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>actions<sp/>and<sp/>inputs<sp/>that<sp/>need<sp/>to<sp/>have<sp/>their<sp/>reference<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decremented<sp/>at<sp/>the<sp/>start<sp/>of<sp/>each<sp/>time<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>may<sp/>have<sp/>to<sp/>be<sp/>resized<sp/>for<sp/>a<sp/>mutation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="structtoken__present__t" kindref="compound">token_present_t</ref>*<sp/>__tokens_with_ref_count<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dynamically<sp/>created<sp/>list<sp/>of<sp/>tokens<sp/>that<sp/>are<sp/>copies<sp/>made</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>result<sp/>of<sp/>mutable<sp/>inputs.<sp/>These<sp/>need<sp/>to<sp/>also<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>__done_using()<sp/>called<sp/>on<sp/>them<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>next<sp/>time<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>_lf_more_tokens_with_ref_count<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__tokens_with_ref_count_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/><ref refid="reactor_8h_1a39f588e1df453139dbb9a4157dda2027" kindref="member">_lf_global_time_STP_offset</ref><sp/>=<sp/>0LL;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1af89b0ab26ec13c6deafeb05c3c14a88e" kindref="member">reset_status_fields_on_input_port_triggers</ref>();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ae3810deff6321784705bf27c79a07d32" kindref="member">enqueue_network_control_reactions</ref>(<ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>reaction_q);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="reactor_8h_1a759ba374f75ea0025b9af1bb35f14d7e" kindref="member">port_status_t</ref><sp/>determine_port_status_if_possible(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portID);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_set_stop_tag(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(tag,<sp/>stop_tag)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_tag<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="comment">//<sp/>The<sp/>following<sp/>functions<sp/>are<sp/>in<sp/>scope<sp/>for<sp/>all<sp/>reactors:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/><ref refid="reactor_8h_1a54be08fbc7990c2d8082a31cbbf6e019" kindref="member">get_stp_offset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1a39f588e1df453139dbb9a4157dda2027" kindref="member">_lf_global_time_STP_offset</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1a75a5bf324229d35fb88541a04449c95b" kindref="member">set_stp_offset</ref>(<ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a39f588e1df453139dbb9a4157dda2027" kindref="member">_lf_global_time_STP_offset</ref><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>readable_time(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>is<sp/>negative<sp/>or<sp/>below<sp/>1000,<sp/>just<sp/>print<sp/>it<sp/>and<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time<sp/>&lt;<sp/>1000LL)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%lld&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>clauses[7];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(time<sp/>&gt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clauses[count++]<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>time/1000LL;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Highest<sp/>order<sp/>clause<sp/>should<sp/>not<sp/>be<sp/>filled<sp/>with<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>to_print<sp/>=<sp/>clauses[--count]<sp/>%<sp/>1000LL;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%lld&quot;</highlight><highlight class="normal">,<sp/>to_print);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to_print<sp/>&gt;=<sp/>100LL)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to_print<sp/>&gt;=<sp/>10LL)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count--<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_print<sp/>=<sp/>clauses[count]<sp/>%<sp/>1000LL;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;,%03lld,&quot;</highlight><highlight class="normal">,<sp/>to_print);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;,%03lld&quot;</highlight><highlight class="normal">,<sp/>clauses[0]<sp/>%<sp/>1000LL);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="comment">//<sp/>The<sp/>following<sp/>is<sp/>not<sp/>in<sp/>scope<sp/>for<sp/>reactors:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>event_q;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>sorting<sp/>by<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>reaction_q;<sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>sorting<sp/>by<sp/>deadline.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>recycle_q;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>recycling<sp/>malloc&apos;d<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>next_q;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>temporarily<sp/>storing<sp/>the<sp/>next<sp/>event<sp/>lined<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>up<sp/>in<sp/>superdense<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/>__handle<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>**********<sp/>Priority<sp/>Queue<sp/>Support<sp/>Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_reverse_order(<ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref><sp/>thiz,<sp/><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref><sp/>that)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(thiz<sp/>&gt;<sp/>that);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_no_particular_order(<ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref><sp/>thiz,<sp/><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref><sp/>that)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_matches(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>next,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>curr)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(((<ref refid="structevent__t" kindref="compound">event_t</ref>*)next)-&gt;trigger<sp/>==<sp/>((<ref refid="structevent__t" kindref="compound">event_t</ref>*)curr)-&gt;trigger);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reaction_matches(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>next,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>curr)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>curr);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref><sp/>get_event_time(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref>)(((<ref refid="structevent__t" kindref="compound">event_t</ref>*)<sp/>a)-&gt;time);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="pqueue_8h_1ad8239ddc32134716f57e54bb972f6bf0" kindref="member">pqueue_pri_t</ref><sp/>get_reaction_index(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)<sp/>a)-&gt;index;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_event_position(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structevent__t" kindref="compound">event_t</ref>*)<sp/>a)-&gt;pos;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_reaction_position(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)<sp/>a)-&gt;pos;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_event_position(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structevent__t" kindref="compound">event_t</ref>*)<sp/>a)-&gt;pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_reaction_position(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)<sp/>a)-&gt;pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_reaction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*reaction)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref><sp/>*r<sp/>=<sp/>(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)reaction;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>chain_id:%llu,<sp/>index:<sp/>%llx,<sp/>reaction:<sp/>%p&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;name,<sp/>r-&gt;chain_id,<sp/>r-&gt;index,<sp/>r);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_event(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*event)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref><sp/>*e<sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)event;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;time:<sp/>%lld,<sp/>trigger:<sp/>%p,<sp/>token:<sp/>%p&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;time,<sp/>e-&gt;trigger,<sp/>e-&gt;token);</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>**********<sp/>Priority<sp/>Queue<sp/>Support<sp/>End</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__count_payload_allocations;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__count_token_allocations;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>__token_recycling_bin<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__token_recycling_bin_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor">#define<sp/>__TOKEN_RECYCLING_BIN_SIZE_LIMIT<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>token_freed<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>NOT_FREED,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>was<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>VALUE_FREED,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>(payload)<sp/>was<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>TOKEN_FREED<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>and<sp/>the<sp/>token<sp/>were<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">}<sp/>token_freed;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">token_freed<sp/>__done_using(<ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>token_freed<sp/>result<sp/>=<sp/>NOT_FREED;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Token<sp/>being<sp/>freed<sp/>that<sp/>has<sp/>already<sp/>been<sp/>freed:<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>token);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_FREED;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>--;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__done_using:<sp/>ref_count<sp/>=<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>frees<sp/>to<sp/>issue<sp/>a<sp/>warning<sp/>if<sp/>this<sp/>is<sp/>never<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>free<sp/>the<sp/>value<sp/>field<sp/>if<sp/>it<sp/>is<sp/>garbage<sp/>collected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__count_payload_allocations--;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="reactor_8h_1a20b6cff12498f2db056084f86154d9a4" kindref="member">OK_TO_FREE</ref><sp/>!=<sp/>token_only)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__done_using:<sp/>Freeing<sp/>allocated<sp/>memory<sp/>for<sp/>payload<sp/>(token<sp/>value):<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>VALUE_FREED;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tokens<sp/>that<sp/>are<sp/>created<sp/>at<sp/>the<sp/>start<sp/>of<sp/>execution<sp/>and<sp/>associated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>ports<sp/>or<sp/>actions<sp/>are<sp/>pointed<sp/>to<sp/>by<sp/>those<sp/>actions<sp/>and<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ports<sp/>and<sp/>should<sp/>not<sp/>be<sp/>freed.<sp/>They<sp/>are<sp/>expected<sp/>to<sp/>be<sp/>reused<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token-&gt;<ref refid="structlf__token__t_1aa002374ec3b3165193393952dd216a90" kindref="member">ok_to_free</ref>)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>free<sp/>the<sp/>lf_token_t<sp/>struct<sp/>also.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__token_recycling_bin_size<sp/>&lt;<sp/>__TOKEN_RECYCLING_BIN_SIZE_LIMIT)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recycle<sp/>instead<sp/>of<sp/>freeing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1a3b993d54120f7b0137785c99f7ddc118" kindref="member">next_free</ref><sp/>=<sp/>__token_recycling_bin;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__token_recycling_bin<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__token_recycling_bin_size++;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recycling<sp/>bin<sp/>is<sp/>full.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(token);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__count_token_allocations--;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__done_using:<sp/>Freeing<sp/>allocated<sp/>memory<sp/>for<sp/>token:<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>token);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>TOKEN_FREED;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_enqueue_reaction(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>reaction);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1af8aacf433fcf349ffa1b163962eb3681" kindref="member">__start_time_step</ref>()<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;---------<sp/>Start<sp/>time<sp/>step<sp/>at<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>__tokens_with_ref_count_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(__tokens_with_ref_count[i].status)<sp/>==<sp/>present)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__tokens_with_ref_count[i].reset_is_present)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(__tokens_with_ref_count[i].status)<sp/>=<sp/>absent;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(*(__tokens_with_ref_count[i].token));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>handle<sp/>dynamically<sp/>created<sp/>tokens<sp/>for<sp/>mutable<sp/>inputs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_lf_more_tokens_with_ref_count<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>next<sp/>=<sp/>_lf_more_tokens_with_ref_count-&gt;<ref refid="structlf__token__t_1a3b993d54120f7b0137785c99f7ddc118" kindref="member">next_free</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(_lf_more_tokens_with_ref_count);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_more_tokens_with_ref_count<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>__is_present_fields_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*__is_present_fields[i]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>For<sp/>now,<sp/>an<sp/>intended<sp/>tag<sp/>of<sp/>(NEVER,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indicates<sp/>that<sp/>it<sp/>has<sp/>never<sp/>been<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*__intended_tag_fields[i]<sp/>=<sp/>(<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{NEVER,<sp/>0};</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>absent<sp/>fields<sp/>on<sp/>network<sp/>ports<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>their<sp/>status<sp/>is<sp/>unknown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1af89b0ab26ec13c6deafeb05c3c14a88e" kindref="member">reset_status_fields_on_input_port_triggers</ref>();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>__create_token(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>element_size)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>recycling<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__token_recycling_bin<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>__token_recycling_bin;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__token_recycling_bin<sp/>=<sp/>token-&gt;<ref refid="structlf__token__t_1a3b993d54120f7b0137785c99f7ddc118" kindref="member">next_free</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__token_recycling_bin_size--;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__create_token:<sp/>Retrieved<sp/>token<sp/>from<sp/>the<sp/>recycling<sp/>bin:<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>token);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>(<ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__create_token:<sp/>Allocated<sp/>memory<sp/>for<sp/>token:<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>token);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1aa907a3d0901bd1ae3ab88fecb8dc11e5" kindref="member">length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1af2b9d91b8dcfbc640f0cf52d4fac6035" kindref="member">element_size</ref><sp/>=<sp/>element_size;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1aa002374ec3b3165193393952dd216a90" kindref="member">ok_to_free</ref><sp/>=<sp/>no;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1a3b993d54120f7b0137785c99f7ddc118" kindref="member">next_free</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/><ref refid="reactor_8h_1a9d8ea5bc3ac4d18edafab309bc2a9c8a" kindref="member">create_token</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>element_size)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;create_token:<sp/>element_size:<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>element_size);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>__count_token_allocations++;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>result<sp/>=<sp/>__create_token(element_size);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;<ref refid="structlf__token__t_1aa002374ec3b3165193393952dd216a90" kindref="member">ok_to_free</ref><sp/>=<sp/><ref refid="reactor_8h_1a20b6cff12498f2db056084f86154d9a4" kindref="member">OK_TO_FREE</ref>;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>__initialize_token_with_value(<ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(token<sp/>!=<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>necessary,<sp/>allocate<sp/>memory<sp/>for<sp/>a<sp/>new<sp/>lf_token_t<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>assumes<sp/>that<sp/>the<sp/>lf_token_t*<sp/>in<sp/>the<sp/>self<sp/>struct<sp/>has<sp/>been<sp/>initialized<sp/>to<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>result<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>a<sp/>token<sp/>%p<sp/>with<sp/>ref_count<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>==<sp/>NULL<sp/>||<sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>specified<sp/>token<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="reactor_8h_1a9d8ea5bc3ac4d18edafab309bc2a9c8a" kindref="member">create_token</ref>(token-&gt;<ref refid="structlf__token__t_1af2b9d91b8dcfbc640f0cf52d4fac6035" kindref="member">element_size</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;<ref refid="structlf__token__t_1aa907a3d0901bd1ae3ab88fecb8dc11e5" kindref="member">length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>__initialize_token(<ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(token<sp/>!=<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>storing<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value<sp/>=<sp/>malloc(token-&gt;<ref refid="structlf__token__t_1af2b9d91b8dcfbc640f0cf52d4fac6035" kindref="member">element_size</ref><sp/>*<sp/>length);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>allocations<sp/>to<sp/>issue<sp/>a<sp/>warning<sp/>if<sp/>this<sp/>is<sp/>never<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>__count_payload_allocations++;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__initialize_token_with_value(token,<sp/>value,<sp/>length);</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_lf_is_tag_after_stop_tag(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(tag,<sp/>stop_tag)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1a1825238bcb81ecc6aeeb6dd42d308089" kindref="member">__pop_events</ref>()<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)<ref refid="pqueue_8h_1a2919d3e817688b81da746d4123f51ba3" kindref="member">pqueue_peek</ref>(event_q);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(event<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>event-&gt;time<sp/>==<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)<ref refid="pqueue_8h_1abec9363c7a9cc89190bf0925a4a1652c" kindref="member">pqueue_pop</ref>(event_q);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;is_dummy)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Popped<sp/>dummy<sp/>event<sp/>from<sp/>the<sp/>event<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;next<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Putting<sp/>event<sp/>from<sp/>the<sp/>event<sp/>queue<sp/>for<sp/>the<sp/>next<sp/>microstep.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(next_q,<sp/>event-&gt;next);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(event);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Peek<sp/>at<sp/>the<sp/>next<sp/>event<sp/>in<sp/>the<sp/>event<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)<ref refid="pqueue_8h_1a2919d3e817688b81da746d4123f51ba3" kindref="member">pqueue_peek</ref>(event_q);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref><sp/>*token<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;token;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>the<sp/>corresponding<sp/>reactions<sp/>onto<sp/>the<sp/>reaction<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;trigger-&gt;number_of_reactions;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref><sp/>*reaction<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;trigger-&gt;reactions[i];</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>enqueue<sp/>this<sp/>reaction<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(reaction_q,<sp/>reaction)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>federated<sp/>execution,<sp/>an<sp/>intended<sp/>tag<sp/>that<sp/>is<sp/>not<sp/>(NEVER,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indicates<sp/>that<sp/>this<sp/>particular<sp/>event<sp/>is<sp/>triggered<sp/>by<sp/>a<sp/>network<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>intended<sp/>tag<sp/>is<sp/>set<sp/>in<sp/>handle_timed_message<sp/>in<sp/>federate.c<sp/>whenever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>timed<sp/>message<sp/>arrives<sp/>from<sp/>another<sp/>federate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;intended_tag.time<sp/>!=<sp/>NEVER)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>intended<sp/>tag<sp/>of<sp/>the<sp/>event<sp/>is<sp/>actually<sp/>set,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transfer<sp/>the<sp/>intended<sp/>tag<sp/>to<sp/>the<sp/>trigger<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>reaction<sp/>can<sp/>access<sp/>the<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;trigger-&gt;intended_tag<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;intended_tag;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>check<sp/>if<sp/>it<sp/>is<sp/>in<sp/>the<sp/>past<sp/>compared<sp/>to<sp/>the<sp/>current<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(event-&gt;intended_tag,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>triggered<sp/>reaction<sp/>with<sp/>a<sp/>STP<sp/>violation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction-&gt;is_STP_violated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Trigger<sp/>%p<sp/>has<sp/>violated<sp/>the<sp/>reaction&apos;s<sp/>STP<sp/>offset.<sp/>Intended<sp/>tag:<sp/>(%lld,<sp/>%u).<sp/>Current<sp/>tag:<sp/>(%lld,<sp/>%u)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event-&gt;trigger,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event-&gt;intended_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>event-&gt;intended_tag.microstep,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Enqueing<sp/>reaction<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>reaction-&gt;name);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(reaction_q,<sp/>reaction);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Reaction<sp/>is<sp/>already<sp/>on<sp/>the<sp/>reaction_q:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>reaction-&gt;name);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>trigger<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;trigger-&gt;status<sp/>=<sp/>present;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>trigger<sp/>is<sp/>a<sp/>periodic<sp/>timer,<sp/>create<sp/>a<sp/>new<sp/>event<sp/>for<sp/>its<sp/>next<sp/>execution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;trigger-&gt;is_timer<sp/>&amp;&amp;<sp/>event-&gt;trigger-&gt;period<sp/>&gt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reschedule<sp/>the<sp/>trigger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>delay<sp/>here<sp/>may<sp/>be<sp/>negative<sp/>because<sp/>the<sp/>__schedule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>will<sp/>add<sp/>the<sp/>trigger-&gt;offset,<sp/>which<sp/>we<sp/>don&apos;t<sp/>want<sp/>at<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>argument<sp/>indicates<sp/>that<sp/>there<sp/>is<sp/>no<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a1b914dafd583948c817b0ae6ce739b6d" kindref="member">__schedule</ref>(event-&gt;trigger,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event-&gt;trigger-&gt;period<sp/>-<sp/>event-&gt;trigger-&gt;offset,<sp/>NULL);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>token<sp/>pointer<sp/>into<sp/>the<sp/>trigger<sp/>struct<sp/>so<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reactions<sp/>can<sp/>access<sp/>it.<sp/>This<sp/>overwrites<sp/>the<sp/>previous<sp/>template<sp/>token,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>which<sp/>we<sp/>decrement<sp/>the<sp/>reference<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;trigger-&gt;token<sp/>!=<sp/>event-&gt;token</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>event-&gt;trigger-&gt;token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>previous<sp/>one<sp/>ok_to_free<sp/>so<sp/>we<sp/>don&apos;t<sp/>get<sp/>a<sp/>memory<sp/>leak.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;trigger-&gt;token-&gt;ok_to_free<sp/>=<sp/><ref refid="reactor_8h_1a20b6cff12498f2db056084f86154d9a4" kindref="member">OK_TO_FREE</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>token<sp/>if<sp/>its<sp/>reference<sp/>count<sp/>is<sp/>zero.<sp/>Since<sp/>__done_using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decrements<sp/>the<sp/>reference<sp/>count,<sp/>first<sp/>increment<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;trigger-&gt;token-&gt;ref_count++;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(event-&gt;trigger-&gt;token);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;trigger-&gt;token<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>this<sp/>token<sp/>from<sp/>being<sp/>freed.<sp/>It<sp/>is<sp/>the<sp/>new<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>might<sp/>be<sp/>null<sp/>if<sp/>there<sp/>are<sp/>no<sp/>reactions<sp/>to<sp/>the<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1aa002374ec3b3165193393952dd216a90" kindref="member">ok_to_free</ref><sp/>=<sp/>no;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>trigger<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;trigger-&gt;status<sp/>=<sp/>present;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>event<sp/>points<sp/>to<sp/>a<sp/>next<sp/>event,<sp/>insert<sp/>it<sp/>into<sp/>the<sp/>next<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;next<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>next<sp/>event<sp/>into<sp/>the<sp/>next<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(next_q,<sp/>event-&gt;next);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(event);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Peek<sp/>at<sp/>the<sp/>next<sp/>event<sp/>in<sp/>the<sp/>event<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)<ref refid="pqueue_8h_1a2919d3e817688b81da746d4123f51ba3" kindref="member">pqueue_peek</ref>(event_q);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>network<sp/>dependent<sp/>reactions<sp/>for<sp/>network<sp/>input<sp/>ports<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>reaction<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ae3810deff6321784705bf27c79a07d32" kindref="member">enqueue_network_control_reactions</ref>(reaction_q);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;There<sp/>are<sp/>%d<sp/>events<sp/>deferred<sp/>to<sp/>the<sp/>next<sp/>microstep.&quot;</highlight><highlight class="normal">,<sp/><ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(next_q));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>populating<sp/>the<sp/>reaction<sp/>queue,<sp/>see<sp/>if<sp/>there<sp/>are<sp/>things<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>queue<sp/>to<sp/>put<sp/>back<sp/>into<sp/>the<sp/>event<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="pqueue_8h_1a2919d3e817688b81da746d4123f51ba3" kindref="member">pqueue_peek</ref>(next_q)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(event_q,<sp/><ref refid="pqueue_8h_1abec9363c7a9cc89190bf0925a4a1652c" kindref="member">pqueue_pop</ref>(next_q));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_initialize_timer(<ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>timer)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>delay<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer-&gt;offset<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>timer-&gt;number_of_reactions;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_enqueue_reaction(timer-&gt;reactions[i]);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1a896a14a2ac7b800e93d4d2210321448e" kindref="member">tracepoint_schedule</ref>(timer,<sp/>0LL);<sp/></highlight><highlight class="comment">//<sp/>Trace<sp/>even<sp/>though<sp/>schedule<sp/>is<sp/>not<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer-&gt;period<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Schedule<sp/>at<sp/>t<sp/>+<sp/>period.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>timer-&gt;period;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Schedule<sp/>at<sp/>t<sp/>+<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>timer-&gt;offset;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>an<sp/>event_t<sp/>struct<sp/>to<sp/>put<sp/>on<sp/>the<sp/>event<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recycle<sp/>event_t<sp/>structs,<sp/>if<sp/>possible.<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>e<sp/>=<sp/><ref refid="reactor_8h_1a116897d2fd982e8836d2118af641b575" kindref="member">_lf_get_new_event</ref>();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;trigger<sp/>=<sp/>timer;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;time<sp/>=<sp/><ref refid="tag_8c_1a9da5960071964c9c2bdb602526da0565" kindref="member">get_logical_time</ref>()<sp/>+<sp/>delay;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>No<sp/>lock<sp/>is<sp/>being<sp/>held.<sp/>Assuming<sp/>this<sp/>only<sp/>happens<sp/>at<sp/>startup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(event_q,<sp/>e);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8c_1a896a14a2ac7b800e93d4d2210321448e" kindref="member">tracepoint_schedule</ref>(timer,<sp/>delay);<sp/></highlight><highlight class="comment">//<sp/>Trace<sp/>even<sp/>though<sp/>schedule<sp/>is<sp/>not<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/><ref refid="reactor_8h_1a116897d2fd982e8836d2118af641b575" kindref="member">_lf_get_new_event</ref>()<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recycle<sp/>event_t<sp/>structs,<sp/>if<sp/>possible.<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>e<sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)<ref refid="pqueue_8h_1abec9363c7a9cc89190bf0925a4a1652c" kindref="member">pqueue_pop</ref>(recycle_q);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;intended_tag<sp/>=<sp/>(<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{<sp/>.time<sp/>=<sp/>NEVER,<sp/>.microstep<sp/>=<sp/>0u};</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(<ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;time<sp/>=<sp/>0LL;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;trigger<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;token<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;is_dummy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;intended_tag<sp/>=<sp/>(<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{<sp/>.time<sp/>=<sp/>NEVER,<sp/>.microstep<sp/>=<sp/>0u};</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(recycle_q,<sp/>e);</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>_lf_create_dummy_events(<ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger,<sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>time,<sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>next,<sp/><ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref><sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>first_dummy<sp/>=<sp/><ref refid="reactor_8h_1a116897d2fd982e8836d2118af641b575" kindref="member">_lf_get_new_event</ref>();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>dummy<sp/>=<sp/>first_dummy;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy-&gt;time<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy-&gt;is_dummy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy-&gt;trigger<sp/>=<sp/>trigger;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy-&gt;next<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy-&gt;next<sp/>=<sp/><ref refid="reactor_8h_1a116897d2fd982e8836d2118af641b575" kindref="member">_lf_get_new_event</ref>();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy<sp/>=<sp/>dummy-&gt;next;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy-&gt;time<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy-&gt;is_dummy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy-&gt;trigger<sp/>=<sp/>trigger;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset--;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first_dummy;</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_replace_token(<ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>event,<sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;token<sp/>!=<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>existing<sp/>token,<sp/>if<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(event-&gt;token);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>token<sp/>with<sp/>ours.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;token<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1af1f3a3c4613102e28fc0105408731c5e" kindref="member">_lf_schedule_at_tag</ref>(<ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger,<sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag,<sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>current_logical_tag<sp/>=<sp/><ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;_lf_schedule_at_tag()<sp/>called<sp/>with<sp/>tag<sp/>(%lld,<sp/>%u)<sp/>at<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>tag.microstep,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_logical_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>current_logical_tag.microstep);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(tag,<sp/>current_logical_tag)<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;_lf_schedule_at_tag():<sp/>requested<sp/>to<sp/>schedule<sp/>an<sp/>event<sp/>in<sp/>the<sp/>past.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>the<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>++;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>schedule<sp/>events<sp/>if<sp/>the<sp/>tag<sp/>is<sp/>after<sp/>the<sp/>stop<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(tag))<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;_lf_schedule_at_tag:<sp/>event<sp/>time<sp/>is<sp/>past<sp/>the<sp/>timeout.<sp/>Discarding<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(token);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>e<sp/>=<sp/><ref refid="reactor_8h_1a116897d2fd982e8836d2118af641b575" kindref="member">_lf_get_new_event</ref>();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>event<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;time<sp/>=<sp/>tag.time;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8c_1a896a14a2ac7b800e93d4d2210321448e" kindref="member">tracepoint_schedule</ref>(trigger,<sp/>tag.time<sp/>-<sp/>current_logical_tag.time);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>event<sp/>points<sp/>to<sp/>this<sp/>trigger<sp/>so<sp/>when<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dequeued,<sp/>it<sp/>will<sp/>trigger<sp/>this<sp/>trigger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;trigger<sp/>=<sp/>trigger;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;token<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>intended<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;intended_tag<sp/>=<sp/>trigger-&gt;intended_tag;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>found<sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref><sp/>*)<ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(event_q,<sp/>e);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tag.microstep<sp/>==<sp/>0u)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>microstep<sp/>is<sp/>0,<sp/>which<sp/>means<sp/>that<sp/>the<sp/>event<sp/>is<sp/>being<sp/>scheduled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>a<sp/>future<sp/>time<sp/>and<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>skip<sp/>list<sp/>of<sp/>events<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>that<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>the<sp/>event<sp/>is<sp/>a<sp/>dummy<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>real<sp/>event.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found-&gt;is_dummy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(trigger-&gt;policy)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>drop:</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found-&gt;token<sp/>!=<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(token);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>replace:</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>payload<sp/>of<sp/>the<sp/>event<sp/>at<sp/>the<sp/>head<sp/>with<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_replace_token(found,<sp/>token);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>a<sp/>microstep<sp/>to<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intended<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag((<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{.time=found-&gt;time,.microstep=1}))<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scheduling<sp/>e<sp/>will<sp/>incur<sp/>a<sp/>microstep<sp/>after<sp/>the<sp/>stop<sp/>tag,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>illegal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found-&gt;next<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;_lf_schedule_at_tag:<sp/>in-order<sp/>contract<sp/>violated.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found-&gt;next<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>requesting<sp/>a<sp/>microstep<sp/>greater<sp/>than<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>there<sp/>is<sp/>already<sp/>an<sp/>event<sp/>for<sp/>this<sp/>trigger<sp/>on<sp/>the<sp/>event<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>That<sp/>event<sp/>may<sp/>itself<sp/>be<sp/>a<sp/>dummy<sp/>event<sp/>for<sp/>a<sp/>real<sp/>event<sp/>that<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>at<sp/>a<sp/>microstep<sp/>greater<sp/>than<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>insert<sp/>our<sp/>event<sp/>into<sp/>the<sp/>chain<sp/>or<sp/>append<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>chain,<sp/>depending<sp/>on<sp/>which<sp/>microstep<sp/>is<sp/>lesser.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref><sp/>microstep_of_found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tag.time<sp/>==<sp/>current_logical_tag.time)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>situation<sp/>where<sp/>the<sp/>head<sp/>of<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>an<sp/>event<sp/>with<sp/>microstep<sp/>==<sp/>current_microstep<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>should<sp/>be<sp/>reflected<sp/>in<sp/>our<sp/>steps<sp/>calculation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>microstep_of_found<sp/>+=<sp/>current_logical_tag.microstep<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Indicating<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>found<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>at<sp/>this<sp/>microstep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Follow<sp/>the<sp/>chain<sp/>of<sp/>events<sp/>until<sp/>the<sp/>right<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>insert<sp/>the<sp/>new<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(microstep_of_found<sp/>&lt;<sp/>tag.microstep<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found-&gt;next<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>chain<sp/>stops<sp/>short<sp/>of<sp/>where<sp/>we<sp/>want<sp/>to<sp/>be.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>exactly<sp/>one<sp/>microstep<sp/>short<sp/>of<sp/>where<sp/>we<sp/>want<sp/>to<sp/>be,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>we<sp/>don&apos;t<sp/>need<sp/>a<sp/>dummy.<sp/>Otherwise,<sp/>we<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref><sp/>undershot_by<sp/>=<sp/>(tag.microstep<sp/>-<sp/>1)<sp/>-<sp/>microstep_of_found;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(undershot_by<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found-&gt;next<sp/>=<sp/>_lf_create_dummy_events(trigger,<sp/>tag.time,<sp/>e,<sp/>undershot_by);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found-&gt;next<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>found-&gt;next;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>microstep_of_found++;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point,<sp/>microstep_of_found<sp/>==<sp/>tag.microstep<sp/>-<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found-&gt;next<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found-&gt;next<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(trigger-&gt;policy)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>drop:</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found-&gt;next-&gt;token<sp/>!=<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(token);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>replace:</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>payload<sp/>of<sp/>the<sp/>event<sp/>at<sp/>the<sp/>head<sp/>with<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_replace_token(found-&gt;next,<sp/>token);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>a<sp/>microstep<sp/>to<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intended<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag((<ref refid="structtag__t" kindref="compound">tag_t</ref>){.time=found-&gt;time,.microstep=microstep_of_found+1}))<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scheduling<sp/>e<sp/>will<sp/>incur<sp/>a<sp/>microstep<sp/>at<sp/>timeout,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>illegal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found-&gt;next-&gt;next<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;_lf_schedule_at_tag:<sp/>in-order<sp/>contract<sp/>violated.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found-&gt;next-&gt;next<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>existing<sp/>event<sp/>queued.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a818d416d39f7c82f1fbeb5c5d3149f0d" kindref="member">microstep_t</ref><sp/>relative_microstep<sp/>=<sp/>tag.microstep;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tag.time<sp/>==<sp/>current_logical_tag.time)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relative_microstep<sp/>-=<sp/>current_logical_tag.microstep;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((tag.time<sp/>==<sp/>current_logical_tag.time)<sp/>&amp;&amp;<sp/>(relative_microstep<sp/>==<sp/>1))<sp/>||</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.microstep<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>need<sp/>a<sp/>dummy<sp/>event<sp/>if<sp/>we<sp/>are<sp/>scheduling<sp/>at<sp/>1<sp/>microstep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>future<sp/>at<sp/>current<sp/>time<sp/>or<sp/>at<sp/>microstep<sp/>0<sp/>in<sp/>a<sp/>future<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(event_q,<sp/>e);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>dummy<sp/>event.<sp/>Insert<sp/>it<sp/>into<sp/>the<sp/>queue,<sp/>and<sp/>let<sp/>its<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>point<sp/>to<sp/>the<sp/>actual<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(event_q,<sp/>_lf_create_dummy_events(trigger,<sp/>tag.time,<sp/>e,<sp/>relative_microstep));</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/><ref refid="reactor_8h_1a1b914dafd583948c817b0ae6ce739b6d" kindref="member">__schedule</ref>(<ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger,<sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>extra_delay,<sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>schedule<sp/>is<sp/>called<sp/>after<sp/>stop_tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>critical<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(token);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;schedule()<sp/>called<sp/>after<sp/>stop<sp/>tag.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_delay<sp/>&lt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;schedule<sp/>called<sp/>with<sp/>a<sp/>negative<sp/>extra_delay<sp/>%lld.<sp/>Replacing<sp/>with<sp/>zero.&quot;</highlight><highlight class="normal">,<sp/>extra_delay);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_delay<sp/>=<sp/>0LL;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__schedule:<sp/>scheduling<sp/>trigger<sp/>%p<sp/>with<sp/>delay<sp/>%lld<sp/>and<sp/>token<sp/>%p.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger,<sp/>extra_delay,<sp/>token);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>trigger<sp/>argument<sp/>could<sp/>be<sp/>null,<sp/>meaning<sp/>that<sp/>nothing<sp/>is<sp/>triggered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doing<sp/>this<sp/>after<sp/>incrementing<sp/>the<sp/>reference<sp/>count<sp/>ensures<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>payload<sp/>will<sp/>be<sp/>freed,<sp/>if<sp/>there<sp/>is<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(token);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>the<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>++;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>tag<sp/>(the<sp/>logical<sp/>timestamp<sp/>for<sp/>the<sp/>future<sp/>event).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>first<sp/>do<sp/>this<sp/>assuming<sp/>it<sp/>is<sp/>logical<sp/>action<sp/>and<sp/>then,<sp/>if<sp/>it<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physical<sp/>action,<sp/>modify<sp/>it<sp/>if<sp/>physical<sp/>time<sp/>exceeds<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>delay<sp/>=<sp/>trigger-&gt;offset<sp/>+<sp/>extra_delay;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>intended_time<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>+<sp/>delay;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__schedule:<sp/>current_tag.time<sp/>=<sp/>%lld.<sp/>Total<sp/>logical<sp/>delay<sp/>=<sp/>%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time,<sp/>delay);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>min_spacing<sp/>=<sp/>trigger-&gt;period;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>e<sp/>=<sp/><ref refid="reactor_8h_1a116897d2fd982e8836d2118af641b575" kindref="member">_lf_get_new_event</ref>();</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>next<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>payload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;token<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>event<sp/>points<sp/>to<sp/>this<sp/>trigger<sp/>so<sp/>when<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dequeued,<sp/>it<sp/>will<sp/>trigger<sp/>this<sp/>trigger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;trigger<sp/>=<sp/>trigger;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>trigger<sp/>is<sp/>physical,<sp/>then<sp/>we<sp/>need<sp/>to<sp/>check<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physical<sp/>time<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>intended<sp/>time<sp/>and,<sp/>if<sp/>so,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>the<sp/>intended<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger-&gt;is_physical)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>current<sp/>physical<sp/>time<sp/>and<sp/>assign<sp/>it<sp/>as<sp/>the<sp/>intended<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_time<sp/>=<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>()<sp/>+<sp/>delay;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>We<sp/>need<sp/>to<sp/>verify<sp/>that<sp/>we<sp/>are<sp/>executing<sp/>within<sp/>a<sp/>reaction?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>reactor_threaded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>logical<sp/>action<sp/>is<sp/>scheduled<sp/>asynchronously<sp/>(which<sp/>should<sp/>never<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>done)<sp/>the<sp/>computed<sp/>tag<sp/>can<sp/>be<sp/>smaller<sp/>than<sp/>the<sp/>current<sp/>tag,<sp/>in<sp/>which<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>adjusted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>This<sp/>can<sp/>go<sp/>away<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>we<sp/>have<sp/>eliminated<sp/>the<sp/>possibility<sp/>to<sp/>have<sp/>a<sp/>negative<sp/>additional<sp/>delay;<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>we<sp/>detect<sp/>the<sp/>asynchronous<sp/>use<sp/>of<sp/>logical<sp/>actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intended_time<sp/>&lt;<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>schedule<sp/>an<sp/>event<sp/>earlier<sp/>than<sp/>current<sp/>time<sp/>by<sp/>%lld<sp/>nsec!<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Revising<sp/>to<sp/>the<sp/>current<sp/>time<sp/>%lld.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/>intended_time,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_time<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Event<sp/>inherits<sp/>the<sp/>original<sp/>intended_tag<sp/>of<sp/>the<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>by<sp/>the<sp/>network<sp/>stack<sp/>(or<sp/>the<sp/>default,<sp/>which<sp/>is<sp/>(NEVER,0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;intended_tag<sp/>=<sp/>trigger-&gt;intended_tag;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>existing<sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)(trigger-&gt;last);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>conflicts<sp/>(a<sp/>queued<sp/>event<sp/>with<sp/>the<sp/>same<sp/>trigger<sp/>and<sp/>time).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger-&gt;period<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>minimum<sp/>spacing<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>intended_tag<sp/>=<sp/>(<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{.time<sp/>=<sp/>intended_time,<sp/>.microstep<sp/>=<sp/>0u};</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;time<sp/>=<sp/>intended_tag.time;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/>found<sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref><sp/>*)<ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(event_q,<sp/>e);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>conflicts.<sp/>Let<sp/>events<sp/>pile<sp/>up<sp/>in<sp/>super<sp/>dense<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.microstep++;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>to<sp/>the<sp/>last<sp/>node<sp/>in<sp/>the<sp/>linked<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(found-&gt;next<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>found-&gt;next;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_tag.microstep++;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(intended_tag))<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>schedule<sp/>an<sp/>event<sp/>after<sp/>stop_tag<sp/>was<sp/>rejected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scheduling<sp/>an<sp/>event<sp/>will<sp/>incur<sp/>a<sp/>microstep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>the<sp/>stop<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hook<sp/>the<sp/>event<sp/>into<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found-&gt;next<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);<sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>return<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>not<sp/>conflicts,<sp/>schedule<sp/>as<sp/>usual.<sp/>If<sp/>intended<sp/>time<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equal<sp/>to<sp/>the<sp/>current<sp/>logical<sp/>time,<sp/>the<sp/>event<sp/>will<sp/>effectively<sp/>be<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scheduled<sp/>at<sp/>the<sp/>next<sp/>microstep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!trigger-&gt;is_timer<sp/>&amp;&amp;<sp/>existing<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>exists<sp/>a<sp/>previously<sp/>scheduled<sp/>event.<sp/>It<sp/>determines<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>earliest<sp/>time<sp/>at<sp/>which<sp/>the<sp/>new<sp/>event<sp/>can<sp/>be<sp/>scheduled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>see<sp/>whether<sp/>the<sp/>event<sp/>is<sp/>too<sp/>early.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>earliest_time<sp/>=<sp/>existing-&gt;time<sp/>+<sp/>min_spacing;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>a<sp/>previously<sp/>scheduled<sp/>event;<sp/>earliest<sp/>possible<sp/>time<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>min<sp/>spacing:<sp/>%lld&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>earliest_time);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>event<sp/>is<sp/>early,<sp/>see<sp/>which<sp/>policy<sp/>applies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(earliest_time<sp/>&gt;=<sp/>intended_time)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Event<sp/>is<sp/>early.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(trigger-&gt;policy)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>drop:</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Policy<sp/>is<sp/>drop.<sp/>Dropping<sp/>the<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_spacing<sp/>&gt;<sp/>0<sp/>||<sp/></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(event_q,<sp/>existing)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recycle<sp/>the<sp/>new<sp/>event<sp/>and<sp/>the<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(existing-&gt;token<sp/>!=<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(token);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>replace:</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Policy<sp/>is<sp/>replace.<sp/>Replacing<sp/>the<sp/>previous<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>existing<sp/>event<sp/>has<sp/>not<sp/>been<sp/>handled<sp/>yet,<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it.<sp/>WARNING:<sp/>If<sp/>provide<sp/>a<sp/>mechanism<sp/>for<sp/>unscheduling,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>no<sp/>longer<sp/>rely<sp/>on<sp/>the<sp/>tag<sp/>of<sp/>the<sp/>existing<sp/>event<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>whether<sp/>or<sp/>not<sp/>it<sp/>has<sp/>been<sp/>recycled<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>existing-&gt;time<sp/>&lt;<sp/>current_tag.time<sp/>case<sp/>below).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Because<sp/>microsteps<sp/>are<sp/>not<sp/>explicit,<sp/>if<sp/>the<sp/>tag<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>preceding<sp/>event<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>current<sp/>time,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>search<sp/>the<sp/>event<sp/>queue<sp/>to<sp/>figure<sp/>out<sp/>whether<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>handled<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(existing-&gt;time<sp/>&gt;<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>||</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(existing-&gt;time<sp/>==<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(event_q,<sp/>existing)<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recycle<sp/>the<sp/>existing<sp/>token<sp/>and<sp/>the<sp/>new<sp/>event<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>update<sp/>the<sp/>token<sp/>of<sp/>the<sp/>existing<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_replace_token(existing,<sp/>token);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>preceding<sp/>event<sp/>_has_<sp/>been<sp/>handled,<sp/>then<sp/>adjust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tag<sp/>to<sp/>defer<sp/>the<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_time<sp/>=<sp/>earliest_time;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(existing-&gt;time<sp/>==<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(event_q,<sp/>existing)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag((<ref refid="structtag__t" kindref="compound">tag_t</ref>){.time=existing-&gt;time,.microstep=<ref refid="tag_8c_1af413f18a3d52672f4ba984cc92e4efe5" kindref="member">get_microstep</ref>()+1}))<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scheduling<sp/>e<sp/>will<sp/>incur<sp/>a<sp/>microstep<sp/>at<sp/>timeout,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>illegal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>last<sp/>event<sp/>hasn&apos;t<sp/>been<sp/>handled<sp/>yet,<sp/>insert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>event<sp/>right<sp/>behind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>existing-&gt;next<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>return<sp/>a<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_time<sp/>=<sp/>earliest_time;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>intended<sp/>time<sp/>is<sp/>in<sp/>the<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>sanity<sp/>check<sp/>for<sp/>the<sp/>logic<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>This<sp/>is<sp/>a<sp/>development<sp/>assertion<sp/>and<sp/>might</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>be<sp/>necessary<sp/>for<sp/>end-user<sp/>LF<sp/>programs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intended_time<sp/>&lt;<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>schedule<sp/>an<sp/>event<sp/>earlier<sp/>than<sp/>current<sp/>time<sp/>by<sp/>%lld<sp/>nsec!<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Revising<sp/>to<sp/>the<sp/>current<sp/>time<sp/>%lld.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/>intended_time,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intended_time<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>tag<sp/>of<sp/>the<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;time<sp/>=<sp/>intended_time;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>schedule<sp/>events<sp/>if<sp/>if<sp/>the<sp/>event<sp/>time<sp/>is<sp/>past<sp/>the<sp/>stop<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(current<sp/>microsteps<sp/>are<sp/>checked<sp/>earlier).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Comparing<sp/>event<sp/>with<sp/>elapsed<sp/>time<sp/>%lld<sp/>against<sp/>stop<sp/>time<sp/>%lld.&quot;</highlight><highlight class="normal">,<sp/>e-&gt;time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>stop_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;time<sp/>&gt;<sp/>stop_tag.time)<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__schedule:<sp/>event<sp/>time<sp/>is<sp/>past<sp/>the<sp/>timeout.<sp/>Discarding<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(token);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a662cfd5714e5930f5e1c880f13deba6d" kindref="member">_lf_recycle_event</ref>(e);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>current<sp/>event<sp/>in<sp/>order<sp/>to<sp/>check<sp/>the<sp/>min<sp/>spacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>between<sp/>this<sp/>and<sp/>the<sp/>following<sp/>event.<sp/>Only<sp/>necessary<sp/>for<sp/>actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>actually<sp/>specify<sp/>a<sp/>min<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger-&gt;last<sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)e;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>the<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>There<sp/>is<sp/>no<sp/>need<sp/>for<sp/>an<sp/>explicit<sp/>microstep<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>this<sp/>is<sp/>called,<sp/>all<sp/>events<sp/>at<sp/>the<sp/>current<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(time<sp/>and<sp/>microstep)<sp/>have<sp/>been<sp/>pulled<sp/>from<sp/>the<sp/>queue,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>events<sp/>added<sp/>at<sp/>this<sp/>tag<sp/>will<sp/>go<sp/>into<sp/>the<sp/>reaction_q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rather<sp/>than<sp/>the<sp/>event_q,<sp/>so<sp/>anything<sp/>put<sp/>in<sp/>the<sp/>event_q<sp/>with<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>time<sp/>will<sp/>automatically<sp/>be<sp/>executed<sp/>at<sp/>the<sp/>next<sp/>microstep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>event<sp/>in<sp/>the<sp/>event<sp/>queue<sp/>with<sp/>elapsed<sp/>time<sp/>%lld.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(event_q,<sp/>e);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8c_1a896a14a2ac7b800e93d4d2210321448e" kindref="member">tracepoint_schedule</ref>(trigger,<sp/>e-&gt;time<sp/>-<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>make<sp/>a<sp/>record<sp/>of<sp/>handle<sp/>and<sp/>implement<sp/>unschedule.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Rather<sp/>than<sp/>wrapping<sp/>around<sp/>to<sp/>get<sp/>a<sp/>negative<sp/>number,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>reset<sp/>the<sp/>handle<sp/>on<sp/>the<sp/>assumption<sp/>that<sp/>much<sp/>earlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handles<sp/>are<sp/>irrelevant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_value<sp/>=<sp/>__handle++;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__handle<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__handle<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_value;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/>_lf_insert_reactions_for_trigger(<ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger,<sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>trigger<sp/>argument<sp/>could<sp/>be<sp/>null,<sp/>meaning<sp/>that<sp/>nothing<sp/>is<sp/>triggered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doing<sp/>this<sp/>after<sp/>incrementing<sp/>the<sp/>reference<sp/>count<sp/>ensures<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>payload<sp/>will<sp/>be<sp/>freed,<sp/>if<sp/>there<sp/>is<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;_lf_schedule_init_reactions()<sp/>called<sp/>with<sp/>a<sp/>NULL<sp/>trigger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(token);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>trigger<sp/>is<sp/>not<sp/>a<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>not<sp/>a<sp/>physical<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger-&gt;is_timer<sp/>||<sp/>trigger-&gt;is_physical)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;_lf_schedule_init_reactions()<sp/>called<sp/>on<sp/>a<sp/>timer<sp/>or<sp/>physical<sp/>action.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>the<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>++;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>trigger<sp/>has<sp/>violated<sp/>the<sp/>STP<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_STP_violated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(trigger-&gt;intended_tag,<sp/><ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>())<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_STP_violated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>STP<sp/>violation<sp/>in<sp/>the<sp/>centralized<sp/>coordination,<sp/>which<sp/>is<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>critical<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_STP_violated)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>insert<sp/>reactions<sp/>for<sp/>a<sp/>trigger<sp/>that<sp/>had<sp/>violated<sp/>the<sp/>STP<sp/>offset&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>centralized<sp/>coordination.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>token<sp/>pointer<sp/>into<sp/>the<sp/>trigger<sp/>struct<sp/>so<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reactions<sp/>can<sp/>access<sp/>it.<sp/>This<sp/>overwrites<sp/>the<sp/>previous<sp/>template<sp/>token,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>which<sp/>we<sp/>decrement<sp/>the<sp/>reference<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger-&gt;token<sp/>!=<sp/>token<sp/>&amp;&amp;<sp/>trigger-&gt;token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>previous<sp/>one<sp/>ok_to_free<sp/>so<sp/>we<sp/>don&apos;t<sp/>get<sp/>a<sp/>memory<sp/>leak.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger-&gt;token-&gt;<ref refid="structlf__token__t_1aa002374ec3b3165193393952dd216a90" kindref="member">ok_to_free</ref><sp/>=<sp/><ref refid="reactor_8h_1a20b6cff12498f2db056084f86154d9a4" kindref="member">OK_TO_FREE</ref>;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>token<sp/>if<sp/>its<sp/>reference<sp/>count<sp/>is<sp/>zero.<sp/>Since<sp/>__done_using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decrements<sp/>the<sp/>reference<sp/>count,<sp/>first<sp/>increment<sp/>it<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger-&gt;token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>++;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__done_using(trigger-&gt;token);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger-&gt;token<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>this<sp/>token<sp/>from<sp/>being<sp/>freed.<sp/>It<sp/>is<sp/>the<sp/>new<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>might<sp/>be<sp/>null<sp/>if<sp/>there<sp/>are<sp/>no<sp/>reactions<sp/>to<sp/>the<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1aa002374ec3b3165193393952dd216a90" kindref="member">ok_to_free</ref><sp/>=<sp/>no;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>trigger<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger-&gt;status<sp/>=<sp/>present;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>the<sp/>corresponding<sp/>reactions<sp/>for<sp/>this<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>onto<sp/>the<sp/>reaction<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trigger-&gt;number_of_reactions;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>reaction<sp/>=<sp/>trigger-&gt;reactions[i];</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>enqueue<sp/>this<sp/>reaction<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(reaction_q,<sp/>reaction)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction-&gt;is_STP_violated<sp/>=<sp/>is_STP_violated;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(reaction_q,<sp/>reaction);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Enqueued<sp/>reaction<sp/>%s<sp/>at<sp/>time<sp/>%lld.&quot;</highlight><highlight class="normal">,<sp/>reaction-&gt;name,<sp/><ref refid="tag_8c_1a9da5960071964c9c2bdb602526da0565" kindref="member">get_logical_time</ref>());</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>_lf_action_to_trigger(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*((<ref refid="structtrigger__t" kindref="compound">trigger_t</ref>**)action);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1abadead0c4f54963b062503cf6cb7ace7" kindref="member">_lf_advance_logical_time</ref>(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>next_time)<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>The<sp/>following<sp/>checks<sp/>that<sp/>_lf_advance_logical_time()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>being<sp/>called<sp/>correctly.<sp/>Namely,<sp/>check<sp/>if<sp/>logical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>being<sp/>pushed<sp/>past<sp/>the<sp/>head<sp/>of<sp/>the<sp/>event<sp/>queue.<sp/>This<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>never<sp/>happen<sp/>if<sp/>_lf_advance_logical_time()<sp/>is<sp/>called<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>commented<sp/>out<sp/>because<sp/>it<sp/>will<sp/>add<sp/>considerable<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>ordinary<sp/>execution<sp/>of<sp/>LF<sp/>programs.<sp/>Instead,<sp/>there<sp/>might</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>a<sp/>need<sp/>for<sp/>a<sp/>target<sp/>property<sp/>that<sp/>enables<sp/>these<sp/>kinds<sp/>of<sp/>logic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertions<sp/>for<sp/>development<sp/>purposes<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/><sp/><sp/><sp/>event_t*<sp/>next_event<sp/>=<sp/>(event_t*)pqueue_peek(event_q);</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(next_event<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(next_time<sp/>&gt;<sp/>next_event-&gt;time)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_print_and_exit(&quot;_lf_advance_logical_time():<sp/>Attempted<sp/>to<sp/>move<sp/>time<sp/>to<sp/>%lld,<sp/>which<sp/>is<sp/>&quot;</highlight></codeline>
<codeline lineno="1382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;past<sp/>the<sp/>head<sp/>of<sp/>the<sp/>event<sp/>queue,<sp/>%lld.&quot;,<sp/></highlight></codeline>
<codeline lineno="1383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_time<sp/>-<sp/>start_time,<sp/>next_event-&gt;time<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="1384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>&lt;<sp/>next_time)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>=<sp/>next_time;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>==<sp/>next_time)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep++;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;_lf_advance_logical_time():<sp/>Attempted<sp/>to<sp/>move<sp/>tag<sp/>back<sp/>in<sp/>time.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Advanced<sp/>(elapsed)<sp/>tag<sp/>to<sp/>(%lld,<sp/>%u)&quot;</highlight><highlight class="normal">,<sp/>next_time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/><ref refid="reactor_8h_1aa715873b79dee5b9f50daa2fef88cf34" kindref="member">_lf_schedule_int</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action,<sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>extra_delay,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger<sp/>=<sp/>_lf_action_to_trigger(action);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>doesn&apos;t<sp/>acquire<sp/>the<sp/>mutex<sp/>lock<sp/>in<sp/>the<sp/>multithreaded<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>until<sp/>schedule_value<sp/>is<sp/>called.<sp/>This<sp/>should<sp/>be<sp/>OK<sp/>because<sp/>the<sp/>element_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>change<sp/>dynamically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger-&gt;element_size<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Action<sp/>type<sp/>is<sp/>not<sp/>an<sp/>integer.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>container<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>*container<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1aa0a09f1dc9ee5870a6d225a3569388df" kindref="member">_lf_schedule_value</ref>(action,<sp/>extra_delay,<sp/>container,<sp/>1);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>__set_new_array_impl(<ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_destinations)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>template<sp/>token<sp/>cannot<sp/>carry<sp/>a<sp/>payload,<sp/>then<sp/>it<sp/>is<sp/>incompatible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token-&gt;<ref refid="structlf__token__t_1af2b9d91b8dcfbc640f0cf52d4fac6035" kindref="member">element_size</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;set_new_array:<sp/>specified<sp/>token<sp/>cannot<sp/>carry<sp/>an<sp/>array.<sp/>It<sp/>has<sp/>zero<sp/>element_size.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>initialize<sp/>the<sp/>token,<sp/>reusing<sp/>the<sp/>one<sp/>given<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>new_token<sp/>=<sp/>__initialize_token(token,<sp/>length);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>new_token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref><sp/>=<sp/>num_destinations;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__set_new_array_impl:<sp/>Allocated<sp/>memory<sp/>for<sp/>payload<sp/>%p.&quot;</highlight><highlight class="normal">,<sp/>new_token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_token;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>schedule_output_reactions(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>reaction,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>worker)<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reaction-&gt;is_a_control_reaction)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Control<sp/>reactions<sp/>will<sp/>not<sp/>produce<sp/>an<sp/>output<sp/>but<sp/>can<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>effects<sp/>in<sp/>order<sp/>to<sp/>have<sp/>certain<sp/>precedence<sp/>requirements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>execute<sp/>this<sp/>function<sp/>if<sp/>the<sp/>reaction<sp/>is<sp/>a<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reaction<sp/>produced<sp/>outputs,<sp/>put<sp/>the<sp/>resulting<sp/>triggered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reactions<sp/>into<sp/>the<sp/>reaction<sp/>queue.<sp/>As<sp/>an<sp/>optimization,<sp/>if<sp/>exactly<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>downstream<sp/>reaction<sp/>is<sp/>enabled<sp/>by<sp/>this<sp/>reaction,<sp/>then<sp/>it<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>executed<sp/>immediately<sp/>in<sp/>this<sp/>same<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>going<sp/>through<sp/>the<sp/>reaction<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>downstream_to_execute_now<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_downstream_reactions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED<sp/>//<sp/>Only<sp/>pass<sp/>down<sp/>STP<sp/>violation<sp/>for<sp/>federated<sp/>programs<sp/>that<sp/>use<sp/>decentralized<sp/>coordination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>inherited<sp/>STP<sp/>violation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inherited_STP_violation<sp/>=<sp/>reaction-&gt;is_STP_violated;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Reaction<sp/>%s<sp/>has<sp/>STP<sp/>violation<sp/>status:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>reaction-&gt;name,<sp/>reaction-&gt;is_STP_violated);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;There<sp/>are<sp/>%d<sp/>outputs<sp/>from<sp/>reaction<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>reaction-&gt;num_outputs,<sp/>reaction-&gt;name);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>reaction-&gt;num_outputs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(reaction-&gt;output_produced[i]))<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Output<sp/>%d<sp/>has<sp/>been<sp/>produced.&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>**<sp/>triggerArray<sp/>=<sp/>(reaction-&gt;triggers)[i];</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;There<sp/>are<sp/>%d<sp/>trigger<sp/>arrays<sp/>associated<sp/>with<sp/>output<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>reaction-&gt;triggered_sizes[i],<sp/>i);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>reaction-&gt;triggered_sizes[i];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger<sp/>=<sp/>triggerArray[j];</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Trigger<sp/>%p<sp/>lists<sp/>%d<sp/>reactions.&quot;</highlight><highlight class="normal">,<sp/>trigger,<sp/>trigger-&gt;number_of_reactions);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k<sp/>&lt;<sp/>trigger-&gt;number_of_reactions;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>downstream_reaction<sp/>=<sp/>trigger-&gt;reactions[k];</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED<sp/>//<sp/>Only<sp/>pass<sp/>down<sp/>tardiness<sp/>for<sp/>federated<sp/>LF<sp/>programs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>is_STP_violated<sp/>for<sp/>the<sp/>downstream<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(downstream_reaction<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_reaction-&gt;is_STP_violated<sp/>=<sp/>inherited_STP_violation;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Passing<sp/>is_STP_violated<sp/>of<sp/>%d<sp/>to<sp/>the<sp/>downstream<sp/>reaction:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_reaction-&gt;is_STP_violated,<sp/>downstream_reaction-&gt;name);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(downstream_reaction<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>downstream_reaction<sp/>!=<sp/>downstream_to_execute_now)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_downstream_reactions++;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>exactly<sp/>one<sp/>downstream<sp/>reaction<sp/>that<sp/>is<sp/>enabled<sp/>by<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reaction,<sp/>then<sp/>we<sp/>can<sp/>execute<sp/>that<sp/>reaction<sp/>immediately<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>going<sp/>through<sp/>the<sp/>reaction<sp/>queue.<sp/>In<sp/>multithreaded<sp/>execution,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoids<sp/>acquiring<sp/>a<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Check<sp/>the<sp/>earliest<sp/>deadline<sp/>on<sp/>the<sp/>reaction<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>optimization<sp/>could<sp/>violate<sp/>EDF<sp/>scheduling<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_downstream_reactions<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>downstream_reaction-&gt;last_enabling_reaction<sp/>==<sp/>reaction)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>far,<sp/>this<sp/>downstream<sp/>reaction<sp/>is<sp/>a<sp/>candidate<sp/>to<sp/>execute<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_to_execute_now<sp/>=<sp/>downstream_reaction;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>a<sp/>previous<sp/>candidate<sp/>reaction<sp/>to<sp/>execute<sp/>now,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>no<sp/>longer<sp/>a<sp/>candidate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(downstream_to_execute_now<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>More<sp/>than<sp/>one<sp/>downstream<sp/>reaction<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,<sp/>if<sp/>we<sp/>were<sp/>to<sp/>execute<sp/>the<sp/>downstream<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>immediately<sp/>without<sp/>changing<sp/>any<sp/>queues,<sp/>then<sp/>the<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>downstream<sp/>reaction<sp/>would<sp/>be<sp/>blocked<sp/>because<sp/>this<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remains<sp/>on<sp/>the<sp/>executing<sp/>queue.<sp/>Hence,<sp/>the<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>valid.<sp/>Put<sp/>the<sp/>candidate<sp/>reaction<sp/>on<sp/>the<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_enqueue_reaction(downstream_to_execute_now);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_to_execute_now<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>the<sp/>reaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_enqueue_reaction(downstream_reaction);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(downstream_to_execute_now<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Optimizing<sp/>and<sp/>executing<sp/>downstream<sp/>reaction<sp/>now:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>worker,<sp/>downstream_to_execute_now-&gt;name);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>violation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED<sp/>//<sp/>Only<sp/>use<sp/>the<sp/>STP<sp/>handler<sp/>for<sp/>federated<sp/>programs<sp/>that<sp/>use<sp/>decentralized<sp/>coordination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>is_STP_violated<sp/>for<sp/>the<sp/>reaction<sp/>is<sp/>true,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>input<sp/>trigger<sp/>to<sp/>this<sp/>reaction<sp/>has<sp/>been<sp/>triggered<sp/>at<sp/>a<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>logical<sp/>time<sp/>than<sp/>originally<sp/>anticipated.<sp/>In<sp/>this<sp/>case,<sp/>a<sp/>special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STP<sp/>handler<sp/>will<sp/>be<sp/>invoked.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Note<sp/>that<sp/>the<sp/>STP<sp/>handler<sp/>will<sp/>be<sp/>invoked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>most<sp/>once<sp/>per<sp/>logical<sp/>time<sp/>value.<sp/>If<sp/>the<sp/>STP<sp/>handler<sp/>triggers<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>reaction<sp/>at<sp/>the<sp/>current<sp/>time<sp/>value,<sp/>even<sp/>if<sp/>at<sp/>a<sp/>future<sp/>superdense<sp/>time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>reaction<sp/>will<sp/>be<sp/>invoked<sp/>and<sp/>the<sp/>STP<sp/>handler<sp/>will<sp/>not<sp/>be<sp/>invoked<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>input<sp/>ports<sp/>to<sp/>a<sp/>federate<sp/>reactor<sp/>are<sp/>network<sp/>port<sp/>types<sp/>so<sp/>this<sp/>possibly<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>disallowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@note<sp/>The<sp/>STP<sp/>handler<sp/>and<sp/>the<sp/>deadline<sp/>handler<sp/>are<sp/>not<sp/>mutually<sp/>exclusive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>In<sp/>other<sp/>words,<sp/>both<sp/>can<sp/>be<sp/>invoked<sp/>for<sp/>a<sp/>reaction<sp/>if<sp/>it<sp/>is<sp/>triggered<sp/>late</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>in<sp/>logical<sp/>time<sp/>(STP<sp/>offset<sp/>is<sp/>violated)<sp/>and<sp/>also<sp/>misses<sp/>the<sp/>constraint<sp/>on<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>physical<sp/>time<sp/>(deadline).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@note<sp/>In<sp/>absence<sp/>of<sp/>a<sp/>STP<sp/>handler,<sp/>the<sp/>is_STP_violated<sp/>will<sp/>be<sp/>passed<sp/>down<sp/>the<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>chain<sp/>until<sp/>it<sp/>is<sp/>dealt<sp/>with<sp/>in<sp/>a<sp/>downstream<sp/>STP<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(downstream_to_execute_now-&gt;is_STP_violated<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tardiness<sp/>has<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Event<sp/>has<sp/>STP<sp/>violation.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a149e5fee1c1841bcc96c72f200601d90" kindref="member">reaction_function_t</ref><sp/>handler<sp/>=<sp/>downstream_to_execute_now-&gt;STP_handler;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>STP<sp/>handler<sp/>if<sp/>there<sp/>is<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>violation<sp/>and<sp/>it<sp/>is<sp/>being<sp/>handled<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>STP<sp/>handler,<sp/>pass<sp/>the<sp/>is_STP_violated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>downstream<sp/>reactions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>violation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Invoke<sp/>tardiness<sp/>handler.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*handler)(downstream_to_execute_now-&gt;self);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reaction<sp/>produced<sp/>outputs,<sp/>put<sp/>the<sp/>resulting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triggered<sp/>reactions<sp/>into<sp/>the<sp/>queue<sp/>or<sp/>execute<sp/>them<sp/>directly<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schedule_output_reactions(downstream_to_execute_now,<sp/>worker);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>tardiness<sp/>because<sp/>it<sp/>has<sp/>been<sp/>dealt<sp/>with<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STP<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_to_execute_now-&gt;is_STP_violated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Reset<sp/>reaction&apos;s<sp/>is_STP_violated<sp/>field<sp/>to<sp/>false:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_to_execute_now-&gt;name);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(downstream_to_execute_now-&gt;deadline<sp/>&gt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>current<sp/>physical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>physical_time<sp/>=<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>();</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>deadline<sp/>violation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(physical_time<sp/>&gt;<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>+<sp/>downstream_to_execute_now-&gt;deadline)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deadline<sp/>violation<sp/>has<sp/>occurred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>violation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>local<sp/>handler,<sp/>if<sp/>there<sp/>is<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a149e5fee1c1841bcc96c72f200601d90" kindref="member">reaction_function_t</ref><sp/>handler<sp/>=<sp/>downstream_to_execute_now-&gt;deadline_violation_handler;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>the<sp/>mutex<sp/>is<sp/>still<sp/>not<sp/>held.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*handler)(downstream_to_execute_now-&gt;self);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reaction<sp/>produced<sp/>outputs,<sp/>put<sp/>the<sp/>resulting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triggered<sp/>reactions<sp/>into<sp/>the<sp/>queue<sp/>or<sp/>execute<sp/>them<sp/>directly<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schedule_output_reactions(downstream_to_execute_now,<sp/>worker);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!violation)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>downstream_reaction<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1ade61b59eed2f970f376f319ffaf2541d" kindref="member">tracepoint_reaction_starts</ref>(downstream_to_execute_now,<sp/>worker);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_to_execute_now-&gt;function(downstream_to_execute_now-&gt;self);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1ad9628a6d76f5bad7a0c093f00731364b" kindref="member">tracepoint_reaction_ends</ref>(downstream_to_execute_now,<sp/>worker);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>downstream_reaction<sp/>produced<sp/>outputs,<sp/>put<sp/>the<sp/>resulting<sp/>triggered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reactions<sp/>into<sp/>the<sp/>queue<sp/>(or<sp/>execute<sp/>them<sp/>directly,<sp/>if<sp/>possible).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schedule_output_reactions(downstream_to_execute_now,<sp/>worker);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>is_STP_violated<sp/>because<sp/>it<sp/>has<sp/>been<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>down<sp/>the<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_to_execute_now-&gt;is_STP_violated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Finally,<sp/>reset<sp/>reaction&apos;s<sp/>is_STP_violated<sp/>field<sp/>to<sp/>false:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downstream_to_execute_now-&gt;name);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_downstream_reactions<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>running<sp/>a<sp/>multithreaded<sp/>setting,<sp/>the<sp/>following<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>wake<sp/>up<sp/>other<sp/>worker<sp/>threads<sp/>to<sp/>execute<sp/>the<sp/>newly<sp/>queued<sp/>reactions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1aa46a83ed702e2c83d42625a8c78a9f50" kindref="member">_lf_notify_workers</ref>();</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>writable_copy(<ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;writable_copy:<sp/>Requesting<sp/>writable<sp/>copy<sp/>of<sp/>token<sp/>%p<sp/>with<sp/>reference<sp/>count<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;writable_copy:<sp/>Avoided<sp/>copy<sp/>because<sp/>reference<sp/>count<sp/>is<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;writable_copy:<sp/>Copying<sp/>array<sp/>because<sp/>reference<sp/>count<sp/>is<sp/>greater<sp/>than<sp/>1.<sp/>It<sp/>is<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>token-&gt;<ref refid="structlf__token__t_1ab1043c1cbbd70a0cb0d10058b3d5290b" kindref="member">ref_count</ref>);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>token-&gt;<ref refid="structlf__token__t_1af2b9d91b8dcfbc640f0cf52d4fac6035" kindref="member">element_size</ref><sp/>*<sp/>token-&gt;<ref refid="structlf__token__t_1aa907a3d0901bd1ae3ab88fecb8dc11e5" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>copy<sp/>=<sp/>malloc(size);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Allocating<sp/>memory<sp/>for<sp/>writable<sp/>copy<sp/>%p.&quot;</highlight><highlight class="normal">,<sp/>copy);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(copy,<sp/>token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>allocations<sp/>to<sp/>issue<sp/>a<sp/>warning<sp/>if<sp/>this<sp/>is<sp/>never<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__count_payload_allocations++;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new,<sp/>dynamically<sp/>allocated<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>result<sp/>=<sp/><ref refid="reactor_8h_1a9d8ea5bc3ac4d18edafab309bc2a9c8a" kindref="member">create_token</ref>(token-&gt;<ref refid="structlf__token__t_1af2b9d91b8dcfbc640f0cf52d4fac6035" kindref="member">element_size</ref>);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="structlf__token__t_1aa907a3d0901bd1ae3ab88fecb8dc11e5" kindref="member">length</ref><sp/>=<sp/>token-&gt;<ref refid="structlf__token__t_1aa907a3d0901bd1ae3ab88fecb8dc11e5" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref><sp/>=<sp/>copy;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nCommand-line<sp/>arguments:<sp/>\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-f,<sp/>--fast<sp/>[true<sp/>|<sp/>false]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Whether<sp/>to<sp/>wait<sp/>for<sp/>physical<sp/>time<sp/>to<sp/>match<sp/>logical<sp/>time.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-o,<sp/>--timeout<sp/>&lt;duration&gt;<sp/>&lt;units&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Stop<sp/>after<sp/>the<sp/>specified<sp/>amount<sp/>of<sp/>logical<sp/>time,<sp/>where<sp/>units<sp/>are<sp/>one<sp/>of\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>nsec,<sp/>usec,<sp/>msec,<sp/>sec,<sp/>minute,<sp/>hour,<sp/>day,<sp/>week,<sp/>or<sp/>the<sp/>plurals<sp/>of<sp/>those.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-k,<sp/>--keepalive\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Whether<sp/>continue<sp/>execution<sp/>even<sp/>when<sp/>there<sp/>are<sp/>no<sp/>events<sp/>to<sp/>process.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-t,<sp/>--threads<sp/>&lt;n&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Executed<sp/>in<sp/>&lt;n&gt;<sp/>threads<sp/>if<sp/>possible<sp/>(optional<sp/>feature).\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-i,<sp/>--id<sp/>&lt;n&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>The<sp/>ID<sp/>of<sp/>the<sp/>federation<sp/>that<sp/>this<sp/>reactor<sp/>will<sp/>join.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Command<sp/>given:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>argv[i]);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>options<sp/>given<sp/>in<sp/>the<sp/>target<sp/>directive<sp/>are<sp/>provided<sp/>here<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default<sp/>command-line<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_argc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>default_argv<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="rti_8c_1afb7337572879824d012d59222ea86eeb" kindref="member">federation_id</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unidentified<sp/>Federation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rti_8c_1a8de011aeee37cd0347b5e01d7e3baed4" kindref="member">process_args</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-f&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--fast&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>i<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;--fast<sp/>needs<sp/>a<sp/>boolean.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fast_spec<sp/>=<sp/>argv[i];</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(fast_spec,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fast<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(fast_spec,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fast<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>for<sp/>--fast:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>fast_spec);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-o&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--timeout&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-timeout&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tolerate<sp/>-timeout<sp/>for<sp/>legacy<sp/>uses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>i<sp/>+<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;--timeout<sp/>needs<sp/>time<sp/>and<sp/>units.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>time_spec<sp/>=<sp/>argv[i++];</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>units<sp/>=<sp/>argv[i];</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>atoll(time_spec);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>parse<sp/>error<sp/>returns<sp/>0LL,<sp/>so<sp/>check<sp/>to<sp/>see<sp/>whether<sp/>that<sp/>is<sp/>what<sp/>is<sp/>meant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(duration<sp/>==<sp/>0LL<sp/>&amp;&amp;<sp/>strncmp(time_spec,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>time<sp/>value:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>time_spec);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(units,<sp/></highlight><highlight class="stringliteral">&quot;sec&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>SEC(duration);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(units,<sp/></highlight><highlight class="stringliteral">&quot;msec&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>MSEC(duration);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(units,<sp/></highlight><highlight class="stringliteral">&quot;usec&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>USEC(duration);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(units,<sp/></highlight><highlight class="stringliteral">&quot;nsec&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>NSEC(duration);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(units,<sp/></highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>MINUTE(duration);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(units,<sp/></highlight><highlight class="stringliteral">&quot;hour&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>HOUR(duration);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(units,<sp/></highlight><highlight class="stringliteral">&quot;day&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>DAY(duration);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(units,<sp/></highlight><highlight class="stringliteral">&quot;week&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>WEEK(duration);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>units.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>time<sp/>units:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>units);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-k&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--keepalive&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>i<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;--keepalive<sp/>needs<sp/>a<sp/>boolean.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>keep_spec<sp/>=<sp/>argv[i];</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(keep_spec,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keepalive_specified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(keep_spec,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keepalive_specified<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>for<sp/>--keepalive:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>keep_spec);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-t&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--threads&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>i<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;--threads<sp/>needs<sp/>an<sp/>integer<sp/>argument.s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>threads_spec<sp/>=<sp/>argv[i++];</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref><sp/>=<sp/>atoi(threads_spec);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>for<sp/>--threads:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>threads_spec);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-i&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--id&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>i<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;--id<sp/>needs<sp/>a<sp/>string<sp/>argument.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;Federation<sp/>ID<sp/>for<sp/>executable<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>argv[0],<sp/>argv[i]);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1afb7337572879824d012d59222ea86eeb" kindref="member">federation_id</ref><sp/>=<sp/>argv[i++];</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>command-line<sp/>argument:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>argv[i]);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rti_8c_1aeb5079a0bdbc96962460a991aa880725" kindref="member">usage</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calculate_epoch_offset()<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_LF_CLOCK<sp/>==<sp/>CLOCK_REALTIME)<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>epoch<sp/>offset<sp/>to<sp/>zero<sp/>(see<sp/>tag.h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1ad4570173ff1498d16032fb37814b3f40" kindref="member">_lf_epoch_offset</ref><sp/>=<sp/>0LL;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>_lf_epoch_offset<sp/>to<sp/>the<sp/>difference<sp/>between<sp/>what<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reported<sp/>by<sp/>whatever<sp/>clock<sp/>LF<sp/>is<sp/>using<sp/>(e.g.<sp/>CLOCK_MONOTONIC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>what<sp/>is<sp/>reported<sp/>by<sp/>CLOCK_REALTIME.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>physical_clock_snapshot,<sp/>real_time_start;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_gettime(_LF_CLOCK,<sp/>&amp;physical_clock_snapshot);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>physical_clock_snapshot_ns<sp/>=<sp/>physical_clock_snapshot.tv_sec<sp/>*<sp/>BILLION<sp/>+<sp/>physical_clock_snapshot.tv_nsec;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;real_time_start);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>real_time_start_ns<sp/>=<sp/>real_time_start.tv_sec<sp/>*<sp/>BILLION<sp/>+<sp/>real_time_start.tv_nsec;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1ad4570173ff1498d16032fb37814b3f40" kindref="member">_lf_epoch_offset</ref><sp/>=<sp/>real_time_start_ns<sp/>-<sp/>physical_clock_snapshot_ns;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Clock<sp/>sync:<sp/>Initial<sp/>epoch<sp/>offset<sp/>set<sp/>to<sp/>%lld.&quot;</highlight><highlight class="normal">,<sp/><ref refid="tag_8c_1ad4570173ff1498d16032fb37814b3f40" kindref="member">_lf_epoch_offset</ref>);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize()<sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>__count_payload_allocations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>__count_token_allocations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_WIN32<sp/>||<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>HMODULE<sp/>ntdll<sp/>=<sp/>GetModuleHandleA(</highlight><highlight class="stringliteral">&quot;ntdll.dll&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ntdll)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NtDelayExecution<sp/>=<sp/>(NtDelayExecution_t<sp/>*)GetProcAddress(ntdll,<sp/></highlight><highlight class="stringliteral">&quot;NtDelayExecution&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NtQueryPerformanceCounter<sp/>=<sp/>(NtQueryPerformanceCounter_t<sp/>*)GetProcAddress(ntdll,<sp/></highlight><highlight class="stringliteral">&quot;NtQueryPerformanceCounter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NtQuerySystemTime<sp/>=<sp/>(NtQuerySystemTime_t<sp/>*)GetProcAddress(ntdll,<sp/></highlight><highlight class="stringliteral">&quot;NtQuerySystemTime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>our<sp/>priority<sp/>queues.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reaction<sp/>queue<sp/>ordered<sp/>first<sp/>by<sp/>deadline,<sp/>then<sp/>by<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>index<sp/>of<sp/>the<sp/>reaction<sp/>holds<sp/>the<sp/>deadline<sp/>in<sp/>the<sp/>48<sp/>most<sp/>significant<sp/>bits,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>level<sp/>in<sp/>the<sp/>16<sp/>least<sp/>significant<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>reaction_q<sp/>=<sp/><ref refid="pqueue_8h_1a09b96709c25615c2232596ba6c959c26" kindref="member">pqueue_init</ref>(INITIAL_REACT_QUEUE_SIZE,<sp/>in_reverse_order,<sp/>get_reaction_index,</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_reaction_position,<sp/>set_reaction_position,<sp/>reaction_matches,<sp/>print_reaction);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>event_q<sp/>=<sp/><ref refid="pqueue_8h_1a09b96709c25615c2232596ba6c959c26" kindref="member">pqueue_init</ref>(INITIAL_EVENT_QUEUE_SIZE,<sp/>in_reverse_order,<sp/>get_event_time,</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_event_position,<sp/>set_event_position,<sp/>event_matches,<sp/>print_event);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>The<sp/>recycle<sp/>and<sp/>next<sp/>queue<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>sorted.<sp/>But<sp/>here<sp/>it<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>recycle_q<sp/>=<sp/><ref refid="pqueue_8h_1a09b96709c25615c2232596ba6c959c26" kindref="member">pqueue_init</ref>(INITIAL_EVENT_QUEUE_SIZE,<sp/>in_no_particular_order,<sp/>get_event_time,</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_event_position,<sp/>set_event_position,<sp/>event_matches,<sp/>print_event);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>next_q<sp/>=<sp/><ref refid="pqueue_8h_1a09b96709c25615c2232596ba6c959c26" kindref="member">pqueue_init</ref>(INITIAL_EVENT_QUEUE_SIZE,<sp/>in_no_particular_order,<sp/>get_event_time,</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_event_position,<sp/>set_event_position,<sp/>event_matches,<sp/>print_event);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>trigger<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a868e02a04eabb4ffed63f6141f5f64a2" kindref="member">__initialize_trigger_objects</ref>();</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8c_1afc91fb8110046fe2a5b10993c6618688" kindref="member">physical_start_time</ref><sp/>=<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>();</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>=<sp/><ref refid="tag_8c_1afc91fb8110046fe2a5b10993c6618688" kindref="member">physical_start_time</ref>;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref><sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>physical_time_timespec<sp/>=<sp/>{<ref refid="tag_8c_1afc91fb8110046fe2a5b10993c6618688" kindref="member">physical_start_time</ref><sp/>/<sp/>BILLION,<sp/><ref refid="tag_8c_1afc91fb8110046fe2a5b10993c6618688" kindref="member">physical_start_time</ref><sp/>%<sp/>BILLION};</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;----<sp/>Start<sp/>execution<sp/>at<sp/>time<sp/>%s----<sp/>plus<sp/>%ld<sp/>nanoseconds.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctime(&amp;physical_time_timespec.tv_sec),<sp/>physical_time_timespec.tv_nsec);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(duration<sp/>&gt;=<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>duration<sp/>has<sp/>been<sp/>specified.<sp/>Calculate<sp/>the<sp/>stop<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_set_stop_tag((<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{.time<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>+<sp/>duration,<sp/>.microstep<sp/>=<sp/>0});</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>termination()<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>code<sp/>generated<sp/>termination<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a114c79dc673219d5df3b794552ca88d7" kindref="member">terminate_execution</ref>();</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>any<sp/>tracing,<sp/>if<sp/>it<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8c_1a6dabaa8855fdeb4b896d459fa3196256" kindref="member">stop_trace</ref>();</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>free<sp/>tokens,<sp/>we<sp/>perform<sp/>the<sp/>same<sp/>actions<sp/>we<sp/>would<sp/>have<sp/>for<sp/>a<sp/>new<sp/>time<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1af8aacf433fcf349ffa1b163962eb3681" kindref="member">__start_time_step</ref>();</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>event<sp/>queue<sp/>still<sp/>has<sp/>events<sp/>on<sp/>it,<sp/>report<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event_q<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/><ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(event_q)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;----<sp/>There<sp/>are<sp/>%zu<sp/>unprocessed<sp/>future<sp/>events<sp/>on<sp/>the<sp/>event<sp/>queue.&quot;</highlight><highlight class="normal">,<sp/><ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(event_q));</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)<ref refid="pqueue_8h_1a2919d3e817688b81da746d4123f51ba3" kindref="member">pqueue_peek</ref>(event_q);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>event_time<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;----<sp/>The<sp/>first<sp/>future<sp/>event<sp/>has<sp/>timestamp<sp/>%lld<sp/>after<sp/>start<sp/>time.&quot;</highlight><highlight class="normal">,<sp/>event_time);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Issue<sp/>a<sp/>warning<sp/>if<sp/>a<sp/>memory<sp/>leak<sp/>has<sp/>been<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__count_payload_allocations<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocated<sp/>for<sp/>messages<sp/>has<sp/>not<sp/>been<sp/>freed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>unfreed<sp/>messages:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>__count_payload_allocations);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__count_token_allocations<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocated<sp/>for<sp/>tokens<sp/>has<sp/>not<sp/>been<sp/>freed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>unfreed<sp/>tokens:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>__count_token_allocations);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>elapsed<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>these<sp/>are<sp/>negative,<sp/>then<sp/>the<sp/>program<sp/>failed<sp/>to<sp/>start<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>elapsed_time<sp/>=<sp/><ref refid="tag_8c_1a23e91eb69aca986b03aba4ce86923102" kindref="member">get_elapsed_logical_time</ref>();</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elapsed_time<sp/>&gt;=<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>time_buffer[28];<sp/></highlight><highlight class="comment">//<sp/>28<sp/>bytes<sp/>is<sp/>enough<sp/>for<sp/>the<sp/>largest<sp/>64<sp/>bit<sp/>number:<sp/>9,223,372,036,854,775,807</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readable_time(time_buffer,<sp/>elapsed_time);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;----<sp/>Elapsed<sp/>logical<sp/>time<sp/>(in<sp/>nsec):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>time_buffer);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>physical_start_time<sp/>is<sp/>0,<sp/>then<sp/>execution<sp/>didn&apos;t<sp/>get<sp/>far<sp/>enough<sp/>along</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>initialize<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1afc91fb8110046fe2a5b10993c6618688" kindref="member">physical_start_time</ref><sp/>&gt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readable_time(time_buffer,<sp/><ref refid="tag_8c_1a0de9cef51748833c318227ed2e5bbe2a" kindref="member">get_elapsed_physical_time</ref>());</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ab831b6ca5cfb47d7d4b3f15ef8e0f053" kindref="member">info_print</ref>(</highlight><highlight class="stringliteral">&quot;----<sp/>Elapsed<sp/>physical<sp/>time<sp/>(in<sp/>nsec):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>time_buffer);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_common.c"/>
  </compounddef>
</doxygen>
