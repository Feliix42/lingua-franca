<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="lf__windows__support_8c" kind="file" language="C++">
    <compoundname>lf_windows_support.c</compoundname>
    <includes local="no">windows.h</includes>
    <includes local="no">process.h</includes>
    <includes refid="lf__windows__support_8h" local="yes">lf_windows_support.h</includes>
    <includes refid="platform_8h" local="yes">../platform.h</includes>
    <incdepgraph>
      <node id="3">
        <label>process.h</label>
      </node>
      <node id="2">
        <label>windows.h</label>
      </node>
      <node id="5">
        <label>../platform.h</label>
        <link refid="platform_8h_source"/>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c</label>
        <link refid="lf__windows__support_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lf_windows_support.h</label>
        <link refid="lf__windows__support_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lf__windows__support_8c_1a59a3597dfedc2c878a78b748c404c45c" prot="public" static="no" mutable="no">
        <type>NtDelayExecution_t *</type>
        <definition>NtDelayExecution_t* NtDelayExecution</definition>
        <argsstring></argsstring>
        <name>NtDelayExecution</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Windows API support for the C target of Lingua Franca.</para>
<para><simplesect kind="author"><para>{Soroush Bateni <ulink url="mailto:soroush@utdallas.edu">soroush@utdallas.edu</ulink>}</para>
</simplesect>
All functions return 0 on success.</para>
<para><simplesect kind="see"><para><ulink url="https://gist.github.com/Soroosh129/127d1893fa4c1da6d3e1db33381bb273">https://gist.github.com/Soroosh129/127d1893fa4c1da6d3e1db33381bb273</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="43" column="20" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lf__windows__support_8c_1aa0444d9fdc5b693309aaee69e2b7f385" prot="public" static="no" mutable="no">
        <type>NtQueryPerformanceCounter_t *</type>
        <definition>NtQueryPerformanceCounter_t* NtQueryPerformanceCounter</definition>
        <argsstring></argsstring>
        <name>NtQueryPerformanceCounter</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="44" column="29" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lf__windows__support_8c_1a8479730d95b516d83fa8106a5d647ce7" prot="public" static="no" mutable="no">
        <type>NtQuerySystemTime_t *</type>
        <definition>NtQuerySystemTime_t* NtQuerySystemTime</definition>
        <argsstring></argsstring>
        <name>NtQuerySystemTime</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="45" column="21" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lf__windows__support_8c_1ab8be4b8137e1f0d949ba2eccf4e1def1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_thread_create</definition>
        <argsstring>(_lf_thread_t *thread, void *(*lf_thread)(void *), void *arguments)</argsstring>
        <name>lf_thread_create</name>
        <param>
          <type>_lf_thread_t *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>lf_thread</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new thread, starting with execution of lf_thread getting passed arguments. The new handle is stored in thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="51" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1a7307363a56eba75ff4a4c0cd213d3b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_thread_join</definition>
        <argsstring>(_lf_thread_t thread, void **thread_return)</argsstring>
        <name>lf_thread_join</name>
        <param>
          <type>_lf_thread_t</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>thread_return</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make calling thread wait for termination of the thread. The exit status of the thread is stored in thread_return, if thread_return is not NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="66" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1a0704bd7dc215fca79182712b6c6b109c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_mutex_init</definition>
        <argsstring>(_lf_critical_section_t *critical_section)</argsstring>
        <name>lf_mutex_init</name>
        <param>
          <type>_lf_critical_section_t *</type>
          <declname>critical_section</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a critical section. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="78" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="78" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1aec5414f9101f9d35575b598bac5343a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_mutex_lock</definition>
        <argsstring>(_lf_critical_section_t *critical_section)</argsstring>
        <name>lf_mutex_lock</name>
        <param>
          <type>_lf_critical_section_t *</type>
          <declname>critical_section</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock a critical section.</para>
<para>From <ulink url="https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-entercriticalsection:">https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-entercriticalsection:</ulink> "This function can raise EXCEPTION_POSSIBLE_DEADLOCK if a wait operation on the critical section times out. The timeout interval is specified by the following registry value: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\CriticalSectionTimeout. Do not handle a possible deadlock exception; instead, debug the application." </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="97" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1adcbbed0ac8ee0ae6ff667d9d9c1833df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_mutex_unlock</definition>
        <argsstring>(_lf_critical_section_t *critical_section)</argsstring>
        <name>lf_mutex_unlock</name>
        <param>
          <type>_lf_critical_section_t *</type>
          <declname>critical_section</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Leave a critical_section. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="105" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1af945deaf6d9ca0ffeef1415e0be7dc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_cond_init</definition>
        <argsstring>(_lf_cond_t *cond)</argsstring>
        <name>lf_cond_init</name>
        <param>
          <type>_lf_cond_t *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a conditional variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="113" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1abe3e9be9ae9a8e977a6f8b925e921505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_cond_broadcast</definition>
        <argsstring>(_lf_cond_t *cond)</argsstring>
        <name>lf_cond_broadcast</name>
        <param>
          <type>_lf_cond_t *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wake up all threads waiting for condition variable cond. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="121" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1a7466e689556b0b100f2b622b3d166342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_cond_signal</definition>
        <argsstring>(_lf_cond_t *cond)</argsstring>
        <name>lf_cond_signal</name>
        <param>
          <type>_lf_cond_t *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wake up one thread waiting for condition variable cond. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="129" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1abdad0de725b789f8cf352ebf18978d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_cond_wait</definition>
        <argsstring>(_lf_cond_t *cond, _lf_critical_section_t *critical_section)</argsstring>
        <name>lf_cond_wait</name>
        <param>
          <type>_lf_cond_t *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>_lf_critical_section_t *</type>
          <declname>critical_section</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for condition variable &quot;cond&quot; to be signaled or broadcast. &quot;mutex&quot; is assumed to be locked before. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="138" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1aa3c19b4efec92a384e1276ba6c1b29e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_cond_timedwait</definition>
        <argsstring>(_lf_cond_t *cond, _lf_critical_section_t *critical_section, instant_t absolute_time_ns)</argsstring>
        <name>lf_cond_timedwait</name>
        <param>
          <type>_lf_cond_t *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>_lf_critical_section_t *</type>
          <declname>critical_section</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
          <declname>absolute_time_ns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Block current thread on the condition variable until condition variable pointed by &quot;cond&quot; is signaled or time pointed by &quot;absolute_time_ns&quot; in nanoseconds is reached.</para>
<para><simplesect kind="return"><para>0 on success and LF_TIMEOUT on timeout. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="149" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1aac06f15b7e92bdf5a06bc8689f11499f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_clock_gettime</definition>
        <argsstring>(_lf_clock_t clk_id, _lf_time_spec_t *tp)</argsstring>
        <name>lf_clock_gettime</name>
        <param>
          <type>_lf_clock_t</type>
          <declname>clk_id</declname>
        </param>
        <param>
          <type>_lf_time_spec_t *</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch the value of clk_id and store it in tp. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="159" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="159" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="lf__windows__support_8c_1a14a9212426d10126439cd5de0efa4af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lf_nanosleep</definition>
        <argsstring>(_lf_clock_t clk_id, const _lf_time_spec_t *requested_time, _lf_time_spec_t *remaining)</argsstring>
        <name>lf_nanosleep</name>
        <param>
          <type>_lf_clock_t</type>
          <declname>clk_id</declname>
        </param>
        <param>
          <type>const _lf_time_spec_t *</type>
          <declname>requested_time</declname>
        </param>
        <param>
          <type>_lf_time_spec_t *</type>
          <declname>remaining</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pause execution for a number of nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" line="192" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c" bodystart="192" bodyend="205"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Windows<sp/>API<sp/>support<sp/>for<sp/>the<sp/>C<sp/>target<sp/>of<sp/>Lingua<sp/>Franca.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2021,<sp/>The<sp/>University<sp/>of<sp/>California<sp/>at<sp/>Berkeley.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="17"><highlight class="comment">EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="18"><highlight class="comment">MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="19"><highlight class="comment">THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="22"><highlight class="comment">INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="23"><highlight class="comment">STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="24"><highlight class="comment">THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">***************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;process.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lf_windows_support.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../platform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__STDC_VERSION__<sp/>&lt;<sp/>201112L<sp/>||<sp/>defined<sp/>(__STDC_NO_THREADS__)<sp/>//<sp/>(Not<sp/>C++11<sp/>or<sp/>later)<sp/>or<sp/>no<sp/>threads<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">NtDelayExecution_t<sp/>*NtDelayExecution<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">NtQueryPerformanceCounter_t<sp/>*NtQueryPerformanceCounter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">NtQuerySystemTime_t<sp/>*NtQuerySystemTime<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_thread_create(_lf_thread_t*<sp/>thread,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*lf_thread)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arguments)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>handle<sp/>=<sp/>_beginthread((windows_thread)lf_thread,0,arg);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;handle<sp/>=<sp/>(HANDLE)handle;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(thread-&gt;handle<sp/>==<sp/>(HANDLE)-1){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_thread_join(_lf_thread_t<sp/>thread,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>thread_return)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>retvalue<sp/>=<sp/>WaitForSingleObject(thread.handle,INFINITE);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retvalue<sp/>==<sp/>WAIT_OBJECT_0){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EINVAL;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_mutex_init(_lf_critical_section_t*<sp/>critical_section)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>a<sp/>recursive<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>InitializeCriticalSection((CRITICAL_SECTION*)critical_section);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(critical_section<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_mutex_lock(_lf_critical_section_t*<sp/>critical_section)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>EnterCriticalSection((CRITICAL_SECTION*)critical_section);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_mutex_unlock(_lf_critical_section_t*<sp/>critical_section)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>LeaveCriticalSection((CRITICAL_SECTION*)critical_section);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_cond_init(_lf_cond_t*<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>InitializeConditionVariable((CONDITION_VARIABLE*)cond);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_cond_broadcast(_lf_cond_t*<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>WakeAllConditionVariable((CONDITION_VARIABLE*)cond);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_cond_signal(_lf_cond_t*<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>WakeConditionVariable((CONDITION_VARIABLE*)cond);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_cond_wait(_lf_cond_t*<sp/>cond,<sp/>_lf_critical_section_t*<sp/>critical_section)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)SleepConditionVariableCS((CONDITION_VARIABLE*)cond,<sp/>(CRITICAL_SECTION*)critical_section,<sp/>INFINITE);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_cond_timedwait(_lf_cond_t*<sp/>cond,<sp/>_lf_critical_section_t*<sp/>critical_section,<sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>absolute_time_ns)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>absolute<sp/>time<sp/>to<sp/>a<sp/>relative<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>relative_time_ms<sp/>=<sp/>(absolute_time_ns<sp/>-<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>())/1000000LL;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)SleepConditionVariableCS((CONDITION_VARIABLE*)cond,<sp/>(CRITICAL_SECTION*)critical_section,<sp/>relative_time_ms);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_clock_gettime(_lf_clock_t<sp/>clk_id,<sp/>_lf_time_spec_t*<sp/>tp)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>days_from_1601_to_1970<sp/>=<sp/>134774<sp/></highlight><highlight class="comment">/*<sp/>there<sp/>were<sp/>no<sp/>leap<sp/>seconds<sp/>during<sp/>this<sp/>time,<sp/>so<sp/>life<sp/>is<sp/>easy<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timestamp,<sp/>counts,<sp/>counts_per_sec;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(clk_id)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLOCK_REALTIME:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NtQuerySystemTime((PLARGE_INTEGER)&amp;timestamp);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamp<sp/>-=<sp/>days_from_1601_to_1970<sp/>*<sp/>24LL<sp/>*<sp/>60<sp/>*<sp/>60<sp/>*<sp/>1000<sp/>*<sp/>1000<sp/>*<sp/>10;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp-&gt;tv_sec<sp/>=<sp/>(time_t)(timestamp<sp/>/<sp/>(BILLION<sp/>/<sp/>100));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp-&gt;tv_nsec<sp/>=<sp/>(long)((timestamp<sp/>%<sp/>(BILLION<sp/>/<sp/>100))<sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLOCK_MONOTONIC:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*NtQueryPerformanceCounter)((PLARGE_INTEGER)&amp;counts,<sp/>(PLARGE_INTEGER)&amp;counts_per_sec)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp-&gt;tv_sec<sp/>=<sp/>counts<sp/>/<sp/>counts_per_sec;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp-&gt;tv_nsec<sp/>=<sp/>(long)((counts<sp/>%<sp/>counts_per_sec)<sp/>*<sp/>BILLION<sp/>/<sp/>counts_per_sec);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lf_nanosleep(_lf_clock_t<sp/>clk_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_lf_time_spec_t*<sp/>requested_time,<sp/>_lf_time_spec_t*<sp/>remaining)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>alertable<sp/>=<sp/>remaining<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>duration<sp/>=<sp/>-(requested_time-&gt;tv_sec<sp/>*<sp/>(BILLION<sp/>/<sp/>100)<sp/>+<sp/>requested_time-&gt;tv_nsec<sp/>/<sp/>100);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>NTSTATUS<sp/>status<sp/>=<sp/>(*NtDelayExecution)(alertable,<sp/>(PLARGE_INTEGER)&amp;duration);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>status<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alertable)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>lf_clock_gettime(clk_id,<sp/>remaining)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINTR;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lf_C11_threads_support.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/platform/lf_windows_support.c"/>
  </compounddef>
</doxygen>
