<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="sensor__simulator_8c" kind="file" language="C++">
    <compoundname>sensor_simulator.c</compoundname>
    <includes local="no">pthread.h</includes>
    <includes local="no">ncurses.h</includes>
    <includes refid="sensor__simulator_8h" local="yes">sensor_simulator.h</includes>
    <includes refid="ctarget_8h" local="yes">ctarget.h</includes>
    <includes refid="util_8h" local="yes">core/util.h</includes>
    <includes refid="platform_8h" local="yes">core/platform.h</includes>
    <incdepgraph>
      <node id="7">
        <label>stdbool.h</label>
      </node>
      <node id="15">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pqueue.h</label>
        <link refid="pqueue_8h"/>
      </node>
      <node id="16">
        <label>stdarg.h</label>
      </node>
      <node id="18">
        <label>trace.h</label>
        <link refid="trace_8h"/>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>errno.h</label>
      </node>
      <node id="19">
        <label>core/platform.h</label>
        <link refid="platform_8h_source"/>
      </node>
      <node id="5">
        <label>ctarget.h</label>
        <link refid="ctarget_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>tag.h</label>
        <link refid="tag_8h"/>
      </node>
      <node id="12">
        <label>limits.h</label>
      </node>
      <node id="2">
        <label>pthread.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c</label>
        <link refid="sensor__simulator_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>core/reactor.h</label>
        <link refid="reactor_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sensor_simulator.h</label>
        <link refid="sensor__simulator_8h"/>
      </node>
      <node id="11">
        <label>time.h</label>
      </node>
      <node id="3">
        <label>ncurses.h</label>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct__lf__sensor__message__t" prot="public">_lf_sensor_message_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="sensor__simulator_8c_1a67eec5f95f4bdd36888379013c2cf10b" prot="public" static="no">
        <name>WGETCHR_TIMEOUT</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="41" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensor__simulator_8c_1a253dc085a62ce4d344b4b97c2fea4ac0" prot="public" static="no">
        <name>LF_SENSOR_TRIGGER_TABLE_SIZE</name>
        <initializer>96</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="44" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="sensor__simulator_8c_1a8f5bc282c0405791a6bf0c02abe54df9" prot="public" static="no" strong="no">
        <type></type>
        <name>_lf_sensor_message_type</name>
        <enumvalue id="sensor__simulator_8c_1a8f5bc282c0405791a6bf0c02abe54df9a930e1fe9adfb52706ff51c4dd2833dcb" prot="public">
          <name>_lf_sensor_message</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sensor__simulator_8c_1a8f5bc282c0405791a6bf0c02abe54df9a08e41a236b019333536c6ef08828381a" prot="public">
          <name>_lf_sensor_tick</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sensor__simulator_8c_1a8f5bc282c0405791a6bf0c02abe54df9a6c92828b46d7260449bd30c8be3062b6" prot="public">
          <name>_lf_sensor_close_windows</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="58" column="29" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="58" bodyend="60"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sensor__simulator_8c_1a67e4883b16f55f5e45ba5c498e4e5603" prot="public" static="no">
        <type>struct <ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref></type>
        <definition>typedef struct _lf_sensor_message_t _lf_sensor_message_t</definition>
        <argsstring></argsstring>
        <name>_lf_sensor_message_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="66" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="sensor__simulator_8c_1acb4ab4301308daeacb3d7f71c116d3d2" prot="public" static="no" mutable="no">
        <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
        <definition>trigger_t* _lf_sensor_trigger_table[LF_SENSOR_TRIGGER_TABLE_SIZE]</definition>
        <argsstring>[LF_SENSOR_TRIGGER_TABLE_SIZE]</argsstring>
        <name>_lf_sensor_trigger_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Table of Lingua Franca trigger objects to schedule in response to keypresses. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="47" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1aa58341acdf7b2f59f4000909394061b1" prot="public" static="no" mutable="no">
        <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
        <definition>trigger_t* _lf_sensor_sensor_newline_trigger</definition>
        <argsstring></argsstring>
        <name>_lf_sensor_sensor_newline_trigger</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger for the newline character &apos;<linebreak/>
&apos;, which is platform dependent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="50" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a7e66e751c1778a1ad1628a6309131755" prot="public" static="no" mutable="no">
        <type><ref refid="structtrigger__t" kindref="compound">trigger_t</ref> *</type>
        <definition>trigger_t* _lf_sensor_any_key_trigger</definition>
        <argsstring></argsstring>
        <name>_lf_sensor_any_key_trigger</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger for any key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="53" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1afb458531acce5cf61822ddd3018fb1cc" prot="public" static="no" mutable="no">
        <type>lf_mutex_t</type>
        <definition>lf_mutex_t _lf_sensor_mutex</definition>
        <argsstring></argsstring>
        <name>_lf_sensor_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="55" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a2690217f1332b74188d73aeae8e23879" prot="public" static="no" mutable="no">
        <type>lf_cond_t</type>
        <definition>lf_cond_t _lf_sensor_simulator_cond_var</definition>
        <argsstring></argsstring>
        <name>_lf_sensor_simulator_cond_var</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="56" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1aad25827853253f6f21b299697b5f9453" prot="public" static="no" mutable="no">
        <type>_lf_thread_t</type>
        <definition>_lf_thread_t input_thread_id</definition>
        <argsstring></argsstring>
        <name>input_thread_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="69" column="14" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1ac87908551d199f3ec312ce0748d68329" prot="public" static="no" mutable="no">
        <type>_lf_thread_t</type>
        <definition>_lf_thread_t output_thread_id</definition>
        <argsstring></argsstring>
        <name>output_thread_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="70" column="14" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a413abe5862c9af4154bcabf47cbde022" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int thread_created</definition>
        <argsstring></argsstring>
        <name>thread_created</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="71" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a9029bf378e52a9f85a25eb0ba9095fe3" prot="public" static="no" mutable="no">
        <type>WINDOW *</type>
        <definition>WINDOW* default_window</definition>
        <argsstring></argsstring>
        <name>default_window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default window from which to get input characters. If show_welcome_message() is called, this will be the welcome message window. Otherwise, it will be stdscr, the default curses window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="79" column="8" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a682ef20deffe76d72ab94e4e1ac037cc" prot="public" static="no" mutable="no">
        <type>WINDOW *</type>
        <definition>WINDOW* tick_window</definition>
        <argsstring></argsstring>
        <name>tick_window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tick window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="82" column="8" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a694b3b10a1c18c5d3fdf32c62e2326db" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int tick_cursor_x</definition>
        <argsstring></argsstring>
        <name>tick_cursor_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Keep track of the tick cursor position directly so it doesn&apos;t get as messed up by printf() calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="88" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a738704b6f923ff895b40f06a19f375e5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int tick_cursor_y</definition>
        <argsstring></argsstring>
        <name>tick_cursor_y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="88" column="19" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1ae11de240a0625454193034e0172da442" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int print_cursor_x</definition>
        <argsstring></argsstring>
        <name>print_cursor_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="89" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a52cac6a72ccf7e4b4cfa4f8c6780abeb" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int print_cursor_y</definition>
        <argsstring></argsstring>
        <name>print_cursor_y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="89" column="20" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a9553b3dfcfccb994a2df43aa3ff1f53e" prot="public" static="no" mutable="no">
        <type>WINDOW *</type>
        <definition>WINDOW* print_window</definition>
        <argsstring></argsstring>
        <name>print_window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="92" column="8" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a8d610b74b6930e1f1620d21638a71f6d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int print_window_height</definition>
        <argsstring></argsstring>
        <name>print_window_height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The print window height. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="95" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1ab936051f5aaca44c6c3c41dee0d19c36" prot="public" static="no" mutable="no">
        <type>FILE *</type>
        <definition>FILE* log_file</definition>
        <argsstring></argsstring>
        <name>log_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>File to which to write log data, or NULL to send to window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="98" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a03b142cb38481e1ae252f84274ec14e1" prot="public" static="no" mutable="no">
        <type>char **</type>
        <definition>char** welcome_message</definition>
        <argsstring></argsstring>
        <name>welcome_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The welcome message. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="101" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1aed914099b551105b7294552e79e13b16" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int welcome_message_length</definition>
        <argsstring></argsstring>
        <name>welcome_message_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The length of the welcome message. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="104" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1acbf6adab5b84074242e5ad7aa71c5d15" prot="public" static="no" mutable="no">
        <type>struct <ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref> *</type>
        <definition>struct _lf_sensor_message_t* message_q</definition>
        <argsstring></argsstring>
        <name>message_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="106" column="28" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1af431a479d103fe1550833e760fb948e7" prot="public" static="no" mutable="no">
        <type>struct <ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref> *</type>
        <definition>struct _lf_sensor_message_t* message_recycle_q</definition>
        <argsstring></argsstring>
        <name>message_recycle_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="107" column="28" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1a89502730b2655e279c83afb299e8ded5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int tick_window_width</definition>
        <argsstring></argsstring>
        <name>tick_window_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The width of the tick window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="110" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sensor__simulator_8c_1aa31421e2302e39963b9c3ac64e031507" prot="public" static="no" mutable="no">
        <type>struct @0</type>
        <definition>struct @0 _lf_sensor</definition>
        <argsstring></argsstring>
        <name>_lf_sensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="111" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sensor__simulator_8c_1a0e21915a1152dda872b68aa7254249c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_show_message</definition>
        <argsstring>(char *message_lines[], int number_of_lines)</argsstring>
        <name>_lf_show_message</name>
        <param>
          <type>char *</type>
          <declname>message_lines</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_lines</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Put a persistent message in the upper left of the terminal window. The message will be left justified, with each string in the specified array on a new line. This should not be called directly by the user. It assumes the mutex lock is held. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The message lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="122" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="122" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1ae5a65cee79299573890b78d9b7a10996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_start_tick_window</definition>
        <argsstring>(int width)</argsstring>
        <name>_lf_start_tick_window</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start a tick window on the right of the terminal window. This should not be called directly by the user. It assumes the mutex lock is held. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="154" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1afa21343db2cbddc2217a5056e48eda62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_start_print_window</definition>
        <argsstring>(int above, int right)</argsstring>
        <name>_lf_start_print_window</name>
        <param>
          <type>int</type>
          <declname>above</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start a window on the bottom left of the terminal window for printed messages from the application. This should not be called directly by the user. It assumes the mutex lock is held. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>above</parametername>
</parameternamelist>
<parameterdescription>
<para>Space to leave above the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Space to leave to the right of the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="173" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="173" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1a24678a3378f026da6438a1abdc800936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_sensor_post_message</definition>
        <argsstring>(enum _lf_sensor_message_type type, char *body)</argsstring>
        <name>_lf_sensor_post_message</name>
        <param>
          <type>enum _lf_sensor_message_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Post a message to be displayed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type, one of _lf_sensor_message, _lf_sensor_tick, or _lf_sesor_close_window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message, or NULL for exit type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="190" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="190" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1a9468858bfcd43511b468a8612e4b5fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_print_message_function</definition>
        <argsstring>(char *format, va_list args)</argsstring>
        <name>_lf_print_message_function</name>
        <param>
          <type>char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to register to handle printing of messages in <ref refid="util_8h" kindref="compound">util.h</ref>/c. This acquires the mutex lock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="224" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="224" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1a7a8b3518d3bf1f17cf67393019bc626d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lf_sensor_read_input</definition>
        <argsstring>(void *ignored)</argsstring>
        <name>_lf_sensor_read_input</name>
        <param>
          <type>void *</type>
          <declname>ignored</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread to read input characters until an EOF is received. For each character received, if there is a registered trigger for that character, schedule that trigger with a payload equal to the character that was typed. Otherwise, the character is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="242" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="242" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1a709258e171d00094677190625fcb4acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lf_sensor_simulator_thread</definition>
        <argsstring>(void *ignored)</argsstring>
        <name>_lf_sensor_simulator_thread</name>
        <param>
          <type>void *</type>
          <declname>ignored</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread to display strings in either the tick window or the message window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="275" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="275" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1a562a694d5b2ed8c935aa08d78c488114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void end_sensor_simulator</definition>
        <argsstring>()</argsstring>
        <name>end_sensor_simulator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>End ncurses control of the terminal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="370" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="370" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1adfb8c4dc96d976367deb805452b8a3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int start_sensor_simulator</definition>
        <argsstring>(char *message_lines[], int number_of_lines, int tick_window_width, char *log_file, int log_level)</argsstring>
        <name>start_sensor_simulator</name>
        <param>
          <type>char *</type>
          <declname>message_lines</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_lines</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tick_window_width</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>log_file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>log_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start the sensor simulator if it has not been already started. This must be called at least once before any call to register_sensor_key. The specified message is an initial message to display at the upper left, typically a set of instructions, that remains displayed throughout the lifetime of the window. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The message lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tick_window_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the tick window or 0 for none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_file</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, the name of a file to which to write logging messages. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of log messages to redirect to the file. The level should be one of LOG_LEVEL_ERROR, LOG_LEVEL_WARNING, LOG_LEVEL_INFO, LOG_LEVEL_LOG, LOG_LEVEL_DEBUG, or LOG_LEVEL_ALL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, error code for failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="402" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="402" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1ad9a70cc616c82bab0563369a662e5cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void show_tick</definition>
        <argsstring>(char *character)</argsstring>
        <name>show_tick</name>
        <param>
          <type>char *</type>
          <declname>character</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Place a tick (usually a single character) in the tick window. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>character</parametername>
</parameternamelist>
<parameterdescription>
<para>The tick character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="454" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="454" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="sensor__simulator_8c_1a196614841046dea5b94b2a60108fff40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int register_sensor_key</definition>
        <argsstring>(char key, void *action)</argsstring>
        <name>register_sensor_key</name>
        <param>
          <type>char</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a keyboard key to trigger the specified action. Printable ASCII characters (codes 32 to 127) are supported plus &apos;<linebreak/>
&apos; and &apos;\0&apos;, where the latter registers a trigger to invoked when any key is pressed. If a specific key is registered and any key (&apos;\0&apos;) is also registered, the any key trigger will be scheduled after the specific key is scheduled. If these triggers belong to different reactors, they could be invoked in parallel. This will fail if the specified key has already been registered (error code 1), or the key is not a supported key (error code 2) or if the trigger is NULL (error code 3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to trigger when the key is pressed (a pointer to a <ref refid="structtrigger__t" kindref="compound">trigger_t</ref> struct). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, error code for failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" line="478" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c" bodystart="478" bodyend="508"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Edward A. Lee (<ulink url="mailto:eal@berkeley.edu">eal@berkeley.edu</ulink>)</para>
</simplesect>
</para>
<sect1 id="util_8h_1LICENSE">
<title>LICENSE</title>
<para>Copyright (c) 2020, The University of California at Berkeley.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem></orderedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
</sect1>
<sect1 id="util_8h_1DESCRIPTION">
<title>DESCRIPTION</title>
<para>See <ref refid="sensor__simulator_8h" kindref="compound">sensor_simulator.h</ref>. </para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="33"><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ncurses.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sensor__simulator_8h" kindref="compound">sensor_simulator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ctarget_8h" kindref="compound">ctarget.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_8h" kindref="compound">core/util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core/platform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>milliseconds<sp/>that<sp/>wgetchr<sp/>will<sp/>block<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WGETCHR_TIMEOUT<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Support<sp/>ASCII<sp/>characters<sp/>SPACE<sp/>(32)<sp/>through<sp/>DEL<sp/>(127).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LF_SENSOR_TRIGGER_TABLE_SIZE<sp/>96</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/><ref refid="sensor__simulator_8c_1acb4ab4301308daeacb3d7f71c116d3d2" kindref="member">_lf_sensor_trigger_table</ref>[LF_SENSOR_TRIGGER_TABLE_SIZE];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/><ref refid="sensor__simulator_8c_1aa58341acdf7b2f59f4000909394061b1" kindref="member">_lf_sensor_sensor_newline_trigger</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/><ref refid="sensor__simulator_8c_1a7e66e751c1778a1ad1628a6309131755" kindref="member">_lf_sensor_any_key_trigger</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">lf_mutex_t<sp/>_lf_sensor_mutex;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">lf_cond_t<sp/>_lf_sensor_simulator_cond_var;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_lf_sensor_message_type<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor_message,<sp/>_lf_sensor_tick,<sp/>_lf_sensor_close_windows</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="struct__lf__sensor__message__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_lf_sensor_message_type<sp/>type;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>*<sp/>next;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_thread_t<sp/>input_thread_id;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_thread_t<sp/>output_thread_id;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_created;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>WINDOW*<sp/><ref refid="sensor__simulator_8c_1a9029bf378e52a9f85a25eb0ba9095fe3" kindref="member">default_window</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>WINDOW*<sp/><ref refid="sensor__simulator_8c_1a682ef20deffe76d72ab94e4e1ac037cc" kindref="member">tick_window</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a694b3b10a1c18c5d3fdf32c62e2326db" kindref="member">tick_cursor_x</ref>,<sp/>tick_cursor_y;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>print_cursor_x,<sp/>print_cursor_y;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>WINDOW*<sp/><ref refid="sensor__simulator_8c_1a9553b3dfcfccb994a2df43aa3ff1f53e" kindref="member">print_window</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a8d610b74b6930e1f1620d21638a71f6d" kindref="member">print_window_height</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/><ref refid="sensor__simulator_8c_1ab936051f5aaca44c6c3c41dee0d19c36" kindref="member">log_file</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><ref refid="sensor__simulator_8c_1a03b142cb38481e1ae252f84274ec14e1" kindref="member">welcome_message</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1aed914099b551105b7294552e79e13b16" kindref="member">welcome_message_length</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>*<sp/>message_q;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>*<sp/>message_recycle_q;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a89502730b2655e279c83afb299e8ded5" kindref="member">tick_window_width</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/>_lf_sensor;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a0e21915a1152dda872b68aa7254249c4" kindref="member">_lf_show_message</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message_lines[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_lines)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>term_height,<sp/>term_width;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>message_width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>widest<sp/>message<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_lines;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>strlen(message_lines[i]);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;<sp/>message_width)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message_width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>getmaxyx(stdscr,<sp/>term_height,<sp/>term_width);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>terminal<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>WINDOW*<sp/>center_win<sp/>=<sp/>newwin(number_of_lines<sp/>+<sp/>2,<sp/>message_width<sp/>+<sp/>2,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>box(center_win,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>wrefresh(center_win);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wattron(center_win,<sp/>COLOR_PAIR(2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_lines;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mvwprintw(center_win,<sp/>i<sp/>+<sp/>1,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>message_lines[i]);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>According<sp/>to<sp/>curses<sp/>docs,<sp/>the<sp/>following<sp/>should<sp/>not<sp/>be<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>each<sp/>print.<sp/>But<sp/>if<sp/>I<sp/>wait<sp/>and<sp/>do<sp/>it<sp/>later,<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gets<sp/>garbled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrefresh(center_win);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1ae5a65cee79299573890b78d9b7a10996" kindref="member">_lf_start_tick_window</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>term_height,<sp/>term_width;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>getmaxyx(stdscr,<sp/>term_height,<sp/>term_width);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>terminal<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.tick_window<sp/>=<sp/>newwin(term_height,<sp/>width<sp/>+<sp/>2,<sp/>0,<sp/>term_width<sp/>-<sp/>width<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>box(_lf_sensor.tick_window,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>wrefresh(_lf_sensor.tick_window);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>wmove(_lf_sensor.tick_window,<sp/>1,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>to<sp/>not<sp/>overwrite<sp/>the<sp/>box.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.tick_cursor_x<sp/>=<sp/>_lf_sensor.tick_cursor_y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move(0,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1afa21343db2cbddc2217a5056e48eda62" kindref="member">_lf_start_print_window</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>above,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>term_height,<sp/>term_width;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>getmaxyx(stdscr,<sp/>term_height,<sp/>term_width);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>terminal<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.print_window_height<sp/>=<sp/>term_height<sp/>-<sp/>above;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.print_window<sp/>=<sp/>newwin(_lf_sensor.print_window_height,<sp/>term_width<sp/>-<sp/>right,<sp/>above,<sp/>0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>wrefresh(_lf_sensor.print_window);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>wmove(_lf_sensor.print_window,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.print_cursor_y<sp/>=<sp/>_lf_sensor.print_cursor_x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.default_window<sp/>=<sp/>_lf_sensor.print_window;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a24678a3378f026da6438a1abdc800936" kindref="member">_lf_sensor_post_message</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_lf_sensor_message_type<sp/>type,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>body)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;_lf_sensor_mutex);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>*<sp/>message<sp/>=<sp/>_lf_sensor.message_recycle_q;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>message<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>this<sp/>item<sp/>off<sp/>the<sp/>recycle<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.message_recycle_q<sp/>=<sp/>_lf_sensor.message_recycle_q-&gt;next;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>message-&gt;message<sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>message-&gt;type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>message-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>message<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>*<sp/>tail<sp/>=<sp/>_lf_sensor.message_q;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tail<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.message_q<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tail<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>*<sp/>next<sp/>=<sp/>tail-&gt;next;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail-&gt;next<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;_lf_sensor_simulator_cond_var);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;_lf_sensor_mutex);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a9468858bfcd43511b468a8612e4b5fdc" kindref="member">_lf_print_message_function</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/>va_list<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.log_file<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>to<sp/>a<sp/>log<sp/>file<sp/>instead<sp/>of<sp/>to<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vfprintf(_lf_sensor.log_file,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>copy;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>vasprintf(&amp;copy,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1a24678a3378f026da6438a1abdc800936" kindref="member">_lf_sensor_post_message</ref>(_lf_sensor_message,<sp/>copy);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sensor__simulator_8c_1a7a8b3518d3bf1f17cf67393019bc626d" kindref="member">_lf_sensor_read_input</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ignored)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(_lf_sensor.thread_created<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>wgetch(_lf_sensor.default_window);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>file<sp/>received.<sp/>Exit<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>ERR)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wgetch<sp/>returns<sp/>ERR<sp/>if<sp/>it<sp/>times<sp/>out,<sp/>in<sp/>which<sp/>case,<sp/>we<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>check<sp/>whether<sp/>_lf_sensor.thread_created<sp/>has<sp/>been<sp/>set<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>here,<sp/>ERR<sp/>was<sp/>not<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>imperative<sp/>that<sp/>we<sp/>not<sp/>hold<sp/>the<sp/>_lf_sensor_mutex<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calling<sp/>schedule(),<sp/>because<sp/>schedule()<sp/>acquires<sp/>another<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>would<sp/>create<sp/>a<sp/>deadlock<sp/>risk.<sp/><sp/>The<sp/>following<sp/>code<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>a<sp/>_lf_sensor_trigger_table<sp/>entry,<sp/>once<sp/>assigned<sp/>a<sp/>value,<sp/>becomes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>immutable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="sensor__simulator_8c_1aa58341acdf7b2f59f4000909394061b1" kindref="member">_lf_sensor_sensor_newline_trigger</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ctarget_8h_1ae185eda185f191553410d431eb643e09" kindref="member">schedule_copy</ref>(<ref refid="sensor__simulator_8c_1aa58341acdf7b2f59f4000909394061b1" kindref="member">_lf_sensor_sensor_newline_trigger</ref>,<sp/>0,<sp/>&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>-<sp/>32<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>c<sp/>-<sp/>32<sp/>&lt;<sp/>LF_SENSOR_TRIGGER_TABLE_SIZE<sp/>&amp;&amp;<sp/><ref refid="sensor__simulator_8c_1acb4ab4301308daeacb3d7f71c116d3d2" kindref="member">_lf_sensor_trigger_table</ref>[c-32]<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ctarget_8h_1ae185eda185f191553410d431eb643e09" kindref="member">schedule_copy</ref>(<ref refid="sensor__simulator_8c_1acb4ab4301308daeacb3d7f71c116d3d2" kindref="member">_lf_sensor_trigger_table</ref>[c-32],<sp/>0,<sp/>&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>key<sp/>trigger<sp/>triggers<sp/>after<sp/>specific<sp/>keys.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor__simulator_8c_1a7e66e751c1778a1ad1628a6309131755" kindref="member">_lf_sensor_any_key_trigger</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ctarget_8h_1ae185eda185f191553410d431eb643e09" kindref="member">schedule_copy</ref>(<ref refid="sensor__simulator_8c_1a7e66e751c1778a1ad1628a6309131755" kindref="member">_lf_sensor_any_key_trigger</ref>,<sp/>0,<sp/>&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sensor__simulator_8c_1a709258e171d00094677190625fcb4acc" kindref="member">_lf_sensor_simulator_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ignored)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;_lf_sensor_mutex);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.thread_created<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>any<sp/>previous<sp/>curses<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isendwin())<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endwin();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>ncurses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>ncurses.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>initscr();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>start_color();<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>noecho();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>echo<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>cbreak();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>wait<sp/>for<sp/>Return<sp/>or<sp/>Enter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>wtimeout(stdscr,<sp/>WGETCHR_TIMEOUT);<sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>wait<sp/>longer<sp/>than<sp/>this<sp/>for<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>refresh();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>documented,<sp/>but<sp/>needed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.default_window<sp/>=<sp/>stdscr;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.welcome_message<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>_lf_sensor.welcome_message_length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1a0e21915a1152dda872b68aa7254249c4" kindref="member">_lf_show_message</ref>(_lf_sensor.welcome_message,<sp/>_lf_sensor.welcome_message_length);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.tick_window<sp/>=<sp/>stdscr;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.tick_window_width<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1ae5a65cee79299573890b78d9b7a10996" kindref="member">_lf_start_tick_window</ref>(_lf_sensor.tick_window_width);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1afa21343db2cbddc2217a5056e48eda62" kindref="member">_lf_start_print_window</ref>(_lf_sensor.welcome_message_length<sp/>+<sp/>2,<sp/>_lf_sensor.tick_window_width<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ncurses<sp/>is<sp/>not<sp/>thread<sp/>safe,<sp/>but<sp/>since<sp/>the<sp/>wtimeout<sp/>option<sp/>does<sp/>not<sp/>work,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>no<sp/>way<sp/>to<sp/>simultaneously<sp/>listen<sp/>for<sp/>inputs<sp/>and<sp/>produce<sp/>outputs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here,<sp/>we<sp/>create<sp/>a<sp/>thread<sp/>that<sp/>produces<sp/>no<sp/>output<sp/>and<sp/>just<sp/>listens<sp/>for<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>thread<sp/>is<sp/>exclusively<sp/>responsible<sp/>for<sp/>producing<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>lf_thread_create(&amp;_lf_sensor.input_thread_id,<sp/>&amp;<ref refid="sensor__simulator_8c_1a7a8b3518d3bf1f17cf67393019bc626d" kindref="member">_lf_sensor_read_input</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>start<sp/>sensor<sp/>simulator<sp/>input<sp/>listener!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(_lf_sensor.thread_created<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sadly,<sp/>ncurses<sp/>is<sp/>not<sp/>thread<sp/>safe,<sp/>so<sp/>there<sp/>is<sp/>no<sp/>way<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_lf_sensor.message_q<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_wait(&amp;_lf_sensor_simulator_cond_var,<sp/>&amp;_lf_sensor_mutex);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_lf_sensor.message_q<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.message_q-&gt;type<sp/>==<sp/>_lf_sensor_close_windows)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ad8d354f663642349063c0ab241cdbb70" kindref="member">register_print_function</ref>(NULL,<sp/>-1);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endwin();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;_lf_sensor_mutex);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.message_q-&gt;type<sp/>==<sp/>_lf_sensor_tick)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wmove(_lf_sensor.tick_window,<sp/>_lf_sensor.tick_cursor_y,<sp/>_lf_sensor.tick_cursor_x);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wprintw(_lf_sensor.tick_window,<sp/>_lf_sensor.message_q-&gt;message);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tick_height,<sp/>tick_width;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getmaxyx(_lf_sensor.tick_window,<sp/>tick_height,<sp/>tick_width);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.tick_cursor_x<sp/>+=<sp/>strlen(_lf_sensor.message_q-&gt;message);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.tick_cursor_x<sp/>&gt;=<sp/>tick_width<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.tick_cursor_x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.tick_cursor_y++;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.tick_cursor_y<sp/>&gt;=<sp/>tick_height<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.tick_cursor_y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wmove(_lf_sensor.tick_window,<sp/>_lf_sensor.tick_cursor_y,<sp/>_lf_sensor.tick_cursor_x);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrefresh(_lf_sensor.tick_window);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>standard<sp/>string<sp/>cursor<sp/>to<sp/>0,<sp/>0,<sp/>so<sp/>printf()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calls<sp/>don&apos;t<sp/>mess<sp/>up<sp/>the<sp/>screen<sp/>as<sp/>much.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wmove(stdscr,<sp/>0,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.message_q-&gt;type<sp/>==<sp/>_lf_sensor_message)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wmove(_lf_sensor.print_window,<sp/>_lf_sensor.print_cursor_y,<sp/>_lf_sensor.print_cursor_x);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wclrtoeol(_lf_sensor.print_window);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wprintw(_lf_sensor.print_window,<sp/>_lf_sensor.message_q-&gt;message);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.print_cursor_x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.print_cursor_y<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.print_cursor_y<sp/>&gt;=<sp/>_lf_sensor.print_window_height<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.print_cursor_y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wmove(_lf_sensor.print_window,<sp/>_lf_sensor.print_cursor_y,<sp/>_lf_sensor.print_cursor_x);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wclrtoeol(_lf_sensor.print_window);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrefresh(_lf_sensor.print_window);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(_lf_sensor.message_q-&gt;message);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refresh();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>*<sp/>tmp_recycle<sp/>=<sp/>_lf_sensor.message_recycle_q;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__lf__sensor__message__t" kindref="compound">_lf_sensor_message_t</ref>*<sp/>tmp_message<sp/>=<sp/>_lf_sensor.message_q;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.message_recycle_q<sp/>=<sp/>_lf_sensor.message_q;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.message_recycle_q-&gt;next<sp/>=<sp/>tmp_recycle;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.message_q<sp/>=<sp/>tmp_message-&gt;next;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;_lf_sensor_mutex);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a562a694d5b2ed8c935aa08d78c488114" kindref="member">end_sensor_simulator</ref>()<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8c_1ad8d354f663642349063c0ab241cdbb70" kindref="member">register_print_function</ref>(NULL,<sp/>-1);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1a24678a3378f026da6438a1abdc800936" kindref="member">_lf_sensor_post_message</ref>(_lf_sensor_close_windows,<sp/>NULL);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>thread_return;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_thread_join(_lf_sensor.output_thread_id,<sp/>&amp;thread_return);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timeout<sp/>mode<sp/>should<sp/>result<sp/>in<sp/>the<sp/>input<sp/>thread<sp/>exiting<sp/>on<sp/>its<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pthread_kill(_lf_sensor.input_thread_id,<sp/>SIGINT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.thread_created<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.log_file<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(_lf_sensor.log_file);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1adfb8c4dc96d976367deb805452b8a3b2" kindref="member">start_sensor_simulator</ref>(</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message_lines[],</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_lines,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a89502730b2655e279c83afb299e8ded5" kindref="member">tick_window_width</ref>,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="sensor__simulator_8c_1ab936051f5aaca44c6c3c41dee0d19c36" kindref="member">log_file</ref>,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log_level</highlight></codeline>
<codeline lineno="408"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.welcome_message<sp/>=<sp/>message_lines;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.welcome_message_length<sp/>=<sp/>number_of_lines;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.tick_window_width<sp/>=<sp/><ref refid="sensor__simulator_8c_1a89502730b2655e279c83afb299e8ded5" kindref="member">tick_window_width</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.message_q<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.message_recycle_q<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_sensor.thread_created<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_sensor.thread_created<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thread<sp/>has<sp/>not<sp/>been<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>out<sp/>the<sp/>trigger<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>LF_SENSOR_TRIGGER_TABLE_SIZE;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1acb4ab4301308daeacb3d7f71c116d3d2" kindref="member">_lf_sensor_trigger_table</ref>[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>some<sp/>strange<sp/>reason,<sp/>this<sp/>log<sp/>file<sp/>has<sp/>to<sp/>be<sp/>opened<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ncurses<sp/>is<sp/>initialized,<sp/>otherwise,<sp/>ncurses<sp/>gets<sp/>disabled<sp/>(won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accept<sp/>input).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor__simulator_8c_1ab936051f5aaca44c6c3c41dee0d19c36" kindref="member">log_file</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.log_file<sp/>=<sp/>fopen(<ref refid="sensor__simulator_8c_1ab936051f5aaca44c6c3c41dee0d19c36" kindref="member">log_file</ref>,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_sensor.log_file<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>the<sp/>print<sp/>function<sp/>before<sp/>starting<sp/>the<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subsequent<sp/>print<sp/>messages<sp/>will<sp/>go<sp/>into<sp/>the<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1ad8d354f663642349063c0ab241cdbb70" kindref="member">register_print_function</ref>(&amp;<ref refid="sensor__simulator_8c_1a9468858bfcd43511b468a8612e4b5fdc" kindref="member">_lf_print_message_function</ref>,<sp/>log_level);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Is<sp/>this<sp/>needed?<sp/>Users<sp/>should<sp/>call<sp/>end_sensor_simulator<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>shutdown<sp/>reaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(atexit(<ref refid="sensor__simulator_8c_1a562a694d5b2ed8c935aa08d78c488114" kindref="member">end_sensor_simulator</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;sensor_simulator:<sp/>Failed<sp/>to<sp/>register<sp/>end_sensor_simulator<sp/>function!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ncurses<sp/>is<sp/>not<sp/>thread<sp/>safe,<sp/>so<sp/>create<sp/>a<sp/>one<sp/>thread<sp/>that<sp/>does<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>writing<sp/>to<sp/>the<sp/>window<sp/>and<sp/>one<sp/>that<sp/>does<sp/>all<sp/>the<sp/>reading.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>lf_thread_create(&amp;_lf_sensor.output_thread_id,<sp/>&amp;<ref refid="sensor__simulator_8c_1a709258e171d00094677190625fcb4acc" kindref="member">_lf_sensor_simulator_thread</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>start<sp/>sensor<sp/>simulator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1ad9a70cc616c82bab0563369a662e5cc0" kindref="member">show_tick</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>character)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(character<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1a24678a3378f026da6438a1abdc800936" kindref="member">_lf_sensor_post_message</ref>(_lf_sensor_tick,<sp/>character);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor__simulator_8c_1a196614841046dea5b94b2a60108fff40" kindref="member">register_sensor_key</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>key<sp/>-<sp/>32;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>key<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>LF_SENSOR_TRIGGER_TABLE_SIZE))<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;_lf_sensor_mutex);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor__simulator_8c_1aa58341acdf7b2f59f4000909394061b1" kindref="member">_lf_sensor_sensor_newline_trigger</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1aa58341acdf7b2f59f4000909394061b1" kindref="member">_lf_sensor_sensor_newline_trigger</ref><sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>key<sp/>trigger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor__simulator_8c_1a7e66e751c1778a1ad1628a6309131755" kindref="member">_lf_sensor_any_key_trigger</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1a7e66e751c1778a1ad1628a6309131755" kindref="member">_lf_sensor_any_key_trigger</ref><sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor__simulator_8c_1acb4ab4301308daeacb3d7f71c116d3d2" kindref="member">_lf_sensor_trigger_table</ref>[index]<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor__simulator_8c_1acb4ab4301308daeacb3d7f71c116d3d2" kindref="member">_lf_sensor_trigger_table</ref>[index]<sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;_lf_sensor_mutex);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/C/util/sensor_simulator.c"/>
  </compounddef>
</doxygen>
