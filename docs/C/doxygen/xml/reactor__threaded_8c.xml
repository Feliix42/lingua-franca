<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="reactor__threaded_8c" kind="file" language="C++">
    <compoundname>reactor_threaded.c</compoundname>
    <includes refid="reactor__common_8c" local="yes">reactor_common.c</includes>
    <includes refid="platform_8h" local="yes">platform.h</includes>
    <includes local="no">signal.h</includes>
    <incdepgraph>
      <node id="2">
        <label>platform.h</label>
        <link refid="platform_8h_source"/>
      </node>
      <node id="1">
        <label>/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c</label>
        <link refid="reactor__threaded_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>signal.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct__lf__tag__advancement__barrier" prot="public">_lf_tag_advancement_barrier</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="reactor__threaded_8c_1a2759df05e92b68f74325190e9a6aca13" prot="public" static="no">
        <name>MAX_STALL_INTERVAL</name>
        <initializer>MSEC(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runtime infrastructure for the threaded version of the C target of Lingua Franca.</para>
<para><simplesect kind="author"><para>{Edward A. Lee <ulink url="mailto:eal@berkeley.edu">eal@berkeley.edu</ulink>} </para>
</simplesect>
<simplesect kind="author"><para>{Marten Lohstroh <ulink url="mailto:marten@berkeley.edu">marten@berkeley.edu</ulink>} </para>
</simplesect>
<simplesect kind="author"><para>{Soroush Bateni <ulink url="mailto:soroush@utdallas.edu">soroush@utdallas.edu</ulink>} The maximum amount of time a worker thread should stall before checking the reaction queue again. This is not currently used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="43" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="reactor__threaded_8c_1a76d2b896dce8b5b2163d8640e700c36a" prot="public" static="no">
        <name>MIN_WAIT_TIME</name>
        <initializer>USEC(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unless the &quot;fast&quot; option is given, an LF program will wait until physical time matches logical time before handling an event with a given logical time. The amount of time is less than this given threshold, then no wait will occur. The purpose of this is to prevent unnecessary delays caused by simply setting up and performing the wait. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="53" column="9" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="reactor__threaded_8c_1ac95b60ce7811b9e1e1b7984bc9f6aeb3" prot="public" static="no">
        <type>struct <ref refid="struct__lf__tag__advancement__barrier" kindref="compound">_lf_tag_advancement_barrier</ref></type>
        <definition>typedef struct _lf_tag_advancement_barrier _lf_tag_advancement_barrier</definition>
        <argsstring></argsstring>
        <name>_lf_tag_advancement_barrier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="74" column="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="reactor__threaded_8c_1a1d1f317f9855dde7aea91823087d29e0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int number_of_idle_threads</definition>
        <argsstring></argsstring>
        <name>number_of_idle_threads</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="56" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1a539865ef209f81fba78e6d6935fa023d" prot="public" static="no" mutable="no">
        <type><ref refid="struct__lf__tag__advancement__barrier" kindref="compound">_lf_tag_advancement_barrier</ref></type>
        <definition>_lf_tag_advancement_barrier _lf_global_tag_advancement_barrier</definition>
        <argsstring></argsstring>
        <name>_lf_global_tag_advancement_barrier</name>
        <initializer>= {0, FOREVER_TAG}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a global tag barrier and initialize the barrier&apos;s semaphore to 0 and its horizon to FOREVER_TAG. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="81" column="29" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1a1ff4912c9c181cbf07942698c4f74473" prot="public" static="no" mutable="no">
        <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
        <definition>pqueue_t* executing_q</definition>
        <argsstring></argsstring>
        <name>executing_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="84" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1ae709eb5afb597ebc6b6e66e756b3cf62" prot="public" static="no" mutable="no">
        <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
        <definition>pqueue_t* transfer_q</definition>
        <argsstring></argsstring>
        <name>transfer_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="86" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1ab491fbef9a883a7cee19e074dba32661" prot="public" static="no" mutable="no">
        <type>lf_mutex_t</type>
        <definition>lf_mutex_t mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="89" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1ace65260efd42a7c5585e4dcaac5d357f" prot="public" static="no" mutable="no">
        <type>lf_cond_t</type>
        <definition>lf_cond_t event_q_changed</definition>
        <argsstring></argsstring>
        <name>event_q_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="92" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1a350d0aa3d1adc000f5b55b1b109f8407" prot="public" static="no" mutable="no">
        <type>lf_cond_t</type>
        <definition>lf_cond_t reaction_q_changed</definition>
        <argsstring></argsstring>
        <name>reaction_q_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="93" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1a8fd162b673e18bea16dca55832761489" prot="public" static="no" mutable="no">
        <type>lf_cond_t</type>
        <definition>lf_cond_t executing_q_emptied</definition>
        <argsstring></argsstring>
        <name>executing_q_emptied</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="94" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1ae4ea7f94000cdbe956e448768fc0c91e" prot="public" static="no" mutable="no">
        <type>lf_cond_t</type>
        <definition>lf_cond_t global_tag_barrier_requestors_reached_zero</definition>
        <argsstring></argsstring>
        <name>global_tag_barrier_requestors_reached_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="97" column="11" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1a409af2b0cab62d30053271123d5c0c1e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool __advancing_time</definition>
        <argsstring></argsstring>
        <name>__advancing_time</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicator that a worker thread has already taken charge of advancing time. When another worker thread encouters a true value to this variable, it should wait for events to appear on the reaction queue rather than advance time. This variable should only be accessed while holding the mutex lock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="832" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1a76d8bd3f166632ed8f2990a1f29852cd" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int worker_thread_count</definition>
        <argsstring></argsstring>
        <name>worker_thread_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For logging and debugging, each worker thread is numbered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="986" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1a147f52e4b288a4d60e6b91638eaa32c2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _lf_logical_tag_completed</definition>
        <argsstring></argsstring>
        <name>_lf_logical_tag_completed</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="989" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="reactor__threaded_8c_1a360bb929745c997dcffd1bf9affbc353" prot="public" static="no" mutable="no">
        <type>lf_thread_t *</type>
        <definition>lf_thread_t* __thread_ids</definition>
        <argsstring></argsstring>
        <name>__thread_ids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="1254" column="13" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="1254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="reactor__threaded_8c_1a351f84aa3eb871fe8f51e3a6f18e67f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enqueue_network_input_control_reactions</definition>
        <argsstring>(pqueue_t *reaction_q)</argsstring>
        <name>enqueue_network_input_control_reactions</name>
        <param>
          <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
          <declname>reaction_q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueue network input control reactions that determine if the trigger for a given network input port is going to be present at the current logical time or absent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="104" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1172" bodyend="1185" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a58c068ed5637620f62d0be0da850bbc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enqueue_network_output_control_reactions</definition>
        <argsstring>(pqueue_t *reaction_q)</argsstring>
        <name>enqueue_network_output_control_reactions</name>
        <param>
          <type><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref> *</type>
          <declname>reaction_q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueue network output control reactions that will send a PORT_ABSENT message to downstream federates if a given network output port is not present. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="110" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="1191" bodyend="1206" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" declline="110" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a88a24607cd2509ab4d625a054306492f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_increment_global_tag_barrier_already_locked</definition>
        <argsstring>(tag_t future_tag)</argsstring>
        <name>_lf_increment_global_tag_barrier_already_locked</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>future_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise a barrier to prevent the current tag from advancing to or beyond the value of the future_tag argument, if possible. If the current tag is already at or beyond future_tag, then prevent any further advances. This function will increment the total number of pending barrier requests. For each call to this function, there should always be a subsequent call to _lf_decrement_global_tag_barrier_locked() to release the barrier.</para>
<para>If there is already a barrier raised at a tag later than future_tag, this function will change the barrier to future_tag or the current tag, whichever is larger. If the existing barrier is earlier than future_tag, this function will not change the barrier. If there are no existing barriers and future_tag is in the past relative to the current tag, this function will raise a barrier to the current tag.</para>
<para>This function assumes the mutex lock is already held, thus, it will not acquire it itself.</para>
<para><simplesect kind="note"><para>This function is only useful in threaded applications to facilitate certain non-blocking functionalities such as receiving timed messages over the network or handling stop in a federated execution.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>future_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A desired tag for the barrier. This function will guarantee that current logical time will not go past future_tag if it is in the future. If future_tag is in the past (or equals to current logical time), the runtime will freeze advancement of logical time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="141" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="141" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1aa67f3015ea5ee2a7885015202b75585e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_increment_global_tag_barrier</definition>
        <argsstring>(tag_t future_tag)</argsstring>
        <name>_lf_increment_global_tag_barrier</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>future_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise a barrier to prevent the current tag from advancing to or beyond the value of the future_tag argument, if possible. If the current tag is already at or beyond future_tag, then prevent any further advances. This function will increment the total number of pending barrier requests. For each call to this function, there should always be a subsequent call to _lf_decrement_global_tag_barrier_locked() to release the barrier.</para>
<para>If there is already a barrier raised at a tag later than future_tag, this function will change the barrier to future_tag or the current tag, whichever is larger. If the existing barrier is earlier than future_tag, this function will not change the barrier. If there are no existing barriers and future_tag is in the past relative to the current tag, this function will raise a barrier to the current tag.</para>
<para>This function acquires the mutex lock .</para>
<para><simplesect kind="note"><para>This function is only useful in threaded applications to facilitate certain non-blocking functionalities such as receiving timed messages over the network or handling stop in a federated execution.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>future_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A desired tag for the barrier. This function will guarantee that current tag will not go past future_tag if it is in the future. If future_tag is in the past (or equals to current tag), the runtime will freeze advancement of tag. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="211" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a9438a9e9c2e8e6f15cc02c28b4828e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_decrement_global_tag_barrier_locked</definition>
        <argsstring>()</argsstring>
        <name>_lf_decrement_global_tag_barrier_locked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrement the total number of pending barrier requests for the global tag barrier. If the total number of requests reaches zero, this function resets the tag barrier to FOREVER_TAG and notifies all threads that are waiting on the barrier that the number of requests has reached zero.</para>
<para>This function assumes that the caller already holds the mutex lock.</para>
<para><simplesect kind="note"><para>This function is only useful in threaded applications to facilitate certain non-blocking functionalities such as receiving timed messages over the network or handling stop in the federated execution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="229" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="229" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a6392f1a7187ec9d36d35ad51bf06ded0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _lf_wait_on_global_tag_barrier</definition>
        <argsstring>(tag_t proposed_tag)</argsstring>
        <name>_lf_wait_on_global_tag_barrier</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>proposed_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the proposed_tag is greater than or equal to a barrier tag that has been set by a call to _lf_increment_global_tag_barrier or _lf_increment_global_tag_barrier_already_locked, and if there are requestors still pending on that barrier, then wait until all requestors have been satisfied. This is used in federated execution when an incoming timed message has been partially read so that we know its tag, but the rest of message has not yet been read and hence the event has not yet appeared on the event queue. To prevent tardiness, this function blocks the advancement of time until to the proposed tag until the message has been put onto the event queue.</para>
<para>If the prposed_tag is greater than the stop tag, then use the stop tag instead.</para>
<para>This function assumes the mutex is already locked. Thus, it unlocks the mutex while it&apos;s waiting to allow the tag barrier to change.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proposed_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag that the runtime wants to advance to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if no wait was needed and 1 if a wait actually occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="269" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="269" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a369700b5e0906335f3d304a67eec5f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref></type>
        <definition>handle_t _lf_schedule_token</definition>
        <argsstring>(void *action, interval_t extra_delay, lf_token_t *token)</argsstring>
        <name>_lf_schedule_token</name>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>extra_delay</declname>
        </param>
        <param>
          <type><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedule the specified trigger at current_tag.time plus the offset of the specified trigger plus the delay. See <ref refid="reactor_8h" kindref="compound">reactor.h</ref> for documentation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="306" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="306" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a2c07a7b9e616070f32fa88b4959fba53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref></type>
        <definition>handle_t _lf_schedule_copy</definition>
        <argsstring>(void *action, interval_t offset, void *value, int length)</argsstring>
        <name>_lf_schedule_copy</name>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedule an action to occur with the specified value and time offset with a copy of the specified value. See <ref refid="reactor_8h" kindref="compound">reactor.h</ref> for documentation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="321" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="321" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1aa0a09f1dc9ee5870a6d225a3569388df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref></type>
        <definition>handle_t _lf_schedule_value</definition>
        <argsstring>(void *action, interval_t extra_delay, void *value, int length)</argsstring>
        <name>_lf_schedule_value</name>
        <param>
          <type>void *</type>
          <declname>action</declname>
        </param>
        <param>
          <type><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref></type>
          <declname>extra_delay</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variant of schedule_token that creates a token to carry the specified value. See <ref refid="reactor_8h" kindref="compound">reactor.h</ref> for documentation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="348" column="10" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="348" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1ad96dd94446ff66184dcf0f8f65cdb4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logical_tag_complete</definition>
        <argsstring>(tag_t tag_to_send)</argsstring>
        <name>logical_tag_complete</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag_to_send</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Placeholder for code-generated function that will, in a federated execution, be used to coordinate the advancement of tag. It will notify the runtime infrastructure (RTI) that all reactions at the specified logical tag have completed. This function should be called only while holding the mutex lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag_to_send</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="370" column="6" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" declline="370" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1ad83fe9661682934029a42954b8fe6e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void synchronize_with_other_federates</definition>
        <argsstring>()</argsstring>
        <name>synchronize_with_other_federates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronize the start with other federates via the RTI. This assumes that a connection to the RTI is already made and _fed.socket_TCP_RTI is valid. It then sends the current logical time to the RTI and waits for the RTI to respond with a specified time. It starts a thread to listen for messages from the RTI. It then waits for physical time to match the specified time, sets current logical time to the time returned by the RTI, and then returns. If <ndash/>fast was specified, then this does not wait for physical time to match the logical start time returned by the RTI.</para>
<para>Synchronize the start with other federates via the RTI. This assumes that a connection to the RTI is already made and _fed.socket_TCP_RTI is valid. It then sends the current logical time to the RTI and waits for the RTI to respond with a specified time. It starts a thread to listen for messages from the RTI. It then waits for physical time to match the specified time, sets current logical time to the time returned by the RTI, and then returns. If <ndash/>fast was specified, then this does not wait for physical time to match the logical start time returned by the RTI.</para>
<para>FIXME: Possibly should be renamed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="384" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/federate.c" bodystart="2339" bodyend="2375" declfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" declline="384" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1aae38fdb4e79b2dc10d5f5c3131a423ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wait_until</definition>
        <argsstring>(instant_t logical_time_ns, lf_cond_t *condition)</argsstring>
        <name>wait_until</name>
        <param>
          <type><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref></type>
          <declname>logical_time_ns</declname>
        </param>
        <param>
          <type>lf_cond_t *</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until physical time matches or exceeds the specified logical time, unless -fast is given.</para>
<para>If an event is put on the event queue during the wait, then the wait is interrupted and this function returns false. It also returns false if the timeout time is reached before the wait has completed.</para>
<para>The mutex lock is assumed to be held by the calling thread. Note this this could return true even if the a new event was placed on the queue if that event time matches or exceeds the specified time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logical_time_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical time to wait until physical time matches it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_if_interrupted</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is false, then wait_util will wait until physical time matches the logical time regardless of whether new events get put on the event queue. This is useful, for example, for synchronizing the start of the program.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return false if the wait is interrupted either because of an event queue signal or if the wait time was interrupted early by reaching the stop time, if one was specified. Return true if the full wait time was reached. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="410" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="410" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1abf5752e7ec0ac5ddd757162c0125dd2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
        <definition>tag_t get_next_event_tag</definition>
        <argsstring>()</argsstring>
        <name>get_next_event_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the tag of the next event on the event queue. If the event queue is empty then return either FOREVER_TAG or, is a stop_time (timeout time) has been set, the stop time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="497" column="7" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="497" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a00a390347d084375a99b1c9151bd3137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
        <definition>tag_t send_next_event_tag</definition>
        <argsstring>(tag_t tag, bool wait_for_reply)</argsstring>
        <name>send_next_event_tag</name>
        <param>
          <type><ref refid="structtag__t" kindref="compound">tag_t</ref></type>
          <declname>tag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait_for_reply</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In a federated execution with centralized coordination, this function returns a tag that is less than or equal to the specified tag when, as far as the federation is concerned, it is safe to commit to advancing to the returned tag. That is, all incoming network messages with tags less than the returned tag have been received. In unfederated execution or in federated execution with decentralized control, this function returns the specified tag immediately.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to which to advance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_for_reply</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, wait for the RTI to respond. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tag to which it is safe to advance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="548" column="7" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="548" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a62d51710d4d395b72f2df4d085fae004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __next</definition>
        <argsstring>()</argsstring>
        <name>__next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If there is at least one event in the event queue, then wait until physical time matches or exceeds the time of the least tag on the event queue; pop the next event(s) from the event queue that all have the same tag; extract from those events the reactions that are to be invoked at this logical time and insert them into the reaction queue. The event queue is sorted by time tag.</para>
<para>If there is no event in the queue and the keepalive command-line option was not given, and this is not a federated execution with centralized coordination, set the stop tag to the current tag. If keepalive was given, then wait for either <ref refid="reactor_8h_1af629769c213699f0e4c9360811ee7251" kindref="member">request_stop()</ref> to be called or an event appears in the event queue and then return.</para>
<para>Every time tag is advanced, it is checked against stop tag and if they are equal, shutdown reactions are triggered.</para>
<para>This does not acquire the mutex lock. It assumes the lock is already held. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="575" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="575" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1af629769c213699f0e4c9360811ee7251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void request_stop</definition>
        <argsstring>()</argsstring>
        <name>request_stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request a stop to execution as soon as possible. In a non-federated execution, this will occur at the conclusion of the current logical time. In a federated execution, it will likely occur at a later logical time determined by the RTI so that all federates stop at the same logical time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="701" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="701" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1aceed43c20adeef6ad3186a9552e2ce2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _lf_is_blocked_by_executing_reaction</definition>
        <argsstring>(reaction_t *reaction)</argsstring>
        <name>_lf_is_blocked_by_executing_reaction</name>
        <param>
          <type><ref refid="structreaction__t" kindref="compound">reaction_t</ref> *</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the reaction is blocked by a currently executing reaction, return true. Otherwise, return false. A reaction blocks the specified reaction if it has a level less than that of the specified reaction and it also has an overlapping chain ID, meaning that it is (possibly) upstream of the specified reaction. This function assumes the mutex is held because it accesses the executing_q. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>The reaction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this reaction is blocked, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="736" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="736" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1aff96c0066277cd4e73da3bbc626e0178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structreaction__t" kindref="compound">reaction_t</ref> *</type>
        <definition>reaction_t* first_ready_reaction</definition>
        <argsstring>()</argsstring>
        <name>first_ready_reaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the first ready (i.e., unblocked) reaction in the reaction queue if there is one. Return <computeroutput>NULL</computeroutput> if all pending reactions are blocked.</para>
<para>The reaction queue is sorted by index, where a lower index appears earlier in the queue. The first reaction in the reaction queue is ready to execute if it is not blocked by any reaction that is currently executing in another thread. If that first reaction is blocked, then the second reaction is ready to execute if it is not blocked by any reaction that is currently executing (if it is blocked by the first reaction, then it is also blocked by a currently executing reaction because the first reaction is blocked).</para>
<para>The upper 48 bits of the index are the deadline and the lower 16 bits denote a level in the precedence graph. Reactions that do not depend on any upstream reactions have level 0, and greater values indicate the length of the longest upstream path to a reaction with level 0. If a reaction has no specified deadline and is not upstream of any reaction with a specified deadline, then its deadline is the largest 48 bit number. Also, all reactions that precede a reaction r that has a deadline D are are assigned a deadline D&apos; &lt;= D.</para>
<para>A reaction r is blocked by an executing reaction e if e has a lower level and the chain ID of e overlaps (shares at least one bit) with the chain ID of r. If the two chain IDs share no bits, then we are assured that e is not upstream of r and hence cannot block r.</para>
<para>This function assumes the mutex is held.</para>
<para><simplesect kind="return"><para>the first-ranked reaction that is ready to execute, NULL if there is none. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="791" column="12" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="791" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a90d13f45544346ea6623768358762d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_enqueue_reaction</definition>
        <argsstring>(reaction_t *reaction)</argsstring>
        <name>_lf_enqueue_reaction</name>
        <param>
          <type><ref refid="structreaction__t" kindref="compound">reaction_t</ref> *</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Put the specified reaction on the reaction queue. This version acquires a mutex lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>The reaction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="839" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="839" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1ad85dac0aa31333cb4fa1efb00f0cf907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_notify_workers_locked</definition>
        <argsstring>()</argsstring>
        <name>_lf_notify_workers_locked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify workers that something has changed on the reaction_q. Notification is performed only if there is a reaction on the reaction queue that is ready to execute and there is an idle worker thread. This function assumes the caller holds the mutex lock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="862" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="862" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1aa46a83ed702e2c83d42625a8c78a9f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_notify_workers</definition>
        <argsstring>()</argsstring>
        <name>_lf_notify_workers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify workers that something has changed on the reaction_q. Notification is performed only if there is a reaction on the reaction queue that is ready to execute and there is an idle worker thread. This function acquires the mutex lock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="883" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="883" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a31c8ecdfd2be6749341fb93b679b1533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lf_initialize_start_tag</definition>
        <argsstring>()</argsstring>
        <name>_lf_initialize_start_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the necessary operations before tag (0,0) can be processed.</para>
<para>This includes injecting any reactions triggered at (0,0), initializing timers, and for the federated execution, waiting for a proper coordinated start.</para>
<para>This assumes the mutex lock is held by the caller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="897" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="897" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a79efc1e0456dd129656fe84fe75a922f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* worker</definition>
        <argsstring>(void *arg)</argsstring>
        <name>worker</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Worker thread for the thread pool. This acquires the mutex lock and releases it to wait for time to elapse or for asynchronous events and also releases it to execute reactions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="996" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="996" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1ad96dc6cbe1d3365e52aad6aecbf036d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_snapshot</definition>
        <argsstring>()</argsstring>
        <name>print_snapshot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If DEBUG logging is enabled, prints the status of the event queue, the reaction queue, and the executing queue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="1239" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="1239" bodyend="1251"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a0f3ba5d72ba071d394b1e966e783c4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void start_threads</definition>
        <argsstring>()</argsstring>
        <name>start_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="1257" column="6" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="1257" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="reactor__threaded_8c_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" line="1266" column="5" bodyfile="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c" bodystart="1266" bodyend="1346"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Runtime<sp/>infrastructure<sp/>for<sp/>the<sp/>threaded<sp/>version<sp/>of<sp/>the<sp/>C<sp/>target<sp/>of<sp/>Lingua<sp/>Franca.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2019,<sp/>The<sp/>University<sp/>of<sp/>California<sp/>at<sp/>Berkeley.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,</highlight></codeline>
<codeline lineno="7"><highlight class="comment">are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="17"><highlight class="comment">EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="18"><highlight class="comment">MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="19"><highlight class="comment">THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="22"><highlight class="comment">INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="23"><highlight class="comment">STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="24"><highlight class="comment">THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">***************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor">#include<sp/>&quot;reactor_common.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;platform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor">#define<sp/>MAX_STALL_INTERVAL<sp/>MSEC(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor">#define<sp/>MIN_WAIT_TIME<sp/>USEC(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>idle<sp/>worker<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_idle_threads<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>A<sp/>struct<sp/>representing<sp/>a<sp/>barrier<sp/>in<sp/>threaded<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>Lingua<sp/>Franca<sp/>programs<sp/>that<sp/>can<sp/>prevent<sp/>advancement<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>of<sp/>tag<sp/>if</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>1-<sp/>Number<sp/>of<sp/>requestors<sp/>is<sp/>larger<sp/>than<sp/>0</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>2-<sp/>Value<sp/>of<sp/>horizon<sp/>is<sp/>not<sp/>(FOREVER,<sp/>0)</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="struct__lf__tag__advancement__barrier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__lf__tag__advancement__barrier" kindref="compound">_lf_tag_advancement_barrier</ref><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>requestors;<sp/></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>indicate<sp/>the<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>requestors<sp/>that<sp/>have<sp/>asked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>barrier<sp/>to<sp/>be<sp/>raised</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>horizon;<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>semaphore<sp/>is<sp/>larger<sp/>than<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>runtime<sp/>should<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>its<sp/>tag<sp/>beyond<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>horizon.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><ref refid="struct__lf__tag__advancement__barrier" kindref="compound">_lf_tag_advancement_barrier</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="struct__lf__tag__advancement__barrier" kindref="compound">_lf_tag_advancement_barrier</ref><sp/>_lf_global_tag_advancement_barrier<sp/>=<sp/>{0,<sp/>FOREVER_TAG};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Queue<sp/>of<sp/>currently<sp/>executing<sp/>reactions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>executing_q;<sp/></highlight><highlight class="comment">//<sp/>Sorted<sp/>by<sp/>index<sp/>(precedence<sp/>sort)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>transfer_q;<sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>reactions<sp/>that<sp/>are<sp/>still<sp/>blocked<sp/>by<sp/>other<sp/>reactions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>one<sp/>and<sp/>only<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">lf_mutex_t<sp/>mutex;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Condition<sp/>variables<sp/>used<sp/>for<sp/>notification<sp/>between<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">lf_cond_t<sp/>event_q_changed;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">lf_cond_t<sp/>reaction_q_changed;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">lf_cond_t<sp/>executing_q_emptied;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>condition<sp/>variable<sp/>that<sp/>notifies<sp/>threads<sp/>whenever<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>requestors<sp/>on<sp/>the<sp/>tag<sp/>barrier<sp/>reaches<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">lf_cond_t<sp/>global_tag_barrier_requestors_reached_zero;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a351f84aa3eb871fe8f51e3a6f18e67f6" kindref="member">enqueue_network_input_control_reactions</ref>(<ref refid="structpqueue__t" kindref="compound">pqueue_t</ref><sp/>*reaction_q);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1a58c068ed5637620f62d0be0da850bbc3" kindref="member">enqueue_network_output_control_reactions</ref>(<ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>reaction_q);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_increment_global_tag_barrier_already_locked(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>future_tag)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>future_tag<sp/>is<sp/>after<sp/>stop<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>only<sp/>occur<sp/>when<sp/>a<sp/>federate<sp/>receives<sp/>a<sp/>timed<sp/>message<sp/>with<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>tag<sp/>that<sp/>is<sp/>after<sp/>the<sp/>stop<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(future_tag))<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>raise<sp/>a<sp/>barrier<sp/>after<sp/>the<sp/>stop<sp/>tag.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>future_tag<sp/>=<sp/>stop_tag;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref><sp/>=<sp/><ref refid="tag_8c_1a284eab9a62e22fa3a64d36d301d0195d" kindref="member">get_current_tag</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>future_tag<sp/>is<sp/>actually<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(future_tag,<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Future<sp/>tag<sp/>is<sp/>actually<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>whether<sp/>it<sp/>is<sp/>smaller<sp/>than<sp/>any<sp/>pre-existing<sp/>barrier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(future_tag,<sp/>_lf_global_tag_advancement_barrier.horizon)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>future<sp/>tag<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>current<sp/>horizon<sp/>of<sp/>the<sp/>barrier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore,<sp/>we<sp/>should<sp/>prevent<sp/>logical<sp/>time<sp/>from<sp/>reaching<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>future<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon<sp/>=<sp/>future_tag;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Raised<sp/>barrier<sp/>at<sp/>elapsed<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon.microstep);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>future_tag<sp/>is<sp/>not<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>possibility<sp/>is<sp/>that<sp/>the<sp/>incoming<sp/>message<sp/>has<sp/>violated<sp/>the<sp/>STP<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>possibility<sp/>is<sp/>that<sp/>the<sp/>message<sp/>is<sp/>coming<sp/>from<sp/>a<sp/>zero-delay<sp/>loop,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>control<sp/>reactions<sp/>are<sp/>waiting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>logical<sp/>time<sp/>from<sp/>advancing<sp/>further<sp/>so<sp/>that<sp/>the<sp/>measure<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STP<sp/>violation<sp/>properly<sp/>reflects<sp/>the<sp/>amount<sp/>of<sp/>time<sp/>(logical<sp/>or<sp/>physical)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>has<sp/>elapsed<sp/>after<sp/>the<sp/>incoming<sp/>message<sp/>would<sp/>have<sp/>violated<sp/>the<sp/>STP<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon.microstep++;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Raised<sp/>barrier<sp/>at<sp/>elapsed<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon.microstep);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>the<sp/>number<sp/>of<sp/>requestors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.requestors++;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_increment_global_tag_barrier(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>future_tag)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_increment_global_tag_barrier_already_locked(future_tag);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_decrement_global_tag_barrier_locked()<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>the<sp/>number<sp/>of<sp/>requestors<sp/>for<sp/>the<sp/>tag<sp/>barrier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.requestors--;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>semaphore<sp/>is<sp/>negative,<sp/>which<sp/>indicates<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>mismatched<sp/>call<sp/>was<sp/>placed<sp/>for<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_global_tag_advancement_barrier.requestors<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;Mismatched<sp/>use<sp/>of<sp/>_lf_increment_global_tag_barrier()&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/><sp/>_lf_decrement_global_tag_barrier_locked().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_global_tag_advancement_barrier.requestors<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>semaphore<sp/>reaches<sp/>zero,<sp/>reset<sp/>the<sp/>horizon<sp/>to<sp/>forever.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon<sp/>=<sp/>FOREVER_TAG;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>waiting<sp/>threads<sp/>that<sp/>the<sp/>semaphore<sp/>has<sp/>reached<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;global_tag_barrier_requestors_reached_zero);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Barrier<sp/>is<sp/>at<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon.time,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_global_tag_advancement_barrier.horizon.microstep);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_lf_wait_on_global_tag_barrier(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>proposed_tag)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>most<sp/>common<sp/>case<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_global_tag_advancement_barrier.requestors<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>wait<sp/>for<sp/>tags<sp/>after<sp/>the<sp/>stop<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(proposed_tag))<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proposed_tag<sp/>=<sp/>stop_tag;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>wait<sp/>forever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proposed_tag.time<sp/>==<sp/>FOREVER)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Global<sp/>tag<sp/>barrier<sp/>should<sp/>not<sp/>handle<sp/>FOREVER<sp/>proposed<sp/>tags.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>the<sp/>global<sp/>barrier<sp/>semaphore<sp/>on<sp/>logical<sp/>time<sp/>is<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>proposed_time<sp/>is<sp/>larger<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>horizon.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_lf_global_tag_advancement_barrier.requestors<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(proposed_tag,<sp/>_lf_global_tag_advancement_barrier.horizon)<sp/>&gt;=<sp/>0</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>on<sp/>barrier<sp/>for<sp/>tag<sp/>(%lld,<sp/>%u).&quot;</highlight><highlight class="normal">,<sp/>proposed_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>proposed_tag.microstep);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>no<sp/>requestor<sp/>remains<sp/>for<sp/>the<sp/>barrier<sp/>on<sp/>logical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_wait(&amp;global_tag_barrier_requestors_reached_zero,<sp/>&amp;mutex);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>stop<sp/>tag<sp/>may<sp/>have<sp/>changed<sp/>during<sp/>the<sp/>wait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(proposed_tag))<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proposed_tag<sp/>=<sp/>stop_tag;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/><ref refid="reactor_8h_1a369700b5e0906335f3d304a67eec5f29" kindref="member">_lf_schedule_token</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action,<sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>extra_delay,<sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger<sp/>=<sp/>_lf_action_to_trigger(action);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_value<sp/>=<sp/><ref refid="reactor_8h_1a1b914dafd583948c817b0ae6ce739b6d" kindref="member">__schedule</ref>(trigger,<sp/>extra_delay,<sp/>token);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>main<sp/>thread<sp/>in<sp/>case<sp/>it<sp/>is<sp/>waiting<sp/>for<sp/>physical<sp/>time<sp/>to<sp/>elapse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_value;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/><ref refid="reactor_8h_1a2c07a7b9e616070f32fa88b4959fba53" kindref="member">_lf_schedule_copy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action,<sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1a369700b5e0906335f3d304a67eec5f29" kindref="member">_lf_schedule_token</ref>(action,<sp/>offset,<sp/>NULL);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger<sp/>=<sp/>_lf_action_to_trigger(action);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger<sp/>==<sp/>NULL<sp/>||<sp/>trigger-&gt;token<sp/>==<sp/>NULL<sp/>||<sp/>trigger-&gt;token-&gt;<ref refid="structlf__token__t_1af2b9d91b8dcfbc640f0cf52d4fac6035" kindref="member">element_size</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;schedule:<sp/>Invalid<sp/>trigger<sp/>or<sp/>element<sp/>size.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>token<sp/>with<sp/>an<sp/>array<sp/>size<sp/>of<sp/>length<sp/>and<sp/>a<sp/>reference<sp/>count<sp/>of<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token<sp/>=<sp/>__initialize_token(trigger-&gt;token,<sp/>length);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>value<sp/>into<sp/>the<sp/>newly<sp/>allocated<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref>,<sp/>value,<sp/>token-&gt;<ref refid="structlf__token__t_1af2b9d91b8dcfbc640f0cf52d4fac6035" kindref="member">element_size</ref><sp/>*<sp/>length);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>schedule<sp/>function<sp/>will<sp/>increment<sp/>the<sp/>reference<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/>result<sp/>=<sp/><ref refid="reactor_8h_1a1b914dafd583948c817b0ae6ce739b6d" kindref="member">__schedule</ref>(trigger,<sp/>offset,<sp/>token);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>main<sp/>thread<sp/>in<sp/>case<sp/>it<sp/>is<sp/>waiting<sp/>for<sp/>physical<sp/>time<sp/>to<sp/>elapse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="reactor_8h_1a5ad7d32f3a1ddabdc2933223ca6ce2ea" kindref="member">handle_t</ref><sp/><ref refid="reactor_8h_1aa0a09f1dc9ee5870a6d225a3569388df" kindref="member">_lf_schedule_value</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>action,<sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>extra_delay,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigger__t" kindref="compound">trigger_t</ref>*<sp/>trigger<sp/>=<sp/>_lf_action_to_trigger(action);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlf__token__t" kindref="compound">lf_token_t</ref>*<sp/>token<sp/>=<sp/><ref refid="reactor_8h_1a9d8ea5bc3ac4d18edafab309bc2a9c8a" kindref="member">create_token</ref>(trigger-&gt;element_size);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1a96f790f8f8dcc01474dbc255e05ceaa8" kindref="member">value</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structlf__token__t_1aa907a3d0901bd1ae3ab88fecb8dc11e5" kindref="member">length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_value<sp/>=<sp/><ref refid="reactor_8h_1a1b914dafd583948c817b0ae6ce739b6d" kindref="member">__schedule</ref>(trigger,<sp/>extra_delay,<sp/>token);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>main<sp/>thread<sp/>in<sp/>case<sp/>it<sp/>is<sp/>waiting<sp/>for<sp/>physical<sp/>time<sp/>to<sp/>elapse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_value;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logical_tag_complete(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag_to_send);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1ad83fe9661682934029a42954b8fe6e2f" kindref="member">synchronize_with_other_federates</ref>();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wait_until(<ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>logical_time_ns,<sp/>lf_cond_t*<sp/>condition)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;--------<sp/>Waiting<sp/>until<sp/>physical<sp/>time<sp/>matches<sp/>logical<sp/>time<sp/>%lld&quot;</highlight><highlight class="normal">,<sp/>logical_time_ns);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>return_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>wait_until_time_ns<sp/>=<sp/>logical_time_ns;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED<sp/>//<sp/>Only<sp/>apply<sp/>the<sp/>STP<sp/>offset<sp/>if<sp/>coordination<sp/>is<sp/>decentralized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>STP<sp/>offset<sp/>to<sp/>the<sp/>logical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>an<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wait_until_time_ns<sp/>&lt;<sp/>FOREVER<sp/>-<sp/><ref refid="reactor_8h_1a39f588e1df453139dbb9a4157dda2027" kindref="member">_lf_global_time_STP_offset</ref>)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>wait_time<sp/>is<sp/>not<sp/>forever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Adding<sp/>STP<sp/>offset<sp/>%lld<sp/>to<sp/>wait<sp/>until<sp/>time<sp/>%lld.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a39f588e1df453139dbb9a4157dda2027" kindref="member">_lf_global_time_STP_offset</ref>,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_until_time_ns<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait_until_time_ns<sp/>+=<sp/><ref refid="reactor_8h_1a39f588e1df453139dbb9a4157dda2027" kindref="member">_lf_global_time_STP_offset</ref>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fast)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>physical<sp/>time<sp/>as<sp/>adjusted<sp/>by<sp/>clock<sp/>synchronization<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>current_physical_time<sp/>=<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>wait<sp/>until<sp/>that<sp/>adjusted<sp/>time<sp/>matches<sp/>the<sp/>logical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>ns_to_wait<sp/>=<sp/>wait_until_time_ns<sp/>-<sp/>current_physical_time;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>not<sp/>wait<sp/>if<sp/>that<sp/>adjusted<sp/>time<sp/>is<sp/>already<sp/>ahead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>logical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ns_to_wait<sp/>&lt;<sp/>MIN_WAIT_TIME)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Wait<sp/>time<sp/>%lld<sp/>is<sp/>less<sp/>than<sp/>MIN_WAIT_TIME<sp/>%lld.<sp/>Skipping<sp/>wait.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ns_to_wait,<sp/>MIN_WAIT_TIME);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_value;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>use<sp/>lf_cond_timedwait,<sp/>which<sp/>takes<sp/>as<sp/>an<sp/>argument<sp/>the<sp/>absolute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>to<sp/>wait<sp/>until.<sp/>However,<sp/>that<sp/>will<sp/>not<sp/>include<sp/>the<sp/>offset<sp/>that<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>calculated<sp/>with<sp/>clock<sp/>synchronization.<sp/>So<sp/>we<sp/>need<sp/>to<sp/>instead<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>time<sp/>it<sp/>waits<sp/>is<sp/>ns_to_wait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>the<sp/>current<sp/>clock<sp/>value<sp/>as<sp/>obtained<sp/>using<sp/>CLOCK_REALTIME<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>what<sp/>lf_cond_timedwait<sp/>will<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>call<sp/>to<sp/>setPhysicalTime()<sp/>set<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_lf_last_reported_unadjusted_physical_time_ns<sp/>to<sp/>the<sp/>CLOCK_REALTIME<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unadjusted<sp/>by<sp/>clock<sp/>synchronization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>if<sp/>ns_to_wait<sp/>is<sp/>large<sp/>enough,<sp/>then<sp/>the<sp/>following<sp/>addition<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overflow.<sp/>This<sp/>could<sp/>happen,<sp/>for<sp/>example,<sp/>if<sp/>wait_until_time_ns<sp/>==<sp/>FOREVER.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>unadjusted_wait_until_time_ns<sp/>=<sp/>FOREVER;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FOREVER<sp/>-<sp/><ref refid="tag_8c_1aa69d28e60eef684c98f95a802681c4b9" kindref="member">_lf_last_reported_unadjusted_physical_time_ns</ref><sp/>&gt;<sp/>ns_to_wait)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unadjusted_wait_until_time_ns<sp/>=<sp/><ref refid="tag_8c_1aa69d28e60eef684c98f95a802681c4b9" kindref="member">_lf_last_reported_unadjusted_physical_time_ns</ref><sp/>+<sp/>ns_to_wait;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;--------<sp/>Clock<sp/>offset<sp/>is<sp/>%lld<sp/>ns.&quot;</highlight><highlight class="normal">,<sp/>current_physical_time<sp/>-<sp/><ref refid="tag_8c_1aa69d28e60eef684c98f95a802681c4b9" kindref="member">_lf_last_reported_unadjusted_physical_time_ns</ref>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;--------<sp/>Waiting<sp/>%lld<sp/>ns<sp/>for<sp/>physical<sp/>time<sp/>to<sp/>match<sp/>logical<sp/>time<sp/>%llu.&quot;</highlight><highlight class="normal">,<sp/>ns_to_wait,<sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logical_time_ns<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lf_cond_timedwait<sp/>returns<sp/>0<sp/>if<sp/>it<sp/>is<sp/>awakened<sp/>before<sp/>the<sp/>timeout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hence,<sp/>we<sp/>want<sp/>to<sp/>run<sp/>it<sp/>repeatedly<sp/>until<sp/>either<sp/>it<sp/>returns<sp/>non-zero<sp/>or<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>physical<sp/>time<sp/>matches<sp/>or<sp/>exceeds<sp/>the<sp/>logical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lf_cond_timedwait(condition,<sp/>&amp;mutex,<sp/>unadjusted_wait_until_time_ns)<sp/>!=<sp/>LF_TIMEOUT)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;--------<sp/>wait_until<sp/>interrupted<sp/>before<sp/>timeout.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>did<sp/>not<sp/>time<sp/>out,<sp/>which<sp/>means<sp/>that<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>have<sp/>been<sp/>an<sp/>asynchronous<sp/>call<sp/>to<sp/>schedule().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>waiting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>adjust<sp/>current_tag.time<sp/>here.<sp/>If<sp/>there<sp/>was<sp/>an<sp/>asynchronous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>to<sp/>schedule(),<sp/>it<sp/>will<sp/>have<sp/>put<sp/>an<sp/>event<sp/>on<sp/>the<sp/>event<sp/>queue,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>current_tag.time<sp/>will<sp/>be<sp/>set<sp/>to<sp/>that<sp/>time<sp/>when<sp/>that<sp/>event<sp/>is<sp/>pulled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reached<sp/>timeout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>move<sp/>this<sp/>to<sp/>Mac-specific<sp/>platform<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately,<sp/>at<sp/>least<sp/>on<sp/>Macs,<sp/>pthread_cond_timedwait<sp/>appears</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>implemented<sp/>incorrectly<sp/>and<sp/>it<sp/>returns<sp/>well<sp/>short<sp/>of<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time.<sp/><sp/>Check<sp/>for<sp/>this<sp/>condition<sp/>and<sp/>wait<sp/>again<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1a181bf532390385b9092615f354cccf87" kindref="member">interval_t</ref><sp/>ns_to_wait<sp/>=<sp/>wait_until_time_ns<sp/>-<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>not<sp/>wait<sp/>if<sp/>that<sp/>adjusted<sp/>time<sp/>is<sp/>already<sp/>ahead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>logical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ns_to_wait<sp/>&lt;<sp/>MIN_WAIT_TIME)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;--------<sp/>pthread_cond_timedwait<sp/>claims<sp/>to<sp/>have<sp/>timed<sp/>out,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;but<sp/>it<sp/>did<sp/>not<sp/>reach<sp/>the<sp/>target<sp/>time.<sp/>Waiting<sp/>again.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wait_until(wait_until_time_ns,<sp/>condition);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;--------<sp/>Returned<sp/>from<sp/>wait,<sp/>having<sp/>waited<sp/>%lld<sp/>ns.&quot;</highlight><highlight class="normal">,<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>()<sp/>-<sp/>current_physical_time);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_value;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>get_next_event_tag()<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Peek<sp/>at<sp/>the<sp/>earliest<sp/>event<sp/>in<sp/>the<sp/>event<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structevent__t" kindref="compound">event_t</ref>*<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structevent__t" kindref="compound">event_t</ref>*)<ref refid="pqueue_8h_1a2919d3e817688b81da746d4123f51ba3" kindref="member">pqueue_peek</ref>(event_q);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>next_tag<sp/>=<sp/>FOREVER_TAG;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>an<sp/>event<sp/>in<sp/>the<sp/>event<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;time<sp/>&lt;<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a7389ef15e70a377a52086e6d6b956d70" kindref="member">error_print_and_exit</ref>(</highlight><highlight class="stringliteral">&quot;get_next_event_tag():<sp/>Earliest<sp/>event<sp/>on<sp/>the<sp/>event<sp/>queue<sp/>(%lld)<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;earlier<sp/>than<sp/>the<sp/>current<sp/>time<sp/>(%lld).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event-&gt;time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_tag.time<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;time;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_tag.time<sp/>==<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Earliest<sp/>event<sp/>matches<sp/>current<sp/>time.<sp/>Incrementing<sp/>microstep.<sp/>Event<sp/>is<sp/>dummy:<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event-&gt;is_dummy);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_tag.microstep<sp/>=<sp/><sp/><ref refid="tag_8c_1af413f18a3d52672f4ba984cc92e4efe5" kindref="member">get_microstep</ref>()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_tag.microstep<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>timeout<sp/>tag<sp/>was<sp/>given,<sp/>adjust<sp/>the<sp/>next_tag<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>event<sp/>tag<sp/>to<sp/>that<sp/>timeout<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(next_tag))<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_tag<sp/>=<sp/>stop_tag;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Earliest<sp/>event<sp/>on<sp/>the<sp/>event<sp/>queue<sp/>(or<sp/>stop<sp/>time<sp/>if<sp/>empty)<sp/>is<sp/>(%lld,<sp/>%u).<sp/>Event<sp/>queue<sp/>has<sp/>size<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>next_tag.microstep,<sp/><ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(event_q));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_tag;</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>is<sp/>defined<sp/>in<sp/>federate.c<sp/>and<sp/>used<sp/>in<sp/>the<sp/>following<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/><ref refid="federate_8c_1acd313a38ec1a25c22cc94333146ba8fc" kindref="member">_lf_send_next_event_tag</ref>(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wait_for_reply);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>send_next_event_tag(<ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>tag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wait_for_reply)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="federate_8c_1acd313a38ec1a25c22cc94333146ba8fc" kindref="member">_lf_send_next_event_tag</ref>(tag,<sp/>wait_for_reply);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tag;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__next()<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Previous<sp/>logical<sp/>time<sp/>is<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>next_tag<sp/>=<sp/>get_next_event_tag();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>this<sp/>is<sp/>in<sp/>a<sp/>federation<sp/>with<sp/>centralized<sp/>coordination,<sp/>notify<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>RTI<sp/>of<sp/>the<sp/>next<sp/>earliest<sp/>tag<sp/>at<sp/>which<sp/>this<sp/>federate<sp/>might<sp/>produce<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>event.<sp/>This<sp/>function<sp/>may<sp/>block<sp/>until<sp/>it<sp/>is<sp/>safe<sp/>to<sp/>advance<sp/>the<sp/>current<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag<sp/>to<sp/>the<sp/>next<sp/>tag.<sp/>Specifically,<sp/>it<sp/>blocks<sp/>if<sp/>there<sp/>are<sp/>upstream<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>federates.<sp/>If<sp/>an<sp/>action<sp/>triggers<sp/>during<sp/>that<sp/>wait,<sp/>it<sp/>will<sp/>unblock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>return<sp/>with<sp/>a<sp/>time<sp/>(typically)<sp/>less<sp/>than<sp/>the<sp/>next_time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>grant_tag<sp/>=<sp/>send_next_event_tag(next_tag,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>true<sp/>means<sp/>this<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(grant_tag,<sp/>next_tag)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RTI<sp/>has<sp/>granted<sp/>tag<sp/>advance<sp/>to<sp/>an<sp/>earlier<sp/>tag<sp/>or<sp/>the<sp/>wait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>RTI<sp/>response<sp/>was<sp/>interrupted<sp/>by<sp/>a<sp/>local<sp/>physical<sp/>action<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>tag<sp/>earlier<sp/>than<sp/>requested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>executing.<sp/>The<sp/>event<sp/>queue<sp/>may<sp/>have<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Granted<sp/>tag<sp/>is<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>next<sp/>event<sp/>tag<sp/>that<sp/>we<sp/>sent<sp/>to<sp/>the<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>send_next_event_tag<sp/>releases<sp/>the<sp/>mutex<sp/>lock<sp/>internally,<sp/>we<sp/>need<sp/>to<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>again<sp/>for<sp/>what<sp/>the<sp/>next<sp/>tag<sp/>is<sp/>(e.g.,<sp/>the<sp/>stop<sp/>time<sp/>could<sp/>have<sp/>changed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>next_tag<sp/>=<sp/>get_next_event_tag();</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Do<sp/>starvation<sp/>analysis<sp/>for<sp/>centralized<sp/>coordination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Specifically,<sp/>if<sp/>the<sp/>event<sp/>queue<sp/>is<sp/>empty<sp/>on<sp/>*all*<sp/>federates,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>become<sp/>known<sp/>to<sp/>the<sp/>RTI<sp/>which<sp/>can<sp/>then<sp/>stop<sp/>execution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hence,<sp/>it<sp/>will<sp/>no<sp/>longer<sp/>be<sp/>necessary<sp/>to<sp/>force<sp/>keepalive<sp/>to<sp/>be<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>all<sp/>federated<sp/>execution.<sp/>With<sp/>centralized<sp/>coordination,<sp/>we<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>keepalive<sp/>to<sp/>be<sp/>either<sp/>true<sp/>or<sp/>false<sp/>and<sp/>could<sp/>get<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>behavior<sp/>with<sp/>centralized<sp/>coordination<sp/>as<sp/>with<sp/>unfederated<sp/>execution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pqueue_8h_1a2919d3e817688b81da746d4123f51ba3" kindref="member">pqueue_peek</ref>(event_q)<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>!keepalive_specified)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>event<sp/>on<sp/>the<sp/>event<sp/>queue<sp/>and<sp/>keepalive<sp/>is<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>event<sp/>in<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keepalive<sp/>is<sp/>not<sp/>set<sp/>so<sp/>we<sp/>should<sp/>stop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>federated<sp/>programs<sp/>with<sp/>decentralized<sp/>coordination<sp/>always<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keepalive<sp/>=<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_set_stop_tag((<ref refid="structtag__t" kindref="compound">tag_t</ref>){.time=<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time,.microstep=<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep+1});</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>tag<sp/>has<sp/>changed.<sp/>Need<sp/>to<sp/>check<sp/>next_tag<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_tag<sp/>=<sp/>get_next_event_tag();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>FEDERATED_CENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>physical<sp/>time<sp/>to<sp/>advance<sp/>to<sp/>the<sp/>next<sp/>event<sp/>time<sp/>(or<sp/>stop<sp/>time).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>interrupted<sp/>if<sp/>a<sp/>physical<sp/>action<sp/>triggers<sp/>(e.g.,<sp/>a<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arrives<sp/>from<sp/>an<sp/>upstream<sp/>federate<sp/>or<sp/>a<sp/>local<sp/>physical<sp/>action<sp/>triggers).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>until<sp/>elapsed<sp/>time<sp/>%lld.&quot;</highlight><highlight class="normal">,<sp/>(next_tag.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!wait_until(next_tag.time,<sp/>&amp;event_q_changed))<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;__next():<sp/>Wait<sp/>until<sp/>time<sp/>interrupted.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleep<sp/>was<sp/>interrupted.<sp/><sp/>Check<sp/>for<sp/>a<sp/>new<sp/>next_event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>interruption<sp/>could<sp/>also<sp/>have<sp/>been<sp/>due<sp/>to<sp/>a<sp/>call<sp/>to<sp/>request_stop().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_tag<sp/>=<sp/>get_next_event_tag();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>(possibly<sp/>new)<sp/>next<sp/>tag<sp/>is<sp/>past<sp/>the<sp/>stop<sp/>time,<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(next_tag))<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>wait<sp/>occurs<sp/>even<sp/>if<sp/>wait_until()<sp/>returns<sp/>true,<sp/>which<sp/>means<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag<sp/>on<sp/>the<sp/>head<sp/>of<sp/>the<sp/>event<sp/>queue<sp/>may<sp/>have<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>next_tag<sp/>=<sp/>get_next_event_tag();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>(possibly<sp/>new)<sp/>next<sp/>tag<sp/>is<sp/>past<sp/>the<sp/>stop<sp/>time,<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_is_tag_after_stop_tag(next_tag))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>compare_tags(tag,<sp/>stop_tag)<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Physical<sp/>time<sp/>is<sp/>ahead<sp/>of<sp/>next<sp/>tag<sp/>time<sp/>by<sp/>%lld.<sp/>This<sp/>should<sp/>be<sp/>small<sp/>unless<sp/>-fast<sp/>is<sp/>used.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>()<sp/>-<sp/>next_tag.time);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>federated<sp/>execution<sp/>(at<sp/>least<sp/>under<sp/>decentralized<sp/>coordination),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>possible<sp/>that<sp/>an<sp/>incoming<sp/>message<sp/>has<sp/>been<sp/>partially<sp/>read,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enough<sp/>to<sp/>see<sp/>its<sp/>tag.<sp/>To<sp/>prevent<sp/>it<sp/>from<sp/>becoming<sp/>tardy,<sp/>the<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>reading<sp/>the<sp/>message<sp/>has<sp/>set<sp/>a<sp/>barrier<sp/>to<sp/>prevent<sp/>logical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>exceeding<sp/>the<sp/>timestamp<sp/>of<sp/>the<sp/>message.<sp/>It<sp/>will<sp/>remove<sp/>that<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>the<sp/>complete<sp/>message<sp/>has<sp/>been<sp/>read.<sp/>Here,<sp/>we<sp/>wait<sp/>for<sp/>that<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>removed,<sp/>if<sp/>appropriate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_lf_wait_on_global_tag_barrier(next_tag))<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>wait<sp/>actually<sp/>occurred,<sp/>so<sp/>the<sp/>next_tag<sp/>may<sp/>have<sp/>changed<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_tag<sp/>=<sp/>get_next_event_tag();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>first<sp/>event<sp/>in<sp/>the<sp/>event<sp/>queue<sp/>has<sp/>a<sp/>tag<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>time,<sp/>and<sp/>the<sp/>current_tag<sp/>matches<sp/>the<sp/>stop<sp/>tag<sp/>(meaning<sp/>that<sp/>we<sp/>have<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>executed<sp/>microstep<sp/>0<sp/>at<sp/>the<sp/>timeout<sp/>time),<sp/>then<sp/>we<sp/>are<sp/>done.<sp/>The<sp/>above<sp/>code<sp/>prevents<sp/>the<sp/>next_tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>exceeding<sp/>the<sp/>stop_tag,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>do<sp/>further<sp/>checks<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(next_tag,<sp/>stop_tag)<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>,<sp/>stop_tag)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>pop<sp/>anything<sp/>further<sp/>off<sp/>the<sp/>event<sp/>queue<sp/>with<sp/>this<sp/>same<sp/>time<sp/>or<sp/>larger,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>it<sp/>will<sp/>be<sp/>assigned<sp/>a<sp/>tag<sp/>larger<sp/>than<sp/>the<sp/>stop<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>code<sp/>that<sp/>must<sp/>execute<sp/>before<sp/>starting<sp/>a<sp/>new<sp/>logical<sp/>time<sp/>round,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>such<sp/>as<sp/>initializing<sp/>outputs<sp/>to<sp/>be<sp/>absent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1af8aacf433fcf349ffa1b163962eb3681" kindref="member">__start_time_step</ref>();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point,<sp/>finally,<sp/>we<sp/>have<sp/>an<sp/>event<sp/>to<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>current<sp/>time<sp/>to<sp/>match<sp/>that<sp/>of<sp/>the<sp/>first<sp/>event<sp/>on<sp/>the<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1abadead0c4f54963b062503cf6cb7ace7" kindref="member">_lf_advance_logical_time</ref>(next_tag.time);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>,<sp/>stop_tag)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>shutdown<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Scheduling<sp/>shutdown<sp/>reactions.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a9ea1110b1a18ccf10931bf5f9adaf299" kindref="member">__trigger_shutdown_reactions</ref>();</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>all<sp/>events<sp/>from<sp/>event_q<sp/>with<sp/>timestamp<sp/>equal<sp/>to<sp/>current_tag.time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>all<sp/>the<sp/>reactions<sp/>triggered<sp/>by<sp/>these<sp/>events,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stick<sp/>them<sp/>into<sp/>the<sp/>reaction<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a1825238bcb81ecc6aeeb6dd42d308089" kindref="member">__pop_events</ref>();</highlight></codeline>
<codeline lineno="691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1af629769c213699f0e4c9360811ee7251" kindref="member">request_stop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a60ec02f52c1a7db4c7bdbc2871eae636" kindref="member">_lf_fd_send_stop_request_to_rti</ref>();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>set<sp/>stop_requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>the<sp/>RTI<sp/>might<sp/>grant<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>later<sp/>stop<sp/>tag<sp/>than<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag.<sp/>The<sp/>_lf_fd_send_request_stop_to_rti()<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>raise<sp/>a<sp/>barrier<sp/>at<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>logical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>a<sp/>non-federated<sp/>program,<sp/>the<sp/>stop_tag<sp/>will<sp/>be<sp/>the<sp/>next<sp/>microstep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_set_stop_tag((<ref refid="structtag__t" kindref="compound">tag_t</ref>)<sp/>{.time<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time,<sp/>.microstep<sp/>=<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep+1});</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>any<sp/>thread<sp/>is<sp/>waiting<sp/>on<sp/>a<sp/>condition,<sp/>notify<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;reaction_q_changed);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>signal<sp/>instead<sp/>of<sp/>broadcast<sp/>under<sp/>the<sp/>assumption<sp/>that<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>worker<sp/>thread<sp/>can<sp/>call<sp/>wait_until<sp/>at<sp/>a<sp/>given<sp/>time<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>call<sp/>to<sp/>wait_until<sp/>is<sp/>protected<sp/>by<sp/>a<sp/>mutex<sp/>lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1ab461661c6c9757862959540fe57e3554" kindref="member">_lf_is_blocked_by_executing_reaction</ref>(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>reaction)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reaction<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>executing_q-&gt;<ref refid="structpqueue__t_1a37a81db394494e542cdaec80ce4f2f42" kindref="member">size</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>running<sp/>=<sp/>(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)<sp/>executing_q-&gt;<ref refid="structpqueue__t_1a92b9ee0486259382e9087cd1f05f2792" kindref="member">d</ref>[i];</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<ref refid="reactor_8h_1a6d86a8b9f2059af4b3f9f1862fdb2145" kindref="member">LEVEL</ref>(running-&gt;index)<sp/>&lt;<sp/><ref refid="reactor_8h_1a6d86a8b9f2059af4b3f9f1862fdb2145" kindref="member">LEVEL</ref>(reaction-&gt;index)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="reactor_8h_1a05ad7b5ea629e5f900ed750be8b1a357" kindref="member">OVERLAPPING</ref>(reaction-&gt;chain_id,<sp/>running-&gt;chain_id))<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>check<sp/>the<sp/>transfer_q,<sp/>which<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reactions<sp/>popped<sp/>from<sp/>the<sp/>reaction_q<sp/>that<sp/>have<sp/>previously<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determined<sp/>to<sp/>be<sp/>blocked<sp/>by<sp/>executing<sp/>reactions.<sp/>The<sp/>reason<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>check<sp/>the<sp/>transfer_q<sp/>is<sp/>that<sp/>if<sp/>there<sp/>is<sp/>a<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>that<sp/>queue<sp/>blocking<sp/>this<sp/>one,<sp/>then<sp/>there<sp/>must<sp/>also<sp/>be<sp/>a<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>executing<sp/>queue<sp/>blocking<sp/>this<sp/>one.<sp/>Blocking<sp/>is<sp/>transitive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;Not<sp/>blocking<sp/>for<sp/>reaction<sp/>with<sp/>chainID<sp/>%llu<sp/>and<sp/>level<sp/>%llu\n&quot;,<sp/>reaction-&gt;chain_id,<sp/>reaction-&gt;index);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pqueue_dump(executing_q,<sp/>stdout,<sp/>executing_q-&gt;prt);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>first_ready_reaction()<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>r;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>b;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>reaction<sp/>that<sp/>is<sp/>ready<sp/>to<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((r<sp/>=<sp/>(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)<ref refid="pqueue_8h_1abec9363c7a9cc89190bf0925a4a1652c" kindref="member">pqueue_pop</ref>(reaction_q))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="reactor_8h_1ab461661c6c9757862959540fe57e3554" kindref="member">_lf_is_blocked_by_executing_reaction</ref>(r))<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>blocked<sp/>reaction<sp/>onto<sp/>another<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>could<sp/>also<sp/>just<sp/>be<sp/>be<sp/>a<sp/>FIFO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(transfer_q,<sp/>r);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>blocked<sp/>reactions<sp/>back<sp/>onto<sp/>the<sp/>reaction<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>swap<sp/>the<sp/>two<sp/>queues<sp/>if<sp/>the<sp/>transfer_q<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gotten<sp/>larger<sp/>than<sp/>the<sp/>reaction_q.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(reaction_q)<sp/>&gt;=<sp/><ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(transfer_q))<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((b<sp/>=<sp/>(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)<ref refid="pqueue_8h_1abec9363c7a9cc89190bf0925a4a1652c" kindref="member">pqueue_pop</ref>(transfer_q))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(reaction_q,<sp/>b);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpqueue__t" kindref="compound">pqueue_t</ref>*<sp/>tmp;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((b<sp/>=<sp/>(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)<ref refid="pqueue_8h_1abec9363c7a9cc89190bf0925a4a1652c" kindref="member">pqueue_pop</ref>(reaction_q))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(transfer_q,<sp/>b);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>reaction_q;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction_q<sp/>=<sp/>transfer_q;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transfer_q<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__advancing_time<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_enqueue_reaction(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>reaction)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acquire<sp/>the<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>enqueue<sp/>this<sp/>reaction<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reaction<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/><ref refid="pqueue_8h_1a1107ed07c3b78c119042d0c478d57551" kindref="member">pqueue_find_equal_same_priority</ref>(reaction_q,<sp/>reaction)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Enqueing<sp/>downstream<sp/>reaction<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>reaction-&gt;name);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(reaction_q,<sp/>reaction);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>We<sp/>could<sp/>notify<sp/>another<sp/>thread<sp/>so<sp/>it<sp/>can<sp/>execute<sp/>this<sp/>reaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>this<sp/>notification<sp/>is<sp/>expensive!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>now<sp/>handled<sp/>by<sp/>schedule_output_reactions()<sp/>in<sp/>reactor_common,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>calls<sp/>the<sp/>_lf_notify_workers()<sp/>function<sp/>defined<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lf_cond_signal(&amp;reaction_q_changed);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_notify_workers_locked()<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number_of_idle_threads<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>next_ready_reaction<sp/>=<sp/>(<ref refid="structreaction__t" kindref="compound">reaction_t</ref>*)<ref refid="pqueue_8h_1a2919d3e817688b81da746d4123f51ba3" kindref="member">pqueue_peek</ref>(reaction_q);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_ready_reaction<sp/>!=<sp/>NULL</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!<ref refid="reactor_8h_1ab461661c6c9757862959540fe57e3554" kindref="member">_lf_is_blocked_by_executing_reaction</ref>(next_ready_reaction)</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>In<sp/>applications<sp/>without<sp/>parallelism,<sp/>this<sp/>notification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>proves<sp/>very<sp/>expensive.<sp/>Perhaps<sp/>we<sp/>should<sp/>be<sp/>checking<sp/>execution<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;reaction_q_changed);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Notify<sp/>another<sp/>worker<sp/>of<sp/>a<sp/>reaction<sp/>on<sp/>the<sp/>reaction<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1aa46a83ed702e2c83d42625a8c78a9f50" kindref="member">_lf_notify_workers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_notify_workers_locked();</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lf_initialize_start_tag()<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>reactions<sp/>invoked<sp/>at<sp/>tag<sp/>(0,0)<sp/>(including<sp/>startup<sp/>reactions)<sp/>to<sp/>the<sp/>reaction<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a1d807ba211ee2edb588750d4553090c1" kindref="member">__trigger_startup_reactions</ref>();<sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>status<sp/>fields<sp/>before<sp/>talking<sp/>to<sp/>the<sp/>RTI<sp/>to<sp/>set<sp/>network<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>statuses<sp/>to<sp/>unknown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1af89b0ab26ec13c6deafeb05c3c14a88e" kindref="member">reset_status_fields_on_input_port_triggers</ref>();</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>start_time<sp/>from<sp/>the<sp/>RTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1ad83fe9661682934029a42954b8fe6e2f" kindref="member">synchronize_with_other_federates</ref>();<sp/></highlight><highlight class="comment">//<sp/>Resets<sp/>start_time<sp/>in<sp/>federated<sp/>execution<sp/>according<sp/>to<sp/>the<sp/>RTI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref><sp/>=<sp/>(<ref refid="structtag__t" kindref="compound">tag_t</ref>){.time<sp/>=<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>.microstep<sp/>=<sp/>0u};</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1ae3c5c84c6f22c1bdf98af8b1a55a9f4b" kindref="member">__initialize_timers</ref>();</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>stop_tag<sp/>is<sp/>(0,0),<sp/>also<sp/>insert<sp/>the<sp/>shutdown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reactions.<sp/>This<sp/>can<sp/>only<sp/>happen<sp/>if<sp/>the<sp/>timeout<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>set<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>,<sp/>stop_tag)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a9ea1110b1a18ccf10931bf5f9adaf299" kindref="member">__trigger_shutdown_reactions</ref>();</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>network<sp/>dependent<sp/>reactions<sp/>for<sp/>network<sp/>input<sp/>ports<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>reaction<sp/>queue<sp/>to<sp/>prevent<sp/>reactions<sp/>from<sp/>executing<sp/>at<sp/>(0,0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incorrectly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>(0,0),<sp/>events<sp/>are<sp/>not<sp/>currently<sp/>handled<sp/>through<sp/>the<sp/>event_q.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead,<sp/>any<sp/>reaction<sp/>triggered<sp/>by<sp/>an<sp/>event<sp/>at<sp/>(0,0)<sp/>(e.g.,<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>startup<sp/>event)<sp/>is<sp/>directly<sp/>inserted<sp/>into<sp/>the<sp/>reaction_q.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>the<sp/>other<sp/>hand,<sp/>the<sp/>typical<sp/>NET/TAG<sp/>procedure<sp/>of<sp/>the<sp/>centralized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coordination<sp/>uses<sp/>events<sp/>coming<sp/>off<sp/>of<sp/>the<sp/>event<sp/>queue.<sp/>With<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>implementation,<sp/>therefore,<sp/>federates<sp/>will<sp/>send<sp/>a<sp/>NET(0,0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>if<sp/>they<sp/>have<sp/>timers<sp/>and<sp/>startup<sp/>events.<sp/>If<sp/>a<sp/>federate<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>event<sp/>at<sp/>(0,0),<sp/>and<sp/>later<sp/>receives<sp/>a<sp/>message<sp/>with<sp/>intended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag<sp/>of<sp/>(0,0),<sp/>it<sp/>will<sp/>not<sp/>send<sp/>a<sp/>NET.<sp/>For<sp/>now,<sp/>the<sp/>best<sp/>remedy<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>seems<sp/>to<sp/>be<sp/>to<sp/>insert<sp/>control<sp/>reactions<sp/>for<sp/>all<sp/>federates<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(0,0),<sp/>which<sp/>causes<sp/>all<sp/>federates,<sp/>even<sp/>those<sp/>without<sp/>any<sp/>startup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>timer<sp/>events<sp/>at<sp/>(0,0)<sp/>to<sp/>wait<sp/>on<sp/>all<sp/>of<sp/>their<sp/>input<sp/>ports<sp/>and<sp/>send</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>absent<sp/>message<sp/>on<sp/>all<sp/>of<sp/>their<sp/>output<sp/>ports.<sp/>This<sp/>inadvertantly<sp/>causes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extra<sp/>messages<sp/>going<sp/>back<sp/>and<sp/>forth<sp/>for<sp/>(0,0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a351f84aa3eb871fe8f51e3a6f18e67f6" kindref="member">enqueue_network_input_control_reactions</ref>(reaction_q);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="federate_8c_1a58c068ed5637620f62d0be0da850bbc3" kindref="member">enqueue_network_output_control_reactions</ref>(reaction_q);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>wait_until<sp/>if<sp/>federated.<sp/>This<sp/>is<sp/>required<sp/>because<sp/>the<sp/>startup<sp/>procedure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>synchronize_with_other_federates()<sp/>can<sp/>decide<sp/>on<sp/>a<sp/>new<sp/>start_time<sp/>that<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>larger<sp/>than<sp/>the<sp/>current<sp/>physical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore,<sp/>if<sp/>--fast<sp/>was<sp/>not<sp/>specified,<sp/>wait<sp/>until<sp/>physical<sp/>time<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>exceeds<sp/>the<sp/>start<sp/>time.<sp/>Microstep<sp/>is<sp/>ignored.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>wait_until()<sp/>is<sp/>deliberately<sp/>called<sp/>after<sp/>most<sp/>precursor<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>tag<sp/>(0,0)<sp/>are<sp/>performed<sp/>(e.g.,<sp/>injecting<sp/>startup<sp/>reactions,<sp/>etc.).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>has<sp/>two<sp/>benefits:<sp/>First,<sp/>the<sp/>startup<sp/>overheads<sp/>will<sp/>reduce<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>required<sp/>waiting<sp/>time.<sp/>Second,<sp/>this<sp/>call<sp/>releases<sp/>the<sp/>mutex<sp/>lock<sp/>and<sp/>allows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>threads<sp/>(specifically,<sp/>federate<sp/>threads<sp/>that<sp/>handle<sp/>incoming<sp/>p2p<sp/>messages<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>other<sp/>federates)<sp/>to<sp/>hold<sp/>the<sp/>lock<sp/>and<sp/>possibly<sp/>raise<sp/>a<sp/>tag<sp/>barrier.<sp/>This<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>especially<sp/>useful<sp/>if<sp/>an<sp/>STP<sp/>offset<sp/>is<sp/>set<sp/>properly<sp/>because<sp/>the<sp/>federate<sp/>will<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>chance<sp/>to<sp/>process<sp/>incoming<sp/>messages<sp/>while<sp/>utilizing<sp/>the<sp/>STP<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>start<sp/>time<sp/>%lld<sp/>plus<sp/>STP<sp/>offset<sp/>%lld.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/><ref refid="reactor_8h_1a39f588e1df453139dbb9a4157dda2027" kindref="member">_lf_global_time_STP_offset</ref>);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>interrupts<sp/>to<sp/>this<sp/>wait.<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>start<sp/>executing<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physical<sp/>time<sp/>matches<sp/>or<sp/>exceeds<sp/>the<sp/>logical<sp/>start<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!wait_until(<ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,<sp/>&amp;event_q_changed))<sp/>{}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Done<sp/>waiting<sp/>for<sp/>start<sp/>time<sp/>%lld.&quot;</highlight><highlight class="normal">,<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Physical<sp/>time<sp/>is<sp/>ahead<sp/>of<sp/>current<sp/>time<sp/>by<sp/>%lld.<sp/>This<sp/>should<sp/>be<sp/>small.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>()<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reinitialize<sp/>the<sp/>physical<sp/>start<sp/>time<sp/>to<sp/>match<sp/>the<sp/>start_time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>reports<sp/>of<sp/>get_elapsed_physical_time<sp/>are<sp/>not<sp/>very<sp/>meaningful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>w.r.t.<sp/>logical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tag_8c_1afc91fb8110046fe2a5b10993c6618688" kindref="member">physical_start_time</ref><sp/>=<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>federated<sp/>execution<sp/>(at<sp/>least<sp/>under<sp/>decentralized<sp/>coordination),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>possible<sp/>that<sp/>an<sp/>incoming<sp/>message<sp/>has<sp/>been<sp/>partially<sp/>read<sp/>at<sp/>(0,0),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enough<sp/>to<sp/>see<sp/>its<sp/>tag.<sp/>To<sp/>prevent<sp/>it<sp/>from<sp/>becoming<sp/>tardy,<sp/>the<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>reading<sp/>the<sp/>message<sp/>has<sp/>set<sp/>a<sp/>barrier<sp/>to<sp/>prevent<sp/>logical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>exceeding<sp/>the<sp/>timestamp<sp/>of<sp/>the<sp/>message.<sp/>It<sp/>will<sp/>remove<sp/>that<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>the<sp/>complete<sp/>message<sp/>has<sp/>been<sp/>read.<sp/>Here,<sp/>we<sp/>wait<sp/>for<sp/>that<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>removed,<sp/>if<sp/>appropriate<sp/>before<sp/>proceeding<sp/>to<sp/>executing<sp/>tag<sp/>(0,0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_wait_on_global_tag_barrier((<ref refid="structtag__t" kindref="compound">tag_t</ref>){.time=<ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,.microstep=0});</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>FEDERATED_DECENTRALIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>following<sp/>boolean<sp/>so<sp/>that<sp/>other<sp/>thread(s),<sp/>including<sp/>federated<sp/>threads,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>know<sp/>that<sp/>the<sp/>execution<sp/>has<sp/>started</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>_lf_execution_started<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>worker_thread_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indicator<sp/>that<sp/>execution<sp/>at<sp/>at<sp/>least<sp/>one<sp/>tag<sp/>has<sp/>completed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_lf_logical_tag_completed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>worker(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>track<sp/>of<sp/>whether<sp/>we<sp/>have<sp/>decremented<sp/>the<sp/>idle<sp/>thread<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>have_been_busy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>worker_number<sp/>=<sp/>++worker_thread_count;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>thread<sp/>%d<sp/>started.&quot;</highlight><highlight class="normal">,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>until<sp/>the<sp/>stop_tag<sp/>is<sp/>reached<sp/>or<sp/>reaction<sp/>queue<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Obtain<sp/>a<sp/>reaction<sp/>from<sp/>the<sp/>reaction_q<sp/>that<sp/>is<sp/>ready<sp/>to<sp/>execute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(i.e.,<sp/>it<sp/>is<sp/>not<sp/>blocked<sp/>by<sp/>concurrently<sp/>executing<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>it<sp/>depends<sp/>on).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print_snapshot();<sp/>//<sp/>This<sp/>is<sp/>quite<sp/>verbose<sp/>(but<sp/>very<sp/>useful<sp/>in<sp/>debugging<sp/>reaction<sp/>deadlocks).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreaction__t" kindref="compound">reaction_t</ref>*<sp/>current_reaction_to_execute<sp/>=<sp/>first_ready_reaction();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_reaction_to_execute<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>no<sp/>reactions<sp/>ready<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>were<sp/>previously<sp/>busy,<sp/>count<sp/>this<sp/>thread<sp/>as<sp/>idle<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(have_been_busy)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_idle_threads++;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have_been_busy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>no<sp/>reactions<sp/>in<sp/>progress<sp/>and<sp/>no<sp/>reactions<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>reaction<sp/>queue,<sp/>then<sp/>advance<sp/>time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unless<sp/>some<sp/>other<sp/>worker<sp/>thread<sp/>is<sp/>already<sp/>advancing<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(reaction_q)<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(executing_q)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>more<sp/>happening<sp/>at<sp/>this<sp/>logical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__advancing_time)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>thread<sp/>will<sp/>take<sp/>charge<sp/>of<sp/>advancing<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>other<sp/>worker<sp/>threads<sp/>from<sp/>doing<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__advancing_time<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>not<sp/>the<sp/>very<sp/>first<sp/>step,<sp/>notify<sp/>that<sp/>the<sp/>previous<sp/>step<sp/>is<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>check<sp/>against<sp/>the<sp/>stop<sp/>tag<sp/>to<sp/>see<sp/>whether<sp/>this<sp/>is<sp/>the<sp/>last<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_lf_logical_tag_completed)<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logical_tag_complete(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>at<sp/>the<sp/>stop<sp/>tag,<sp/>do<sp/>not<sp/>call<sp/>__next()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>prevent<sp/>advancing<sp/>the<sp/>logical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>,<sp/>stop_tag)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Break<sp/>out<sp/>of<sp/>the<sp/>while<sp/>loop<sp/>and<sp/>notify<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>worker<sp/>threads<sp/>potentially<sp/>waiting<sp/>to<sp/>continue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>notify<sp/>the<sp/>RTI<sp/>that<sp/>there<sp/>will<sp/>be<sp/>no<sp/>more<sp/>events<sp/>(if<sp/>centralized<sp/>coord).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>False<sp/>argument<sp/>means<sp/>don&apos;t<sp/>wait<sp/>for<sp/>a<sp/>reply.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_next_event_tag(FOREVER_TAG,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_broadcast(&amp;reaction_q_changed);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_logical_tag_completed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>__next()<sp/>may<sp/>block<sp/>waiting<sp/>for<sp/>real<sp/>time<sp/>to<sp/>pass<sp/>or<sp/>events<sp/>to<sp/>appear.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>appear<sp/>on<sp/>the<sp/>event<sp/>queue.<sp/>Note<sp/>that<sp/>we<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hold<sp/>the<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1acaec136e0b3327ef233f13e89666b87c" kindref="member">tracepoint_worker_advancing_time_starts</ref>(worker_number);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__next();</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1aad8dcf334448b94525bb7fa4d57c64a2" kindref="member">tracepoint_worker_advancing_time_ends</ref>(worker_number);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__advancing_time<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Done<sp/>waiting<sp/>for<sp/>__next().&quot;</highlight><highlight class="normal">,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tag_8c_1a6f9d6db9250698b048f5f118b0308e47" kindref="member">compare_tags</ref>(<ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>,<sp/>stop_tag)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>the<sp/>stop<sp/>tag<sp/>so<sp/>we<sp/>can<sp/>exit<sp/>this<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>other<sp/>worker<sp/>thread<sp/>is<sp/>advancing<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>wait<sp/>for<sp/>work<sp/>on<sp/>the<sp/>reaction<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Waiting<sp/>for<sp/>items<sp/>on<sp/>the<sp/>reaction<sp/>queue.&quot;</highlight><highlight class="normal">,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1aa6b088266f62c6f156ae241d52cdf415" kindref="member">tracepoint_worker_wait_starts</ref>(worker_number);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_wait(&amp;reaction_q_changed,<sp/>&amp;mutex);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1a04892321c2313cbd11dd85bee1a9d251" kindref="member">tracepoint_worker_wait_ends</ref>(worker_number);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Done<sp/>waiting.&quot;</highlight><highlight class="normal">,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Logical<sp/>time<sp/>is<sp/>not<sp/>complete,<sp/>and<sp/>nothing<sp/>on<sp/>the<sp/>reaction<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>ready<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>something<sp/>to<sp/>change<sp/>(either<sp/>a<sp/>stop<sp/>request<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something<sp/>went<sp/>on<sp/>the<sp/>reaction<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Waiting<sp/>for<sp/>items<sp/>on<sp/>the<sp/>reaction<sp/>queue.&quot;</highlight><highlight class="normal">,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1aa6b088266f62c6f156ae241d52cdf415" kindref="member">tracepoint_worker_wait_starts</ref>(worker_number);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Could<sp/>use<sp/>a<sp/>timedwait<sp/>here<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>worker<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wakes<sp/>up<sp/>periodically.<sp/>But<sp/>this<sp/>appears<sp/>to<sp/>be<sp/>unnecessary.<sp/>When<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>ready<sp/>reaction<sp/>on<sp/>the<sp/>reaction<sp/>queue,<sp/>there<sp/>will<sp/>be<sp/>a<sp/>notification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>notification<sp/>occurs<sp/>while<sp/>holding<sp/>the<sp/>mutex<sp/>lock<sp/>so<sp/>it<sp/>should<sp/>not<sp/>be<sp/>missed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nevertheless,<sp/>we<sp/>keep<sp/>the<sp/>commented<sp/>out<sp/>code<sp/>for<sp/>a<sp/>timedwait<sp/>in<sp/>case<sp/>we<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>to<sp/>put<sp/>this<sp/>back<sp/>in:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>struct<sp/>timespec<sp/>physical_time;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lf_clock_gettime(CLOCK_REALTIME,<sp/>&amp;physical_time);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physical_time.tv_nsec<sp/>+=<sp/>MAX_STALL_INTERVAL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lf_cond_wait(&amp;reaction_q_changed,<sp/>&amp;mutex,<sp/>&amp;physical_time);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_cond_wait(&amp;reaction_q_changed,<sp/>&amp;mutex);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1a04892321c2313cbd11dd85bee1a9d251" kindref="member">tracepoint_worker_wait_ends</ref>(worker_number);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Done<sp/>waiting.&quot;</highlight><highlight class="normal">,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Got<sp/>a<sp/>reaction<sp/>that<sp/>is<sp/>ready<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Popped<sp/>from<sp/>reaction_q<sp/>%s:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>control<sp/>reaction:<sp/>%d,<sp/>chain<sp/>ID:<sp/>%llu,<sp/>and<sp/>deadline<sp/>%lld.&quot;</highlight><highlight class="normal">,<sp/>worker_number,</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_reaction_to_execute-&gt;name,</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_reaction_to_execute-&gt;is_a_control_reaction,</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_reaction_to_execute-&gt;chain_id,</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_reaction_to_execute-&gt;deadline);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>thread<sp/>will<sp/>no<sp/>longer<sp/>be<sp/>idle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!have_been_busy)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_idle_threads--;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have_been_busy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>the<sp/>reaction<sp/>on<sp/>the<sp/>executing<sp/>queue<sp/>in<sp/>order<sp/>to<sp/>prevent<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reactions<sp/>that<sp/>may<sp/>depend<sp/>on<sp/>it<sp/>from<sp/>executing<sp/>before<sp/>this<sp/>reaction<sp/>is<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1addd8cdfbc8c47b8cdd7eb4c4560de7aa" kindref="member">pqueue_insert</ref>(executing_q,<sp/>current_reaction_to_execute);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>additional<sp/>reactions<sp/>on<sp/>the<sp/>reaction_q,<sp/>notify<sp/>one<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>idle<sp/>thread,<sp/>if<sp/>there<sp/>is<sp/>one,<sp/>so<sp/>that<sp/>it<sp/>can<sp/>attempt<sp/>to<sp/>execute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>reaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_notify_workers_locked();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlock<sp/>the<sp/>mutex<sp/>to<sp/>run<sp/>the<sp/>reaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>violation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reaction<sp/>violates<sp/>the<sp/>STP<sp/>offset,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>input<sp/>trigger<sp/>to<sp/>this<sp/>reaction<sp/>has<sp/>been<sp/>triggered<sp/>at<sp/>a<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>logical<sp/>time<sp/>than<sp/>originally<sp/>anticipated.<sp/>In<sp/>this<sp/>case,<sp/>a<sp/>special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STP<sp/>handler<sp/>will<sp/>be<sp/>invoked.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Note<sp/>that<sp/>the<sp/>STP<sp/>handler<sp/>will<sp/>be<sp/>invoked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>most<sp/>once<sp/>per<sp/>logical<sp/>time<sp/>value.<sp/>If<sp/>the<sp/>STP<sp/>handler<sp/>triggers<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>reaction<sp/>at<sp/>the<sp/>current<sp/>time<sp/>value,<sp/>even<sp/>if<sp/>at<sp/>a<sp/>future<sp/>superdense<sp/>time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>reaction<sp/>will<sp/>be<sp/>invoked<sp/>and<sp/>the<sp/>STP<sp/>handler<sp/>will<sp/>not<sp/>be<sp/>invoked<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>inputs<sp/>ports<sp/>to<sp/>a<sp/>federate<sp/>reactor<sp/>are<sp/>network<sp/>port<sp/>types<sp/>so<sp/>this<sp/>possibly<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>disallowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@note<sp/>The<sp/>STP<sp/>handler<sp/>and<sp/>the<sp/>deadline<sp/>handler<sp/>are<sp/>not<sp/>mutually<sp/>exclusive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>In<sp/>other<sp/>words,<sp/>both<sp/>can<sp/>be<sp/>invoked<sp/>for<sp/>a<sp/>reaction<sp/>if<sp/>it<sp/>is<sp/>triggered<sp/>late</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>in<sp/>logical<sp/>time<sp/>(STP<sp/>offset<sp/>is<sp/>violated)<sp/>and<sp/>also<sp/>misses<sp/>the<sp/>constraint<sp/>on<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>physical<sp/>time<sp/>(deadline).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@note<sp/>In<sp/>absence<sp/>of<sp/>an<sp/>STP<sp/>handler,<sp/>the<sp/>is_STP_violated<sp/>will<sp/>be<sp/>passed<sp/>down<sp/>the<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>chain<sp/>until<sp/>it<sp/>is<sp/>dealt<sp/>with<sp/>in<sp/>a<sp/>downstream<sp/>STP<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_reaction_to_execute-&gt;is_STP_violated<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a149e5fee1c1841bcc96c72f200601d90" kindref="member">reaction_function_t</ref><sp/>handler<sp/>=<sp/>current_reaction_to_execute-&gt;STP_handler;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;STP<sp/>violation<sp/>detected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>STP<sp/>handler<sp/>if<sp/>there<sp/>is<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Invoking<sp/>tardiness<sp/>handler.&quot;</highlight><highlight class="normal">,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>violation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>violation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*handler)(current_reaction_to_execute-&gt;self);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reaction<sp/>produced<sp/>outputs,<sp/>put<sp/>the<sp/>resulting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triggered<sp/>reactions<sp/>into<sp/>the<sp/>queue<sp/>or<sp/>execute<sp/>them<sp/>directly<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schedule_output_reactions(current_reaction_to_execute,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>is_STP_violated<sp/>because<sp/>it<sp/>has<sp/>been<sp/>dealt<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_reaction_to_execute-&gt;is_STP_violated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reaction<sp/>has<sp/>a<sp/>deadline,<sp/>compare<sp/>to<sp/>current<sp/>physical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>invoke<sp/>the<sp/>deadline<sp/>violation<sp/>reaction<sp/>instead<sp/>of<sp/>the<sp/>reaction<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>violation<sp/>has<sp/>occurred.<sp/>Note<sp/>that<sp/>the<sp/>violation<sp/>reaction<sp/>will<sp/>be<sp/>invoked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>most<sp/>once<sp/>per<sp/>logical<sp/>time<sp/>value.<sp/>If<sp/>the<sp/>violation<sp/>reaction<sp/>triggers<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>reaction<sp/>at<sp/>the<sp/>current<sp/>time<sp/>value,<sp/>even<sp/>if<sp/>at<sp/>a<sp/>future<sp/>superdense<sp/>time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>reaction<sp/>will<sp/>be<sp/>invoked<sp/>and<sp/>the<sp/>violation<sp/>reaction<sp/>will<sp/>not<sp/>be<sp/>invoked<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_reaction_to_execute-&gt;deadline<sp/>&gt;<sp/>0LL)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>current<sp/>physical<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8h_1ad740f3189d2a477285138e682eafa8c5" kindref="member">instant_t</ref><sp/>physical_time<sp/>=<sp/><ref refid="tag_8c_1a84d52b3843db3b4fcb932326d6b288c4" kindref="member">get_physical_time</ref>();</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>deadline<sp/>violation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(physical_time<sp/>&gt;<sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>+<sp/>current_reaction_to_execute-&gt;deadline)<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deadline<sp/>violation<sp/>has<sp/>occurred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>violation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>local<sp/>handler,<sp/>if<sp/>there<sp/>is<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1a149e5fee1c1841bcc96c72f200601d90" kindref="member">reaction_function_t</ref><sp/>handler<sp/>=<sp/>current_reaction_to_execute-&gt;deadline_violation_handler;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Deadline<sp/>violation.<sp/>Invoking<sp/>deadline<sp/>handler.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker_number);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*handler)(current_reaction_to_execute-&gt;self);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reaction<sp/>produced<sp/>outputs,<sp/>put<sp/>the<sp/>resulting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triggered<sp/>reactions<sp/>into<sp/>the<sp/>queue<sp/>or<sp/>execute<sp/>them<sp/>directly<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schedule_output_reactions(current_reaction_to_execute,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>reaction<sp/>from<sp/>the<sp/>executing<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(violation)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>acquire<sp/>the<sp/>mutex<sp/>lock<sp/>to<sp/>remove<sp/>this<sp/>from<sp/>the<sp/>executing<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>to<sp/>obtain<sp/>the<sp/>next<sp/>reaction<sp/>to<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>reaction<sp/>is<sp/>not<sp/>going<sp/>to<sp/>be<sp/>executed.<sp/>However,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>thread<sp/>holds<sp/>the<sp/>mutex<sp/>lock,<sp/>so<sp/>if<sp/>this<sp/>is<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reaction<sp/>of<sp/>the<sp/>current<sp/>time<sp/>step,<sp/>this<sp/>thread<sp/>will<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>the<sp/>one<sp/>to<sp/>advance<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1a921be3b49e4021888c595188438fdf7a" kindref="member">pqueue_remove</ref>(executing_q,<sp/>current_reaction_to_execute);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>reaction<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Invoking<sp/>reaction<sp/>%s<sp/>at<sp/>elapsed<sp/>tag<sp/>(%lld,<sp/>%d).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker_number,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_reaction_to_execute-&gt;name,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.time<sp/>-<sp/><ref refid="tag_8c_1a20b56e8fb05c017508f1c4fa2e311a87" kindref="member">start_time</ref>,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tag_8c_1a1545de0581eee4dfe26fb54ee1039ffe" kindref="member">current_tag</ref>.microstep);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1ade61b59eed2f970f376f319ffaf2541d" kindref="member">tracepoint_reaction_starts</ref>(current_reaction_to_execute,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_reaction_to_execute-&gt;function(current_reaction_to_execute-&gt;self);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="trace_8c_1ad9628a6d76f5bad7a0c093f00731364b" kindref="member">tracepoint_reaction_ends</ref>(current_reaction_to_execute,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reaction<sp/>produced<sp/>outputs,<sp/>put<sp/>the<sp/>resulting<sp/>triggered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reactions<sp/>into<sp/>the<sp/>queue<sp/>or<sp/>execute<sp/>them<sp/>immediately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schedule_output_reactions(current_reaction_to_execute,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reacquire<sp/>the<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>reaction<sp/>from<sp/>the<sp/>executing<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>thread<sp/>holds<sp/>the<sp/>mutex<sp/>lock,<sp/>so<sp/>if<sp/>this<sp/>is<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reaction<sp/>of<sp/>the<sp/>current<sp/>time<sp/>step,<sp/>this<sp/>thread<sp/>will<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>the<sp/>one<sp/>to<sp/>advance<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1a921be3b49e4021888c595188438fdf7a" kindref="member">pqueue_remove</ref>(executing_q,<sp/>current_reaction_to_execute);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>is_STP_violated<sp/>because<sp/>it<sp/>has<sp/>been<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>down<sp/>the<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_reaction_to_execute-&gt;is_STP_violated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Done<sp/>with<sp/>reaction<sp/>%s.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker_number,<sp/>current_reaction_to_execute-&gt;name);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>while<sp/>(!stop_requested<sp/>||<sp/>pqueue_size(reaction_q)<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>thread<sp/>is<sp/>exiting,<sp/>so<sp/>don&apos;t<sp/>count<sp/>it<sp/>anymore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref>--;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Worker<sp/>%d:<sp/>Stop<sp/>requested.<sp/>Exiting.&quot;</highlight><highlight class="normal">,<sp/>worker_number);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_signal(&amp;executing_q_emptied);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timeout<sp/>has<sp/>been<sp/>requested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="reactor_8h_1ad96dc6cbe1d3365e52aad6aecbf036d8" kindref="member">print_snapshot</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="util_8h_1a0b87e0d3bf5853bcbb0b66a7c48fdc05" kindref="member">LOG_LEVEL</ref><sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;&gt;&gt;&gt;<sp/>START<sp/>Snapshot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Pending:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1add0fae8523cca210f1574586e82cf7dd" kindref="member">pqueue_dump</ref>(reaction_q,<sp/>print_reaction);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Executing:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1add0fae8523cca210f1574586e82cf7dd" kindref="member">pqueue_dump</ref>(executing_q,<sp/>print_reaction);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>size:<sp/>%d.<sp/>Contents:&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1ae0cf88c8360a5f08ada81feaaeb40505" kindref="member">pqueue_size</ref>(event_q));</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pqueue_8h_1add0fae8523cca210f1574586e82cf7dd" kindref="member">pqueue_dump</ref>(event_q,<sp/>print_reaction);<sp/></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;&gt;&gt;&gt;<sp/>END<sp/>Snapshot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>thread<sp/>IDs<sp/>(to<sp/>be<sp/>dynamically<sp/>allocated).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal">lf_thread_t*<sp/>__thread_ids;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Start<sp/>threads<sp/>in<sp/>the<sp/>thread<sp/>pool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start_threads()<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Starting<sp/>%d<sp/>worker<sp/>threads.&quot;</highlight><highlight class="normal">,<sp/><ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref>);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>__thread_ids<sp/>=<sp/>(lf_thread_t*)malloc(<ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lf_thread_t));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>number_of_idle_threads<sp/>=<sp/><ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref>;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_thread_create(&amp;__thread_ids[i],<sp/>worker,<sp/>NULL);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>function<sp/>that<sp/>optionally<sp/>provides<sp/>default<sp/>command-line<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="reactor_8h_1aedbba6d4986cc6d46b07d53d3752270f" kindref="member">__set_default_command_line_options</ref>();</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>one<sp/>and<sp/>only<sp/>mutex<sp/>to<sp/>be<sp/>recursive,<sp/>meaning<sp/>that<sp/>it<sp/>is<sp/>OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>same<sp/>thread<sp/>to<sp/>lock<sp/>and<sp/>unlock<sp/>the<sp/>mutex<sp/>even<sp/>if<sp/>it<sp/>already<sp/>holds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>This<sp/>is<sp/>dangerous.<sp/>The<sp/>docs<sp/>say<sp/>this:<sp/>&quot;It<sp/>is<sp/>advised<sp/>that<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>application<sp/>should<sp/>not<sp/>use<sp/>a<sp/>PTHREAD_MUTEX_RECURSIVE<sp/>mutex<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>condition<sp/>variables<sp/>because<sp/>the<sp/>implicit<sp/>unlock<sp/>performed<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pthread_cond_wait()<sp/>or<sp/>pthread_cond_timedwait()<sp/>may<sp/>not<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>release<sp/>the<sp/>mutex<sp/>(if<sp/>it<sp/>had<sp/>been<sp/>locked<sp/>multiple<sp/>times).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>happens,<sp/>no<sp/>other<sp/>thread<sp/>can<sp/>satisfy<sp/>the<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>predicate.”<sp/><sp/>This<sp/>seems<sp/>like<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>implementation<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pthreads.<sp/>Maybe<sp/>it<sp/>has<sp/>been<sp/>fixed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>one<sp/>and<sp/>only<sp/>mutex<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_mutex_init(&amp;mutex);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>condition<sp/>variables<sp/>used<sp/>for<sp/>notification<sp/>between<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_init(&amp;event_q_changed);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_init(&amp;reaction_q_changed);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_init(&amp;executing_q_emptied);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>lf_cond_init(&amp;global_tag_barrier_requestors_reached_zero);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(atexit(termination)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a31c6c0670e0e0d97586def29f10bf7d4" kindref="member">warning_print</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>register<sp/>termination<sp/>function!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>handles<sp/>only<sp/>&quot;normal&quot;<sp/>termination<sp/>(via<sp/>a<sp/>call<sp/>to<sp/>exit).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>a<sp/>consequence,<sp/>we<sp/>need<sp/>to<sp/>also<sp/>trap<sp/>ctrl-C,<sp/>which<sp/>issues<sp/>a<sp/>SIGINT,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>cause<sp/>it<sp/>to<sp/>call<sp/>exit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>signal(SIGINT,<sp/>exit);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>SIGPIPE<sp/>errors,<sp/>which<sp/>terminate<sp/>the<sp/>entire<sp/>application<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>socket<sp/>write()<sp/>fails<sp/>because<sp/>the<sp/>reader<sp/>has<sp/>closed<sp/>the<sp/>socket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead,<sp/>cause<sp/>an<sp/>EPIPE<sp/>error<sp/>to<sp/>be<sp/>set<sp/>when<sp/>write()<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>signal(SIGPIPE,<sp/>SIG_IGN);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rti_8c_1a8de011aeee37cd0347b5e01d7e3baed4" kindref="member">process_args</ref>(default_argc,<sp/>default_argv)</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="rti_8c_1a8de011aeee37cd0347b5e01d7e3baed4" kindref="member">process_args</ref>(argc,<sp/>argv))<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_lock(&amp;mutex);<sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>start_time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialize();</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transfer_q<sp/>=<sp/><ref refid="pqueue_8h_1a09b96709c25615c2232596ba6c959c26" kindref="member">pqueue_init</ref>(INITIAL_REACT_QUEUE_SIZE,<sp/>in_reverse_order,<sp/>get_reaction_index,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_reaction_position,<sp/>set_reaction_position,<sp/>reaction_matches,<sp/>print_reaction);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>queue<sp/>on<sp/>which<sp/>to<sp/>put<sp/>reactions<sp/>that<sp/>are<sp/>currently<sp/>executing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executing_q<sp/>=<sp/><ref refid="pqueue_8h_1a09b96709c25615c2232596ba6c959c26" kindref="member">pqueue_init</ref>(<ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref>,<sp/>in_reverse_order,<sp/>get_reaction_index,</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_reaction_position,<sp/>set_reaction_position,<sp/>reaction_matches,<sp/>print_reaction);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>following<sp/>function<sp/>only<sp/>once,<sp/>rather<sp/>than<sp/>per<sp/>worker<sp/>thread<sp/>(although<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>can<sp/>be<sp/>probably<sp/>called<sp/>in<sp/>that<sp/>manner<sp/>as<sp/>well).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lf_initialize_start_tag();</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_threads();</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf_mutex_unlock(&amp;mutex);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>worker<sp/>threads<sp/>to<sp/>exit.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>worker<sp/>threads<sp/>to<sp/>exit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>worker_thread_exit_status<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a0a27a0fa2f8d9461204242121941696c" kindref="member">DEBUG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>threads:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/><ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref>);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="reactor_8h_1af74a2782bda0d66298d22d637ad964b5" kindref="member">_lf_number_of_threads</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failure<sp/>=<sp/>lf_thread_join(__thread_ids[i],<sp/>&amp;worker_thread_exit_status);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failure)<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>join<sp/>thread<sp/>listening<sp/>for<sp/>incoming<sp/>messages:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>strerror(failure));</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(worker_thread_exit_status<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8c_1a1c6c13db619d78a55e0517405f226cc3" kindref="member">error_print</ref>(</highlight><highlight class="stringliteral">&quot;----<sp/>Worker<sp/>%d<sp/>reports<sp/>error<sp/>code<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>worker_thread_exit_status);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1a02ab3aea33a20e71b0f50923d3b222a7" kindref="member">LOG_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;----<sp/>All<sp/>worker<sp/>threads<sp/>exited<sp/>successfully.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(__thread_ids);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/shaokai/lingua-franca-master/git/lingua-franca/org.lflang/src/lib/core/reactor_threaded.c"/>
  </compounddef>
</doxygen>
